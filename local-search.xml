<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2022第五届&quot;强网&quot;拟态</title>
    <link href="/2022/11/07/2022QW%E6%8B%9F%E6%80%81/"/>
    <url>/2022/11/07/2022QW%E6%8B%9F%E6%80%81/</url>
    
    <content type="html"><![CDATA[<blockquote><p>题目大多是调试+汇编，考点涉及ollvm、go、veh、call、vm。</p></blockquote><p>有点<span class="github-emoji"><span>😡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f621.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f621.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f621.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>, babyre这题其实没啥逆向上的难度，无非在tls注册塞了反调试，主要是除法异常调用veh的处理函数来修改aes的s盒，aes的算法实现部分是4个连续字节为一行而不是一列，类似一个转置操作。一时兴起手撸AES，调试轮秘钥来解密，应该是第4解。</p><p>然而，赛后客服找我??? 说我py??? flag泄露，当时<span class="github-emoji"><span>🐭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🐭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>就惊了，连aes都是一字字码的何来py一说，都没和别人交流怎么泄露。于是找了客服给的疑似交我flag的队伍的师傅询问，师傅也很懵逼…但是他直接问我附件是不是babyre5，我又下附件确认，确实是。而他们那边也是babyre5，而别的队则是其他babyrexx，合着动态附件改了zip的名，内容一致。</p><p>…客服也是耐心听了我的描述，并确实商讨之后给出答复，对事不对人，没啥恶意，<span class="github-emoji"><span>🐭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🐭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>的叫声还真是可耐呢~。只是希望队友的努力不能因为凭空而来的碰撞而被摧毁，好不容易有起色的战队再次进入低谷。</p><blockquote><p><span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 另，两个毫不相干的zip都能碰撞，<span class="github-emoji"><span>🐭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🐭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>我呀，咋没个学re的小姐姐带我呢~</p></blockquote><h2 id="Crypto">Crypto</h2><h3 id="WeakRandom">WeakRandom</h3><blockquote><p>一元随机数生成，输出的随机数会泄露16bit的x的信息，并且高16bit也与x有关，因为限制时限比较长，借助高16bit直接爆破即可。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next</span>(<span class="hljs-params">self</span>):</span><br>    x = <span class="hljs-built_in">int</span>((self.x ** <span class="hljs-number">2</span>) // (<span class="hljs-number">10</span> ** (self.s // <span class="hljs-number">2</span>))) % self.n<br>    self.x = x<br>    high = (<span class="hljs-built_in">int</span>(hashlib.sha256(<span class="hljs-built_in">str</span>(x).encode()).hexdigest(),<span class="hljs-number">16</span>) &gt;&gt; <span class="hljs-number">16</span>) &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>    low = x &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>    result = high &lt;&lt; <span class="hljs-number">16</span> | low<br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></tbody></table></figure><p>可见输出随机数中的低16bit即x中的低16bit，而其高16bit是对x进行hash等运算，那么直接爆破高16bit，做同样的hash运算再与随机数中的高16bit进行比对即可恢复x，之后就可以正常预测。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> mycrypto.retool <span class="hljs-keyword">import</span> pfw<br>guess=<span class="hljs-number">0</span><br>myx=<span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getx</span>(<span class="hljs-params">xx:<span class="hljs-built_in">int</span></span>):</span><br>    <span class="hljs-keyword">global</span> guess,myx<br>    low=xx&amp;<span class="hljs-number">0xffff</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0xffff</span>):<br>        tt=i&lt;&lt;<span class="hljs-number">16</span>|low<br>        ans=(<span class="hljs-built_in">int</span>(hashlib.sha256(<span class="hljs-built_in">str</span>(tt).encode()).hexdigest(), <span class="hljs-number">16</span>) &gt;&gt; <span class="hljs-number">16</span>) &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> ans==xx&gt;&gt;<span class="hljs-number">16</span>:<br>            guess=<span class="hljs-number">1</span><br>            myx=tt<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">'get get x'</span>)<br>            <span class="hljs-keyword">return</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_num</span>():</span><br>    <span class="hljs-keyword">global</span> myx<br>    x = <span class="hljs-built_in">int</span>((myx ** <span class="hljs-number">2</span>) // (<span class="hljs-number">10</span> ** <span class="hljs-number">2</span>)) % <span class="hljs-number">10000000000</span><br>    myx = x<br>    high = (<span class="hljs-built_in">int</span>(sha256(<span class="hljs-built_in">str</span>(myx).encode()).hexdigest(), <span class="hljs-number">16</span>) &gt;&gt; <span class="hljs-number">16</span>) &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>    low = x &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>    result = high &lt;&lt; <span class="hljs-number">16</span> | low<br>    <span class="hljs-keyword">return</span> result<br><br>r=remote(<span class="hljs-string">'172.51.60.200'</span>,<span class="hljs-number">9998</span>)<br>p=r.recvline().strip()<br>p=p.split(<span class="hljs-string">b' == '</span>)<br>m=p[<span class="hljs-number">0</span>][<span class="hljs-number">12</span>:-<span class="hljs-number">1</span>].decode()<br>t=p[<span class="hljs-number">1</span>].decode()<br>ans=pfw(m,<span class="hljs-number">4</span>,t).encode()<br>r.recvuntil(<span class="hljs-string">b'Give me XXXX:'</span>)<br>r.sendline(ans)<br>r.recvuntil(<span class="hljs-string">b'predict game!'</span>)<br>cnt=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    r.recvuntil(<span class="hljs-string">b'Please your guess :'</span>)<br>    <span class="hljs-keyword">if</span> guess==<span class="hljs-number">0</span>:<br>        r.sendline(<span class="hljs-string">b'0'</span>)<br>    <span class="hljs-keyword">else</span>:<br>        r.sendline(<span class="hljs-built_in">str</span>(get_num()).encode())<br>    p=r.recvline().strip()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b'Success!'</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> p:<br>        num=<span class="hljs-built_in">int</span>(p.split(<span class="hljs-string">b'is '</span>)[-<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">if</span> guess==<span class="hljs-number">0</span>:<br>            getx(num)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">'=.='</span>)<br>    <span class="hljs-keyword">else</span>:<br>        cnt+=<span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(cnt)<br>r.interactive()<br>r.close()<br><span class="hljs-comment"># 限制的时间太长了，直接爆破2字节即可恢复状态</span><br></code></pre></td></tr></tbody></table></figure><h2 id="Misc">Misc</h2><h3 id="babymisc">babymisc</h3><blockquote><p>经典二分，银行卡密6位数，在lost前能猜13/14次也就2^13内的数据可以找，直接转为概率问题，多次交互限定在小范围内二分即可。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=<span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> e==<span class="hljs-number">0</span>:<br>  <span class="hljs-built_in">min</span> = <span class="hljs-number">480000</span><br>  num = <span class="hljs-number">0</span><br>  <span class="hljs-built_in">max</span> = <span class="hljs-built_in">min</span>+<span class="hljs-number">2</span>**<span class="hljs-number">12</span><br>  r = remote(<span class="hljs-string">'172.51.60.153'</span>, <span class="hljs-number">9999</span>)<br>  r.recvuntil(<span class="hljs-string">b'&gt;'</span>)<br>  r.sendline(<span class="hljs-string">b'Y'</span>)<br>  <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    r.recvuntil(<span class="hljs-string">b'Please enter a number:'</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(num).encode())<br>    p=r.recvline().strip()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b'low'</span> <span class="hljs-keyword">in</span> p:<br>        <span class="hljs-built_in">min</span>=num<br>        num=(<span class="hljs-built_in">max</span>+num)//<span class="hljs-number">2</span><br>        <span class="hljs-built_in">print</span>(p)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"min:%d max:%d num:%d"</span>%(<span class="hljs-built_in">min</span>,<span class="hljs-built_in">max</span>,num))<br><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">b'up'</span> <span class="hljs-keyword">in</span> p:<br>        <span class="hljs-built_in">print</span>(p)<br>        <span class="hljs-built_in">max</span>=num<br>        num=(<span class="hljs-built_in">min</span>+num)//<span class="hljs-number">2</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"min:%d max:%d num:%d"</span>%(<span class="hljs-built_in">min</span>, <span class="hljs-built_in">max</span>, num))<br>    <span class="hljs-keyword">else</span> :<br>        <span class="hljs-built_in">print</span>(p)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b'You lost'</span> <span class="hljs-keyword">in</span> p:<br>            r.close()<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(r.recvline())<br>            <span class="hljs-built_in">print</span>(r.recvline())<br>            <span class="hljs-built_in">print</span>(r.recvline())<br>            e=<span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">'********************************************************'</span>)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> e==<span class="hljs-number">1</span>:<br>        r.interactive()<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-string">"""</span><br><span class="hljs-string">b'Bingo'</span><br><span class="hljs-string">b'Time use:1.13second\n'</span><br><span class="hljs-string">b"To thank you, I'll give you the flag\n"</span><br><span class="hljs-string">b'flag{NTbkIYgC4ZxeAZJohoeP0Xi2ubrgQUKH}\n'</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106175215920.png" alt="image-20221106175215920"></p><h2 id="Re">Re</h2><h3 id="comeongo">comeongo</h3><blockquote><p>go语言逆向，将username和passwd切片组合进行加密，在mian_check1、main_check2中进行check，设计加密base58、base64、移位和方程组。</p></blockquote><p>要求输入的username和passwd均为16字节，main_check1是正常的base58加密</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106162733131.png" alt="image-20221106162733131"></p><p>cyberchef解出GoM0bi13G3tItEzF，通过切片的逻辑得知该部分为username和passwd的前8个字节。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106163659228.png" alt="image-20221106163659228"></p><p>maincheck2将username和passwd的后8个字节再分成4字节一组，每次加密一组(4字节name、4字节passwd)，第一段最后会有base64加密，对X051YmNmRnE=解密后得_NubcfFq，在base64前还有一部分移位加密。测试输入为<code>bxs</code>时会输出<code>nlg</code>满足12移位。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">k=<span class="hljs-string">b'nlg'</span><br>s=<span class="hljs-string">b'bxs'</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">if</span> s[i]&gt;<span class="hljs-number">96</span> <span class="hljs-keyword">and</span> s[i]&lt;<span class="hljs-number">123</span>:<br>        <span class="hljs-keyword">if</span> s[i]-<span class="hljs-number">97</span>+<span class="hljs-number">12</span>&lt;<span class="hljs-number">26</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(((s[i]-<span class="hljs-number">97</span>+<span class="hljs-number">12</span>)%<span class="hljs-number">26</span>)+<span class="hljs-number">97</span>),end=<span class="hljs-string">''</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(((s[i] - <span class="hljs-number">97</span> -<span class="hljs-number">12</span> +<span class="hljs-number">26</span>) % <span class="hljs-number">26</span>) + <span class="hljs-number">97</span>),end=<span class="hljs-string">''</span>)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></tbody></table></figure><p>所以对<code>_NubcfFq</code>进行移位解密得到<code>_BinorRe</code>，之后使用<code>main_encryptBytes</code>函数加密最后一组。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106165122015.png" alt="image-20221106165122015"></p><p>把两部分的值逐字节相加起来，并且会把密码那部分的前两个字节改为vG，这样能保证前两个字节是可以确定的。之后在main_runtime_other中会限制后两个字节的差值分别为0x3f和0x1f，解方程即可恢复。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106165831028.png" alt="image-20221106165831028"></p><blockquote><p>go的反编译这块还是有所欠缺，关键是紧跟输入的变化来求解。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br>n=<span class="hljs-string">'GoM0bi13ABabef12'</span><br>s=<span class="hljs-string">'G3tItEzF_bxs2345'</span><br><br>k=<span class="hljs-string">b'nlg'</span><br>s=<span class="hljs-string">b'bxs'</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">if</span> s[i]&gt;<span class="hljs-number">96</span> <span class="hljs-keyword">and</span> s[i]&lt;<span class="hljs-number">123</span>:<br>        <span class="hljs-keyword">if</span> s[i]-<span class="hljs-number">97</span>+<span class="hljs-number">12</span>&lt;<span class="hljs-number">26</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(((s[i]-<span class="hljs-number">97</span>+<span class="hljs-number">12</span>)%<span class="hljs-number">26</span>)+<span class="hljs-number">97</span>),end=<span class="hljs-string">''</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(((s[i] - <span class="hljs-number">97</span> -<span class="hljs-number">12</span> +<span class="hljs-number">26</span>) % <span class="hljs-number">26</span>) + <span class="hljs-number">97</span>),end=<span class="hljs-string">''</span>)<br><span class="hljs-built_in">print</span>()<br>s=<span class="hljs-string">b'ubcf'</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>    <span class="hljs-keyword">if</span> s[i]&gt;<span class="hljs-number">96</span> <span class="hljs-keyword">and</span> s[i]&lt;<span class="hljs-number">123</span>:<br>        <span class="hljs-keyword">if</span> s[i]-<span class="hljs-number">97</span>&gt;=<span class="hljs-number">12</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(((s[i]-<span class="hljs-number">97</span>-<span class="hljs-number">12</span>)%<span class="hljs-number">26</span>)+<span class="hljs-number">97</span>),end=<span class="hljs-string">''</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(((s[i] - <span class="hljs-number">97</span> +<span class="hljs-number">12</span> +<span class="hljs-number">26</span>) % <span class="hljs-number">26</span>) + <span class="hljs-number">97</span>),end=<span class="hljs-string">''</span>)<br><span class="hljs-built_in">print</span>()<br>C=<span class="hljs-string">'_NubcfFq'</span><br><span class="hljs-comment"># _BinorRe</span><br><br>n=<span class="hljs-string">'GoM0bi13_BingGo@'</span><br>s=<span class="hljs-string">'G3tItEzForRevG0!'</span><br><br>a=<span class="hljs-string">b'gG@!'</span><br>b=<span class="hljs-string">b'vG_@'</span><br>cc=[<span class="hljs-number">0xDD</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x64</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((<span class="hljs-number">0xa1</span>+<span class="hljs-number">0x3f</span>-<span class="hljs-number">2</span>)//<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((<span class="hljs-number">0xa1</span>+<span class="hljs-number">0x3f</span>-<span class="hljs-number">2</span>)//<span class="hljs-number">2</span>-<span class="hljs-number">0x3f</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((<span class="hljs-number">0x64</span>+<span class="hljs-number">0x1f</span>-<span class="hljs-number">3</span>)//<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((<span class="hljs-number">0x64</span>+<span class="hljs-number">0x1f</span>-<span class="hljs-number">3</span>)//<span class="hljs-number">2</span> - <span class="hljs-number">0x1f</span>))<br>n=<span class="hljs-string">'GoM0bi13_BingGo@'</span><br>s=<span class="hljs-string">'G3tItEzForRevG0!'</span><br><span class="hljs-built_in">print</span>(md5((<span class="hljs-string">'flag{'</span>+n+s+<span class="hljs-string">'}'</span>).encode()).hexdigest())<br></code></pre></td></tr></tbody></table></figure><h3 id="mcmc">mcmc</h3><blockquote><p>主要是控制流平坦化和虚假控制流混淆，用D810插件可以还原大部分逻辑，并且部分加密的基本块都比较大且明显，直接看汇编还原逻辑即可。</p></blockquote><p>加密的主要逻辑如下</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221105212557046.png" alt="image-20221105212557046"></p><p>输入32字节，异或了部分，并每次4个dword类型进行线性运算，sub_405480函数反混淆不是太好，但是其加密的基本块很大，直接调试跟汇编即可还原逻辑。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221105212933137.png" alt="image-20221105212933137"></p><p>还原的加密算法如下,对4块进行线性运算。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encry</span>(<span class="hljs-params">s:<span class="hljs-built_in">list</span></span>):</span><br>    c=[<span class="hljs-number">0</span>]*<span class="hljs-number">4</span>                                <br>    c[<span class="hljs-number">0</span>]=<span class="hljs-number">2</span>*s[<span class="hljs-number">0</span>]+s[<span class="hljs-number">1</span>]-s[<span class="hljs-number">2</span>]+s[<span class="hljs-number">3</span>]<br>    c[<span class="hljs-number">1</span>]=s[<span class="hljs-number">0</span>]+s[<span class="hljs-number">1</span>]+s[<span class="hljs-number">2</span>]-s[<span class="hljs-number">3</span>]<br>    c[<span class="hljs-number">2</span>]=s[<span class="hljs-number">0</span>]-s[<span class="hljs-number">1</span>]+s[<span class="hljs-number">2</span>]-s[<span class="hljs-number">3</span>]<br>    c[<span class="hljs-number">3</span>]=s[<span class="hljs-number">0</span>]+<span class="hljs-number">2</span>*s[<span class="hljs-number">1</span>]-s[<span class="hljs-number">2</span>]+<span class="hljs-number">2</span>*s[<span class="hljs-number">3</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        c[i]&amp;=<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> c<br></code></pre></td></tr></tbody></table></figure><p>之后的 sub_4011A0函数是salsa20加密的秘钥初始化，根据findcrypt识别出的<code>expand 32-byte k</code>可判断，而秘钥和随机数都是在<code>init_array</code>系列函数中获取的，因位salsa20为流密码，所以主要定位到加密的异或，在sub_401820函数。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221105213538149.png" alt="image-20221105213538149"></p><p>v7仅与流秘钥相关，之后根据i的奇偶情况生成不同的v4，之后是将明文与v4+v7进行异或，v7可以通过调试获取，比对的密文可以查看<code>.data</code>段的数据，发现有32字节的数组，并且对其交叉引用出现在了与s比对的代码附近，并且在salsa20加密之后密文s没有再变化。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221105214203909.png" alt="image-20221105214203909"></p><p>解密脚本和测试数据如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">def <span class="hljs-title">encry</span><span class="hljs-params">(s:<span class="hljs-built_in">list</span>)</span>:</span><br><span class="hljs-function">    c</span>=[<span class="hljs-number">0</span>]*<span class="hljs-number">4</span>                                 #硬看汇编<br>    c[<span class="hljs-number">0</span>]=<span class="hljs-number">2</span>*s[<span class="hljs-number">0</span>]+s[<span class="hljs-number">1</span>]-s[<span class="hljs-number">2</span>]+s[<span class="hljs-number">3</span>]<br>    c[<span class="hljs-number">1</span>]=s[<span class="hljs-number">0</span>]+s[<span class="hljs-number">1</span>]+s[<span class="hljs-number">2</span>]-s[<span class="hljs-number">3</span>]<br>    c[<span class="hljs-number">2</span>]=s[<span class="hljs-number">0</span>]-s[<span class="hljs-number">1</span>]+s[<span class="hljs-number">2</span>]-s[<span class="hljs-number">3</span>]<br>    c[<span class="hljs-number">3</span>]=s[<span class="hljs-number">0</span>]+<span class="hljs-number">2</span>*s[<span class="hljs-number">1</span>]-s[<span class="hljs-number">2</span>]+<span class="hljs-number">2</span>*s[<span class="hljs-number">3</span>]<br>    <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">4</span>):<br>        c[i]&amp;=<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> c<br><br>cc=encry([<span class="hljs-number">0x61616161</span>,<span class="hljs-number">0x3A616161</span>,<span class="hljs-number">0x61616161</span>,<span class="hljs-number">0x3B616161</span>])<br><br><span class="hljs-meta">#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br>t1=[<span class="hljs-number">0x23</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xEB</span>]<br>c1=[<span class="hljs-number">0xD4</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x59</span>]<br><br>kstr=[ t1[i]^c1[i] <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">32</span>)]<br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">32</span>):<br>    <span class="hljs-keyword">if</span> i&amp;<span class="hljs-number">1</span>:<br>        kstr[i]-=c1[(i<span class="hljs-number">-1</span>+<span class="hljs-number">32</span>)%<span class="hljs-number">32</span>]<br>    <span class="hljs-keyword">else</span>:<br>        kstr[i]-=t1[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">32</span>]<br>kstr=[(i+<span class="hljs-number">256</span>)%<span class="hljs-number">256</span> <span class="hljs-keyword">for</span> i in kstr]<br><br><span class="hljs-meta">#bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</span><br>t2=[<span class="hljs-number">0x26</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xE3</span>]<br>c2=[<span class="hljs-number">0xDC</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x7D</span>]<br>kstr1=[ t2[i]^c2[i] <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">32</span>)]<br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">32</span>):<br>    <span class="hljs-keyword">if</span> i&amp;<span class="hljs-number">1</span>:<br>        kstr1[i]-=c2[(i<span class="hljs-number">-1</span>+<span class="hljs-number">32</span>)%<span class="hljs-number">32</span>]<br>    <span class="hljs-keyword">else</span>:<br>        kstr1[i]-=t2[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">32</span>]<br>kstr1=[(i+<span class="hljs-number">256</span>)%<span class="hljs-number">256</span> <span class="hljs-keyword">for</span> i in kstr1]<br><br>assert kstr==kstr1<br>v7=kstr1<br><br>def hexdump(s:<span class="hljs-built_in">list</span>):<br>    <span class="hljs-keyword">for</span> i in s:<br>        print(hex(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">2</span>),end=<span class="hljs-string">' '</span>)<br>    print()<br>enc=[<span class="hljs-number">0x06</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x32</span>]<br><br>c=[]<br>from z3 <span class="hljs-keyword">import</span> *<br>a2=[BitVec(<span class="hljs-string">'a2%d'</span>%i,<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">32</span>)]<br>sol=Solver()<br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">32</span>):<br>    <span class="hljs-keyword">if</span> i&amp;<span class="hljs-number">1</span>:<br>        v4=c[i<span class="hljs-number">-1</span>]<br>    <span class="hljs-keyword">else</span>:<br>        v4=a2[i+<span class="hljs-number">1</span>]<br>    c.append((a2[i]^(v4+v7[i]))&amp;<span class="hljs-number">0xff</span>)<br>    sol.append(c[i]==enc[i])<br>print(sol.check())<br>m=sol.model()<br>encry_c=[m[a2[i]].as_long() <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">32</span>)]<br>print(encry_c)<br>hexdump(encry_c)<br><span class="hljs-meta"># assert encry_c==t2</span><br><br>print(<span class="hljs-string">'sol salsal20 success!'</span>)<br>tc=[]<br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">0</span>,<span class="hljs-number">32</span>,<span class="hljs-number">4</span>):<br>    tmp=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j in range(<span class="hljs-number">4</span>):<br>        tmp|=(encry_c[i+j]&lt;&lt;(<span class="hljs-number">8</span>*j))<br>    tc.append(tmp)<br><br>from claripy <span class="hljs-keyword">import</span> *<br>fm=[BVS(<span class="hljs-string">'fm%d'</span>%i,<span class="hljs-number">32</span>) <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">4</span>)]<br>sol0=Solver()<br>fc1=encry(fm)<br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">4</span>):<br>    sol0.add(fc1[i]==tc[i+<span class="hljs-number">4</span>])  #分两组解即可<br>print(sol0.check_satisfiability())<br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">4</span>):<br>    print(<span class="hljs-keyword">int</span>.to_bytes(sol0.eval(fm[i],<span class="hljs-number">4</span>)[<span class="hljs-number">0</span>],<span class="hljs-number">4</span>,<span class="hljs-string">'little'</span>).decode(),end=<span class="hljs-string">'')</span><br><span class="hljs-string">print()</span><br><span class="hljs-string">#3ummer170ver_C0Gingcn0t(T0p0hhh2</span><br><span class="hljs-string"># m0=sol0.model()</span><br><span class="hljs-string"># print(int.to_bytes(m0[fm[0]].as_long(),4,'</span>little<span class="hljs-number">'</span>))<br>s=<span class="hljs-built_in">list</span>(b<span class="hljs-number">'3u</span>mmer170ver_C0Gingcn0t(T0p0hhh2<span class="hljs-number">'</span>)<br>s[<span class="hljs-number">7</span>] ^= <span class="hljs-number">0x44</span><br>s[<span class="hljs-number">15</span>] ^= <span class="hljs-number">0x23</span><br>s[<span class="hljs-number">23</span>] ^= <span class="hljs-number">0x5B</span><br>s[<span class="hljs-number">31</span>] ^= <span class="hljs-number">0x5A</span><br>print(bytes(s))<br></code></pre></td></tr></tbody></table></figure><h3 id="windows-call">windows_call</h3><blockquote><p>题目隐藏了大部分的windows函数，并且数据通过偏移来寻址，结合调试和算法特征还原程序逻辑。</p></blockquote><p>首先是check输入格式为flag{}，并且限制内容长度为40字节的16进制数据。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106170559796.png" alt="image-20221106170559796"></p><p>期间会将输入内容小写转大写，并保存转化前后的字符。调试中可知<code>c</code>函数中包含<code>md5</code>的模数，故该部分线对转换前和转换后的输入进行md5校检，要求相同即输入的内容为大写，之后会将输入2个一组转为字节数据，存在0x400偏移处。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106170752644.png" alt="image-20221106170752644"></p><p>转换后的输入20字节，取出前4个字节，分为2个word数据x和y来生成后续加密所使用的key和iv。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106171110451.png" alt="image-20221106171110451"></p><p>因为在密文的比对处有对x和y值的约束，可以通过该约束爆破x和y共4个字节。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106171207819.png" alt="image-20221106171207819"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_key</span>(<span class="hljs-params">x,y</span>):</span><br>    c=x^y<br>    d=c&amp;<span class="hljs-number">0xff</span><br>    h=c&gt;&gt;<span class="hljs-number">8</span><br>    <span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span><br>    out=[]<br>    out0=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        out.append((h+i)^(d+i))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        out0.append(out[i]^((i-<span class="hljs-number">64</span>+<span class="hljs-number">0x100</span>)%<span class="hljs-number">0x100</span>))<br>        <span class="hljs-built_in">sum</span>+=out0[i]<br>    <span class="hljs-comment">#print(hex(sum))</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>,out0,out<br><br>get_key(<span class="hljs-number">0x2301</span>,<span class="hljs-number">0xbc4a</span>)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0xff</span>):<br>    v7=x&lt;&lt;<span class="hljs-number">8</span> | <span class="hljs-number">0xa0</span><br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0xffff</span>):<br>        <span class="hljs-keyword">if</span> (v7-y)&amp;<span class="hljs-number">0xffff</span>==<span class="hljs-number">0x2B8</span> <span class="hljs-keyword">and</span> (v7+<span class="hljs-number">0x3500</span>)&amp;<span class="hljs-number">0xffff</span> &lt;=<span class="hljs-number">0x800</span> <span class="hljs-keyword">and</span> (y+<span class="hljs-number">0x3800</span>)&amp;<span class="hljs-number">0xffff</span>&lt;=<span class="hljs-number">0x800</span>:<br>            <span class="hljs-keyword">if</span> get_key(v7,y)[<span class="hljs-number">0</span>]==<span class="hljs-number">0x8A8</span>:<br><br>                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(v7),<span class="hljs-built_in">hex</span>(y))<br><span class="hljs-comment">#0xcca0 0xc9e8</span><br><span class="hljs-comment">#0xcea0 0xcbe8</span><br><span class="hljs-comment">#满足条件的为 x=0xcca0 y=0xc9e8，故前8个字符为E8C9A0CC</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106171506809.png" alt="image-20221106171506809"></p><p>首先经过秘钥扩展，0x80(128),之后传入key和iv到sub_402613进行加密。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106171621293.png" alt="image-20221106171621293"></p><p>可见先异或iv，再ECB即典型的CBC模式。在尝试使用finger恢复符号时，其识别出了<code>Camellia</code>算法让人误解，观察后续算法和特征并没有找到其特征运算，=.=被坑了好久，以为是魔改。之后在调试秘钥扩展(sub_40234A)详细步骤时发现了AES的特征Sbox，在v4的280偏移处。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106172014100.png" alt="image-20221106172014100"></p><p>使用AES解密密文，check成功。干扰finger的识别技术比较帅，杀伤力蛮大的。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_key</span>(<span class="hljs-params">x,y</span>):</span><br>    c=x^y<br>    d=c&amp;<span class="hljs-number">0xff</span><br>    h=c&gt;&gt;<span class="hljs-number">8</span><br>    <span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span><br>    out=[]<br>    out0=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        out.append((h+i)^(d+i))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        out0.append(out[i]^((i-<span class="hljs-number">64</span>+<span class="hljs-number">0x100</span>)%<span class="hljs-number">0x100</span>))<br>        <span class="hljs-built_in">sum</span>+=out0[i]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>,out0,out<br><br><br><span class="hljs-comment"># for x in range(0xff):</span><br><span class="hljs-comment">#     v7=x&lt;&lt;8 | 0xa0</span><br><span class="hljs-comment">#     for y in range(0xffff):</span><br><span class="hljs-comment">#         if (v7-y)&amp;0xffff==0x2B8 and (v7+0x3500)&amp;0xffff &lt;=0x800 and (y+0x3800)&amp;0xffff&lt;=0x800:</span><br><span class="hljs-comment">#             if get_key(v7,y)[0]==0x8A8:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#                 print(hex(v7),hex(y))</span><br><span class="hljs-comment">#0xcca0 0xc9e8</span><br><span class="hljs-comment">#0xcea0 0xcbe8</span><br><span class="hljs-comment">#前8个字节正确后即可调试提取iv和k</span><br>k=[<span class="hljs-number">0x8D</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8C</span>]<br>iv=[<span class="hljs-number">0x4D</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x43</span>]<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(iv)==<span class="hljs-built_in">len</span>(k)<br><br>enc=[<span class="hljs-number">0xF3A03784</span>, <span class="hljs-number">0xFC3436EC</span>,<span class="hljs-number">0x6F38A294</span>,<span class="hljs-number">0x7C7E343F</span>]<br>mc=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc:<br>    mc.append(<span class="hljs-built_in">int</span>.to_bytes(i,<span class="hljs-number">4</span>,<span class="hljs-string">'little'</span>))<br><br>s=<span class="hljs-string">'flag{E8C9A0CC8437A0F3EC3634FC94A2386F3F347E7C}'</span><br><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>aes=AES.new(<span class="hljs-built_in">bytes</span>(k),AES.MODE_CBC,<span class="hljs-built_in">bytes</span>(iv))<br><span class="hljs-built_in">print</span>(aes.decrypt(<span class="hljs-string">b''</span>.join(mc)).<span class="hljs-built_in">hex</span>().upper())<br>flag=<span class="hljs-string">'flag{E8C9A0CC8B9854CDD0AC321B790FC74EFA520FBC}'</span><br></code></pre></td></tr></tbody></table></figure><h3 id="babyre">babyre</h3><blockquote><p>tls中触发异,借助veh修改AES的sbox，程序存在反调试不过不影响正常执行，把修改后的sbox在加密前patch能达到同一个效果。</p></blockquote><p>tls回调函数，完成注册veh-&gt;反调试-&gt;触发/0异常-&gt;修改sbox。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106173214891.png" alt="image-20221106173214891"></p><p>修改sbox的操作与程序输入获反调试步骤无关，直接在handle函数下断点，改跳转绕过反调试让程序触发异常断下即可get sbox。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106173709006.png" alt="image-20221106173709006"></p><p>运行时通过idapython进行patch即可模拟触发异常的情况。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idautils<br>sbox=[<span class="hljs-number">0x00000077</span>, <span class="hljs-number">0x00000068</span>, <span class="hljs-number">0x00000063</span>, <span class="hljs-number">0x0000006F</span>, <span class="hljs-number">0x000000E6</span>, <span class="hljs-number">0x0000007F</span>, <span class="hljs-number">0x0000007B</span>, <span class="hljs-number">0x000000D1</span>, ...]<br><br>adr=<span class="hljs-number">0xCD4000</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    patch_dword(adr+<span class="hljs-number">4</span>*i,sbox[i])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'ok'</span>)<br></code></pre></td></tr></tbody></table></figure><p>因为秘钥扩展中出现了密文的踪迹，但是初始的key是写死在秘钥中的，所以可以直接调试获取轮秘钥以避免出错。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106174010265.png" alt="image-20221106174010265"></p><p>并且分成两组进行加密，前一组的密文会用于第二组的初始化。</p><p>对于AES的加密部分就有一点阴间了，结构很经典但是其在矩阵的排布上与以往不同，该程序中为连续4个字节为一行而并非一列，并且轮秘钥异或时的下标索引也进行了变动。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221106174111858.png" alt="image-20221106174111858"></p><p>大部分脚本都用列来写的，手上没有好用的板子来改，直接现场手撸AES，顺便复习密码学; ), 跟一轮与调试加密相同即可get flag(累啊。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hexdump</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(s[i])[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">2</span>),end=<span class="hljs-string">' '</span>)<br>    <span class="hljs-built_in">print</span>()<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_invs</span>(<span class="hljs-params">sb:<span class="hljs-built_in">list</span></span>):</span><br>    out=[<span class="hljs-number">0</span>]*<span class="hljs-number">256</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        out[sb[i]]=i<br>    <span class="hljs-keyword">return</span> out<br>sbox=[<span class="hljs-number">0x00000077</span>, <span class="hljs-number">0x00000068</span>, <span class="hljs-number">0x00000063</span>, <span class="hljs-number">0x0000006F</span>, <span class="hljs-number">0x000000E6</span>, <span class="hljs-number">0x0000007F</span>, <span class="hljs-number">0x0000007B</span>, <span class="hljs-number">0x000000D1</span>, <span class="hljs-number">0x00000024</span>, <span class="hljs-number">0x00000015</span>, <span class="hljs-number">0x00000073</span>, <span class="hljs-number">0x0000003F</span>, <span class="hljs-number">0x000000EA</span>, <span class="hljs-number">0x000000C3</span>, <span class="hljs-number">0x000000BF</span>, <span class="hljs-number">0x00000062</span>, <span class="hljs-number">0x000000DE</span>, <span class="hljs-number">0x00000096</span>, <span class="hljs-number">0x000000DD</span>, <span class="hljs-number">0x00000069</span>, <span class="hljs-number">0x000000EE</span>, <span class="hljs-number">0x0000004D</span>, <span class="hljs-number">0x00000053</span>, <span class="hljs-number">0x000000E4</span>, <span class="hljs-number">0x000000B9</span>, <span class="hljs-number">0x000000C0</span>, <span class="hljs-number">0x000000B6</span>, <span class="hljs-number">0x000000BB</span>, <span class="hljs-number">0x00000088</span>, <span class="hljs-number">0x000000B0</span>, <span class="hljs-number">0x00000066</span>, <span class="hljs-number">0x000000D4</span>, <span class="hljs-number">0x000000A3</span>, <span class="hljs-number">0x000000E9</span>, <span class="hljs-number">0x00000087</span>, <span class="hljs-number">0x00000032</span>, <span class="hljs-number">0x00000022</span>, <span class="hljs-number">0x0000002B</span>, <span class="hljs-number">0x000000E3</span>, <span class="hljs-number">0x000000D8</span>, <span class="hljs-number">0x00000020</span>, <span class="hljs-number">0x000000B1</span>, <span class="hljs-number">0x000000F1</span>, <span class="hljs-number">0x000000E5</span>, <span class="hljs-number">0x00000065</span>, <span class="hljs-number">0x000000CC</span>, <span class="hljs-number">0x00000025</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000010</span>, <span class="hljs-number">0x000000D3</span>, <span class="hljs-number">0x00000037</span>, <span class="hljs-number">0x000000D7</span>, <span class="hljs-number">0x0000000C</span>, <span class="hljs-number">0x00000082</span>, <span class="hljs-number">0x00000011</span>, <span class="hljs-number">0x0000008E</span>, <span class="hljs-number">0x00000013</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x00000094</span>, <span class="hljs-number">0x000000F6</span>, <span class="hljs-number">0x000000FF</span>, <span class="hljs-number">0x00000033</span>, <span class="hljs-number">0x000000A6</span>, <span class="hljs-number">0x00000061</span>, <span class="hljs-number">0x0000001D</span>, <span class="hljs-number">0x00000097</span>, <span class="hljs-number">0x00000038</span>, <span class="hljs-number">0x0000000E</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x0000007A</span>, <span class="hljs-number">0x0000004E</span>, <span class="hljs-number">0x000000B4</span>, <span class="hljs-number">0x00000046</span>, <span class="hljs-number">0x0000002F</span>, <span class="hljs-number">0x000000C2</span>, <span class="hljs-number">0x000000A7</span>, <span class="hljs-number">0x0000003D</span>, <span class="hljs-number">0x000000F7</span>, <span class="hljs-number">0x0000003B</span>, <span class="hljs-number">0x00000090</span>, <span class="hljs-number">0x00000047</span>, <span class="hljs-number">0x000000C5</span>, <span class="hljs-number">0x00000014</span>, <span class="hljs-number">0x000000F9</span>, <span class="hljs-number">0x00000034</span>, <span class="hljs-number">0x000000E8</span>, <span class="hljs-number">0x000000A5</span>, <span class="hljs-number">0x0000004F</span>, <span class="hljs-number">0x0000007E</span>, <span class="hljs-number">0x000000DF</span>, <span class="hljs-number">0x000000AA</span>, <span class="hljs-number">0x0000002D</span>, <span class="hljs-number">0x0000005E</span>, <span class="hljs-number">0x00000058</span>, <span class="hljs-number">0x0000004C</span>, <span class="hljs-number">0x000000DB</span>, <span class="hljs-number">0x000000C4</span>, <span class="hljs-number">0x000000FB</span>, <span class="hljs-number">0x000000BE</span>, <span class="hljs-number">0x000000EF</span>, <span class="hljs-number">0x00000057</span>, <span class="hljs-number">0x00000059</span>, <span class="hljs-number">0x00000027</span>, <span class="hljs-number">0x00000091</span>, <span class="hljs-number">0x00000051</span>, <span class="hljs-number">0x000000ED</span>, <span class="hljs-number">0x00000016</span>, <span class="hljs-number">0x0000006B</span>, <span class="hljs-number">0x00000044</span>, <span class="hljs-number">0x00000028</span>, <span class="hljs-number">0x0000008B</span>, <span class="hljs-number">0x000000BC</span>, <span class="hljs-number">0x00000045</span>, <span class="hljs-number">0x000000B7</span>, <span class="hljs-number">0x00000054</span>, <span class="hljs-number">0x0000009B</span>, <span class="hljs-number">0x00000086</span>, <span class="hljs-number">0x00000089</span>, <span class="hljs-number">0x0000002C</span>, <span class="hljs-number">0x000000E1</span>, <span class="hljs-number">0x000000A8</span>, <span class="hljs-number">0x000000A2</span>, <span class="hljs-number">0x000000CE</span>, <span class="hljs-number">0x00000035</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x000000EB</span>, <span class="hljs-number">0x000000E7</span>, <span class="hljs-number">0x000000C6</span>, <span class="hljs-number">0x000000D9</span>, <span class="hljs-number">0x00000018</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x000000F8</span>, <span class="hljs-number">0x0000004B</span>, <span class="hljs-number">0x00000083</span>, <span class="hljs-number">0x00000050</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x000000D0</span>, <span class="hljs-number">0x000000B3</span>, <span class="hljs-number">0x0000006A</span>, <span class="hljs-number">0x00000029</span>, <span class="hljs-number">0x00000070</span>, <span class="hljs-number">0x00000049</span>, <span class="hljs-number">0x0000000D</span>, <span class="hljs-number">0x00000067</span>, <span class="hljs-number">0x00000074</span>, <span class="hljs-number">0x00000095</span>, <span class="hljs-number">0x0000005B</span>, <span class="hljs-number">0x000000C8</span>, <span class="hljs-number">0x00000036</span>, <span class="hljs-number">0x0000003E</span>, <span class="hljs-number">0x00000084</span>, <span class="hljs-number">0x0000009C</span>, <span class="hljs-number">0x00000052</span>, <span class="hljs-number">0x000000FA</span>, <span class="hljs-number">0x000000AC</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x000000CA</span>, <span class="hljs-number">0x0000004A</span>, <span class="hljs-number">0x0000001F</span>, <span class="hljs-number">0x000000CF</span>, <span class="hljs-number">0x000000F4</span>, <span class="hljs-number">0x00000026</span>, <span class="hljs-number">0x0000002E</span>, <span class="hljs-number">0x0000001E</span>, <span class="hljs-number">0x0000005D</span>, <span class="hljs-number">0x00000012</span>, <span class="hljs-number">0x00000030</span>, <span class="hljs-number">0x00000048</span>, <span class="hljs-number">0x000000D6</span>, <span class="hljs-number">0x000000C7</span>, <span class="hljs-number">0x000000B8</span>, <span class="hljs-number">0x00000076</span>, <span class="hljs-number">0x00000085</span>, <span class="hljs-number">0x00000081</span>, <span class="hljs-number">0x000000F0</span>, <span class="hljs-number">0x0000006D</span>, <span class="hljs-number">0x000000F3</span>, <span class="hljs-number">0x000000DC</span>, <span class="hljs-number">0x00000023</span>, <span class="hljs-number">0x00000079</span>, <span class="hljs-number">0x00000099</span>, <span class="hljs-number">0x000000C1</span>, <span class="hljs-number">0x0000005A</span>, <span class="hljs-number">0x000000BD</span>, <span class="hljs-number">0x00000078</span>, <span class="hljs-number">0x00000042</span>, <span class="hljs-number">0x000000E0</span>, <span class="hljs-number">0x000000FE</span>, <span class="hljs-number">0x00000071</span>, <span class="hljs-number">0x0000006E</span>, <span class="hljs-number">0x000000BA</span>, <span class="hljs-number">0x0000001C</span>, <span class="hljs-number">0x000000AE</span>, <span class="hljs-number">0x0000006C</span>, <span class="hljs-number">0x00000031</span>, <span class="hljs-number">0x0000003A</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x000000B2</span>, <span class="hljs-number">0x000000A0</span>, <span class="hljs-number">0x000000D2</span>, <span class="hljs-number">0x000000FC</span>, <span class="hljs-number">0x000000C9</span>, <span class="hljs-number">0x00000060</span>, <span class="hljs-number">0x0000000B</span>, <span class="hljs-number">0x0000005F</span>, <span class="hljs-number">0x000000A9</span>, <span class="hljs-number">0x0000009F</span>, <span class="hljs-number">0x0000009E</span>, <span class="hljs-number">0x00000064</span>, <span class="hljs-number">0x0000002A</span>, <span class="hljs-number">0x000000A1</span>, <span class="hljs-number">0x00000072</span>, <span class="hljs-number">0x0000005C</span>, <span class="hljs-number">0x00000017</span>, <span class="hljs-number">0x000000E2</span>, <span class="hljs-number">0x0000001A</span>, <span class="hljs-number">0x00000075</span>, <span class="hljs-number">0x00000021</span>, <span class="hljs-number">0x00000043</span>, <span class="hljs-number">0x000000AD</span>, <span class="hljs-number">0x00000092</span>, <span class="hljs-number">0x000000D5</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x0000008A</span>, <span class="hljs-number">0x000000F5</span>, <span class="hljs-number">0x000000EC</span>, <span class="hljs-number">0x0000008C</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x0000007D</span>, <span class="hljs-number">0x000000CD</span>, <span class="hljs-number">0x0000009A</span>, <span class="hljs-number">0x00000080</span>, <span class="hljs-number">0x0000008F</span>, <span class="hljs-number">0x0000000A</span>, <span class="hljs-number">0x00000093</span>, <span class="hljs-number">0x000000FD</span>, <span class="hljs-number">0x000000DA</span>, <span class="hljs-number">0x00000041</span>, <span class="hljs-number">0x0000003C</span>, <span class="hljs-number">0x000000CB</span>, <span class="hljs-number">0x00000098</span>, <span class="hljs-number">0x000000B5</span>, <span class="hljs-number">0x0000009D</span>, <span class="hljs-number">0x00000019</span>, <span class="hljs-number">0x000000AB</span>, <span class="hljs-number">0x000000F2</span>, <span class="hljs-number">0x00000056</span>, <span class="hljs-number">0x0000007C</span>, <span class="hljs-number">0x00000055</span>, <span class="hljs-number">0x0000008D</span>, <span class="hljs-number">0x00000039</span>, <span class="hljs-number">0x0000001B</span>, <span class="hljs-number">0x000000A4</span>, <span class="hljs-number">0x00000040</span>, <span class="hljs-number">0x000000AF</span>, <span class="hljs-number">0x00000002</span>]<br>invsbox = get_invs(sbox)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">round_key</span>(<span class="hljs-params">m:<span class="hljs-built_in">list</span>,rk:<span class="hljs-built_in">list</span></span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            m[<span class="hljs-number">4</span> * i + j] ^= rk[(<span class="hljs-number">3</span> - i) + <span class="hljs-number">4</span> * j]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inv_sub</span>(<span class="hljs-params">m:<span class="hljs-built_in">list</span></span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>        m[i]=invsbox[m[i]]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">byte_sub</span>(<span class="hljs-params">m:<span class="hljs-built_in">list</span></span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>        m[i]=sbox[m[i]]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shift_row</span>(<span class="hljs-params">s:<span class="hljs-built_in">list</span></span>):</span><br>    out=s[:<span class="hljs-number">4</span>]<br>    out.extend(s[<span class="hljs-number">5</span>:<span class="hljs-number">8</span>])<br>    out.append(s[<span class="hljs-number">4</span>])<br>    out.extend(s[<span class="hljs-number">10</span>:<span class="hljs-number">12</span>])<br>    out.extend(s[<span class="hljs-number">8</span>:<span class="hljs-number">10</span>])<br>    out.append(s[<span class="hljs-number">15</span>])<br>    out.extend(s[<span class="hljs-number">12</span>:<span class="hljs-number">15</span>])<br>    <span class="hljs-keyword">return</span> out<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inv_shift_row</span>(<span class="hljs-params">s:<span class="hljs-built_in">list</span></span>):</span><br>    out=s[:<span class="hljs-number">4</span>]<br>    out.append(s[<span class="hljs-number">7</span>])<br>    out.extend(s[<span class="hljs-number">4</span>:<span class="hljs-number">7</span>])<br>    out.extend(s[<span class="hljs-number">10</span>:<span class="hljs-number">12</span>])<br>    out.extend(s[<span class="hljs-number">8</span>:<span class="hljs-number">10</span>])<br>    out.extend(s[<span class="hljs-number">13</span>:<span class="hljs-number">16</span>])<br>    out.append(s[<span class="hljs-number">12</span>])<br>    <span class="hljs-keyword">return</span> out<br><br><br>xtime = <span class="hljs-keyword">lambda</span> a: (((a &lt;&lt; <span class="hljs-number">1</span>) ^ <span class="hljs-number">0x1B</span>) &amp; <span class="hljs-number">0xFF</span>) <span class="hljs-keyword">if</span> (a &amp; <span class="hljs-number">0x80</span>) <span class="hljs-keyword">else</span> (a &lt;&lt; <span class="hljs-number">1</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mix_single_column</span>(<span class="hljs-params">a</span>):</span><br>    t = a[<span class="hljs-number">0</span>] ^ a[<span class="hljs-number">1</span>] ^ a[<span class="hljs-number">2</span>] ^ a[<span class="hljs-number">3</span>]<br>    u = a[<span class="hljs-number">0</span>]<br>    a[<span class="hljs-number">0</span>] ^= t ^ xtime(a[<span class="hljs-number">0</span>] ^ a[<span class="hljs-number">1</span>])<br>    a[<span class="hljs-number">1</span>] ^= t ^ xtime(a[<span class="hljs-number">1</span>] ^ a[<span class="hljs-number">2</span>])<br>    a[<span class="hljs-number">2</span>] ^= t ^ xtime(a[<span class="hljs-number">2</span>] ^ a[<span class="hljs-number">3</span>])<br>    a[<span class="hljs-number">3</span>] ^= t ^ xtime(a[<span class="hljs-number">3</span>] ^ u)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mix_column</span>(<span class="hljs-params">c:<span class="hljs-built_in">list</span></span>):</span><br>    a = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        tmp = []<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            tmp.append(c[<span class="hljs-number">4</span> * j + i])<br>        a.append(tmp)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        mix_single_column(a[i])<br>    cc = [<span class="hljs-number">0</span>] * <span class="hljs-number">16</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            cc[<span class="hljs-number">4</span> * j + i] = a[i][j]<br>    <span class="hljs-keyword">return</span> cc<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GFMul</span>(<span class="hljs-params">a:<span class="hljs-built_in">int</span>,b:<span class="hljs-built_in">int</span></span>):</span><br>    sig=<span class="hljs-number">0</span><br>    ans=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> a:<br>        <span class="hljs-keyword">if</span>(a&amp;<span class="hljs-number">1</span>): ans^=b<br>        a&gt;&gt;=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> a:<br>            sig=(b&gt;&gt;<span class="hljs-number">7</span>)&amp;<span class="hljs-number">1</span><br>            b=(b&lt;&lt;<span class="hljs-number">1</span>)&amp;<span class="hljs-number">0xff</span><br>            <span class="hljs-keyword">if</span>(sig) :b^=<span class="hljs-number">0x1b</span><br>    <span class="hljs-keyword">return</span> ans<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inv_mix_col</span>(<span class="hljs-params">c:<span class="hljs-built_in">list</span></span>):</span><br>    tmp=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            tmp.append(c[<span class="hljs-number">4</span>*j+i])<br>    m=[<span class="hljs-number">0</span>]*<span class="hljs-number">16</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">16</span>,<span class="hljs-number">4</span>):<br>        m[i] = GFMul(<span class="hljs-number">0xe</span>, tmp[i]) ^ GFMul(<span class="hljs-number">0xb</span>, tmp[i + <span class="hljs-number">1</span>]) ^ GFMul(<span class="hljs-number">0xd</span>, tmp[i + <span class="hljs-number">2</span>]) ^ GFMul(<span class="hljs-number">0x9</span>, tmp[i + <span class="hljs-number">3</span>]);<br>        m[i + <span class="hljs-number">1</span>] = GFMul(<span class="hljs-number">0x9</span>, tmp[i]) ^ GFMul(<span class="hljs-number">0xe</span>, tmp[i + <span class="hljs-number">1</span>]) ^ GFMul(<span class="hljs-number">0xb</span>, tmp[i + <span class="hljs-number">2</span>]) ^ GFMul(<span class="hljs-number">0xd</span>, tmp[i + <span class="hljs-number">3</span>]);<br>        m[i + <span class="hljs-number">2</span>] = GFMul(<span class="hljs-number">0xd</span>, tmp[i]) ^ GFMul(<span class="hljs-number">0x9</span>, tmp[i + <span class="hljs-number">1</span>]) ^ GFMul(<span class="hljs-number">0xe</span>, tmp[i + <span class="hljs-number">2</span>]) ^ GFMul(<span class="hljs-number">0xb</span>, tmp[i + <span class="hljs-number">3</span>]);<br>        m[i + <span class="hljs-number">3</span>] = GFMul(<span class="hljs-number">0xb</span>, tmp[i]) ^ GFMul(<span class="hljs-number">0xd</span>, tmp[i + <span class="hljs-number">1</span>]) ^ GFMul(<span class="hljs-number">0x9</span>, tmp[i + <span class="hljs-number">2</span>]) ^ GFMul(<span class="hljs-number">0xe</span>, tmp[i + <span class="hljs-number">3</span>]);<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            tmp[<span class="hljs-number">4</span>*i+j]=m[i+<span class="hljs-number">4</span>*j]<br>    <span class="hljs-keyword">return</span> tmp<br><br><br><span class="hljs-comment"># kk=[0x0C, 0x38, 0x93, 0x17, 0x54, 0xF7, 0xA7, 0x11, 0x20, 0xC8, 0x89, 0xF7, 0x25, 0xFA, 0x1A, 0xD4]</span><br><span class="hljs-comment"># m=[0x61]*16</span><br><span class="hljs-comment"># c=[0x00000076, 0x00000070, 0x00000096, 0x000000B5, 0x000000F2, 0x000000C6, 0x000000E8, 0x0000007B, 0x00000059, 0x00000096, 0x000000A9, 0x0000009B, 0x0000006D, 0x00000035, 0x00000041, 0x00000044]</span><br><span class="hljs-comment"># round_key(m,kk)</span><br><span class="hljs-comment"># hexdump(m)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># print('--- byte_sub ---')</span><br><span class="hljs-comment"># c=m</span><br><span class="hljs-comment"># byte_sub(c)</span><br><span class="hljs-comment"># hexdump(c)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># x=[0x0000007F, 0x0000003C, 0x00000005, 0x00000022, 0x0000003E, 0x0000007C, 0x00000002, 0x000000F4, 0x0000001C, 0x000000A6, 0x0000009D, 0x000000F9, 0x00000019, 0x00000004, 0x00000076, 0x00000060]</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># print('--- shift_row ---')</span><br><span class="hljs-comment"># c=shift_row(c)</span><br><span class="hljs-comment"># hexdump(c)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># print('--- mix_column ---')</span><br><span class="hljs-comment"># cc=mix_column(c)</span><br><span class="hljs-comment"># print(cc)</span><br><span class="hljs-comment"># hexdump(cc)</span><br><span class="hljs-comment"># inv_mix_col(cc)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># rkk=[0x44, 0x07, 0xBE, 0xB4, 0x10, 0xF0, 0x19, 0xA5, 0x30, 0x38, 0x90, 0x52, 0x15, 0xC2, 0x8A, 0x86]</span><br><span class="hljs-comment"># print('--- round_key ---')</span><br><span class="hljs-comment"># round_key(cc,rkk)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># ee=[0x000000CB, 0x00000099, 0x00000057, 0x000000A4, 0x00000080, 0x00000065, 0x00000092, 0x0000007E, 0x0000001B, 0x00000056, 0x000000A5, 0x0000003B, 0x0000005D, 0x00000014, 0x00000046, 0x00000075]</span><br><span class="hljs-comment"># hexdump(cc)</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encry</span>(<span class="hljs-params">t:<span class="hljs-built_in">list</span>,exkey:<span class="hljs-built_in">list</span></span>):</span><br>    m=t[:]<br>    round_key(m,exkey[:<span class="hljs-number">16</span>])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>        byte_sub(m)<br>        m=shift_row(m)<br>        m=mix_column(m)<br>        round_key(m,exkey[<span class="hljs-number">16</span>*i:<span class="hljs-number">16</span>*i+<span class="hljs-number">16</span>])<br>    byte_sub(m)<br>    m=shift_row(m)<br>    round_key(m,exkey[<span class="hljs-number">160</span>:<span class="hljs-number">176</span>])<br>    <span class="hljs-keyword">return</span> m[:]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decry</span>(<span class="hljs-params">t:<span class="hljs-built_in">list</span>,exkey:<span class="hljs-built_in">list</span></span>):</span><br>    c=t[:]<br>    round_key(c,exkey[<span class="hljs-number">160</span>:<span class="hljs-number">176</span>])<br>    c=inv_shift_row(c)<br>    inv_sub(c)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>        round_key(c, exkey[<span class="hljs-number">16</span> * i:<span class="hljs-number">16</span> * i + <span class="hljs-number">16</span>])<br>        c=inv_mix_col(c)<br>        c=inv_shift_row(c)<br>        inv_sub(c)<br>    round_key(c,exkey[:<span class="hljs-number">16</span>])<br>    hexdump(c)<br>    <span class="hljs-keyword">return</span> c<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'--- encry ---'</span>)<br>rk=[<span class="hljs-number">0x0C</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x5E</span>]<br>rdk=[<span class="hljs-number">0x0C</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x0F</span>]<br>enc=[<span class="hljs-number">0x0000004E</span>, <span class="hljs-number">0x00000054</span>, <span class="hljs-number">0x000000D6</span>, <span class="hljs-number">0x00000026</span>, <span class="hljs-number">0x000000C7</span>, <span class="hljs-number">0x00000097</span>, <span class="hljs-number">0x00000097</span>, <span class="hljs-number">0x0000008B</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x000000E5</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x0000009E</span>, <span class="hljs-number">0x000000BE</span>, <span class="hljs-number">0x00000057</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x0000004E</span>, <span class="hljs-number">0x00000028</span>, <span class="hljs-number">0x0000002A</span>, <span class="hljs-number">0x0000008A</span>, <span class="hljs-number">0x0000007F</span>, <span class="hljs-number">0x00000088</span>, <span class="hljs-number">0x000000C9</span>, <span class="hljs-number">0x000000F7</span>, <span class="hljs-number">0x000000EB</span>, <span class="hljs-number">0x000000E2</span>, <span class="hljs-number">0x000000BA</span>, <span class="hljs-number">0x000000F4</span>, <span class="hljs-number">0x0000005E</span>, <span class="hljs-number">0x000000E1</span>, <span class="hljs-number">0x00000040</span>, <span class="hljs-number">0x000000C0</span>, <span class="hljs-number">0x0000005A</span>]<br>rdk2=[<span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x0D</span>]<br>p1=enc[:<span class="hljs-number">16</span>]<br>p2=enc[<span class="hljs-number">16</span>:]<br>m1=decry(p1,rdk)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(m1))<br>s=<span class="hljs-string">'jRphhACRh8TquLAKaaaaaaaaaaaaaaaa'</span><br>m2=decry(p2,rdk2)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(m2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'flag{jRphhACRh8TquLAKHJuppYiK0gaC4MME}'</span>)<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF-WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
      <tag>Wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-10月DASCTF X GFCTF</title>
    <link href="/2022/10/26/2022-10%E6%9C%88DASCTF%20X%20GFCTF/"/>
    <url>/2022/10/26/2022-10%E6%9C%88DASCTF%20X%20GFCTF/</url>
    
    <content type="html"><![CDATA[<h1>2022-10月DASCTF X GFCTF</h1><blockquote><p>考点: 字节码、ollvm混淆、duilib程序逆向、sys驱动、异常处理</p></blockquote><p>算法浓度不是很高，🐹🐹比较喜欢，babysys个人感觉题目不错，本文也主要介绍了该题的做题思路。</p><h3 id="PYCODE">PYCODE</h3><p>version3.9，dis拿字节码，直接翻译即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>cc=<span class="hljs-string">'8b2e4e858126bc8478d6a6a485215f03'</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extract_number</span>(<span class="hljs-params">x</span>):</span><br>    x = x ^ (x &gt;&gt; <span class="hljs-number">11</span>)<br>    x=x&amp;<span class="hljs-number">0xffffffff</span><br>    x = x ^ ((x &lt;&lt; <span class="hljs-number">7</span>) &amp; <span class="hljs-number">2022072721</span>)<br>    x = x &amp; <span class="hljs-number">0xffffffff</span><br>    x = x ^ ((x &lt;&lt; <span class="hljs-number">15</span>) &amp; <span class="hljs-number">2323163360</span>)<br>    x = x &amp; <span class="hljs-number">0xffffffff</span><br>    x = x ^ (x &gt;&gt; <span class="hljs-number">18</span>)<br>    x = x &amp; <span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> x<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transform</span>(<span class="hljs-params">m</span>):</span><br>    new_message = <span class="hljs-string">''</span><br>    l = <span class="hljs-built_in">len</span>(m)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l//<span class="hljs-number">4</span>):<br>        enc = m[<span class="hljs-number">4</span> * i:<span class="hljs-number">4</span> * i + <span class="hljs-number">4</span>]<br>        enc = bytes_to_long(enc)<br>        enc = extract_number(enc)<br>        new_message += long_to_bytes(enc, <span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">return</span>  new_message<br>cc=<span class="hljs-built_in">bytes</span>.fromhex(cc)<br>c=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cc)//<span class="hljs-number">4</span>):<br>    c.append(bytes_to_long(cc[<span class="hljs-number">4</span>*i:<span class="hljs-number">4</span>*i+<span class="hljs-number">4</span>]))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">re</span>(<span class="hljs-params">x</span>):</span><br>    x=x^(x&gt;&gt;<span class="hljs-number">18</span>)<br>    t=(x^((x&lt;&lt;<span class="hljs-number">15</span>)&amp;<span class="hljs-number">2323163360</span>))&amp;<span class="hljs-number">0xffffffff</span><br>    x=x^((t&lt;&lt;<span class="hljs-number">15</span>)&amp;<span class="hljs-number">2323163360</span>)<br>    x = x &amp; <span class="hljs-number">0xffffffff</span><br>    t1=(x ^ ((x &lt;&lt; <span class="hljs-number">7</span>) &amp; <span class="hljs-number">2022072721</span>))&amp;<span class="hljs-number">0xffffffff</span> <span class="hljs-comment">#14</span><br>    t2=(x ^ ((t1 &lt;&lt; <span class="hljs-number">7</span>) &amp; <span class="hljs-number">2022072721</span>))&amp;<span class="hljs-number">0xffffffff</span><span class="hljs-comment">#21</span><br>    t3=(x ^ ((t2 &lt;&lt; <span class="hljs-number">7</span>) &amp; <span class="hljs-number">2022072721</span>))&amp;<span class="hljs-number">0xffffffff</span> <span class="hljs-comment">#28</span><br>    x=x ^ ((t3 &lt;&lt; <span class="hljs-number">7</span>) &amp; <span class="hljs-number">2022072721</span>)<br>    x = x &amp; <span class="hljs-number">0xffffffff</span><br>    t = x ^ (x &gt;&gt; <span class="hljs-number">11</span>) <span class="hljs-comment">#22</span><br>    x=x ^ (t &gt;&gt; <span class="hljs-number">11</span>)<br>    <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>    <span class="hljs-built_in">print</span>(long_to_bytes(re(c[i])).<span class="hljs-built_in">hex</span>(),end=<span class="hljs-string">''</span>)<br><span class="hljs-comment">#DASCTF{89196e63ab5556e7389d2bb44f8e6e06}</span><br></code></pre></td></tr></tbody></table></figure><h3 id="贪玩CTF">贪玩CTF</h3><p>主要逻辑在<code>sub_7FF6A72619C0</code>,TLS函数又反调试，nop掉即可，可以通过设置条件断点便于调试。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221023180526090.png" alt="image-20221023180526090"></p><p>对账号加密单纯异或最后一位，对密码加密则是AES，首先会动态恢复sbox。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221023180723914.png" alt="image-20221023180723914"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">s=[ <span class="hljs-number">0x04</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x73</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    s[i]^=s[<span class="hljs-number">15</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(s))<br>k=<span class="hljs-built_in">bytes</span>(s)<br><span class="hljs-comment">#wllm08067sec&amp;das</span><br><span class="hljs-keyword">from</span> Crypto.Cipher.AES <span class="hljs-keyword">import</span> *<br>aes=new(k,MODE_ECB)<br>c=<span class="hljs-built_in">bytes</span>([<span class="hljs-number">0x3C</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x56</span>])<br><span class="hljs-built_in">print</span>(aes.decrypt(c))<br><span class="hljs-comment">#DASCTF{wllm08067sec&amp;dase4deb7a6510a10f7}</span><br></code></pre></td></tr></tbody></table></figure><h3 id="cutere">cutere</h3><p>通过一场处理修改了rc4的秘钥和base64表，加密主体部分采用ollvm混淆过了，不过加密逻辑没变，调试出关键值直接解密即可。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221023181006551.png" alt="image-20221023181006551"></p><p>直接cyberchef一把梭</p><p>rc4</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221023181117914.png" alt="image-20221023181117914"></p><p>换表base64</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221023181223173.png" alt="image-20221023181223173"></p><p>最后交替拼接即可</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">'a'</span>*<span class="hljs-number">32</span>)<br>rc4=<span class="hljs-string">'szv~'</span><br>buf0=<span class="hljs-string">'DST{Wo7Xj5Ad8Nx8'</span><br>buf1=<span class="hljs-string">'ACFg0Gw1Jo5Ix9C}'</span><br>nbase=<span class="hljs-string">'ghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef'</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(buf1)):<br>    <span class="hljs-built_in">print</span>(buf0[i]+buf1[i],end=<span class="hljs-string">''</span>)<br></code></pre></td></tr></tbody></table></figure><h2 id="babysys">babysys</h2><blockquote><p>无双击调试经验，只能硬动态分析。本题内核成分不多，主要是异常处理，感谢Retard爷的点播，🐹🐹我啊~ ，才理清程序逻辑。</p></blockquote><h3 id="异常补充">异常补充</h3><blockquote><p>关于x64SEH相关补充，修复控制流的相关结构体</p></blockquote><h4 id="异常注册">异常注册</h4><p>每个非叶函数只要对应一个<code>RUNTIME_FUNCTION</code>结构体，如果叶函数使用了SEH，也会有对应的结构体。</p><blockquote><p>不调用函数、又没有修改栈指针，也没有使用 SEH 的函数就叫做“叶函数”，树的叶子节点。</p></blockquote><p>x64 windows中异常注册信息发生了巨大的改变，异常注册信息在编译过程中生成，链接时写入 PE+ 头中的 <code>ExceptionDirectory</code> ，其中几乎包含所有函数的栈操作、异常处理等信息。</p><p>程序出现异常-&gt;查找函数的<code>runtime_function</code>结构体-&gt;找到<code>unwind_info</code>,判断flags，如果没有异常处理程序，那么根据异常的位置参照<code>unwind_code</code>进行回滚，返回到上层函数，继续查<code>runtime_function</code>结构体，查看有无处理函数，如果有则进行异常处理，如果无则继续回滚重复查<code>runtime_function</code>。</p><blockquote><p>至于findally块的执行，满足全局展开，会先找一个异常过滤程序执行，如果返回1</p></blockquote><p><code>ExceptionDir</code></p><p>其中包含多条字段<code>RUNTIME_FUNCTION</code>,一共12字节。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_RUNTIME_FUNCTION_ENTRY</span> {</span><br>  DWORD BeginAddress;<span class="hljs-comment">//函数首地址</span><br>  DWORD EndAddress;<span class="hljs-comment">//函数结束地址</span><br>  <span class="hljs-class"><span class="hljs-keyword">union</span> {</span><span class="hljs-comment">//函数unwind相关信息</span><br>    DWORD UnwindInfoAddress;<br>    DWORD UnwindData;<br>  } DUMMYUNIONNAME;<br>} RUNTIME_FUNCTION, *PRUNTIME_FUNCTION, _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;<br></code></pre></td></tr></tbody></table></figure><p>unwind结构体记录有关异常处理和函数操作的信息，用于回滚。</p><blockquote><p>易失寄存器rcx、rdx、r8、r9、r10、r11</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">UNWIND_INFO_HDR</span></span><br><span class="hljs-class">{</span><br>  <span class="hljs-keyword">char</span> Ver3_Flags;<span class="hljs-comment">//低3位是version 高5位是flags</span><br>  <span class="hljs-keyword">char</span> PrologSize;<span class="hljs-comment">//函数头大小，函数头一般是对栈进行密集操作的一部分</span><br>  <span class="hljs-keyword">char</span> CntUnwindCodes;<span class="hljs-comment">//UWIND_CODE的数量</span><br>  <span class="hljs-keyword">char</span> FrReg_FrRegOff;<span class="hljs-comment">// FrReg用作fp的寄存器编号  fp中存放 rsp+16*FrRegOff</span><br>};<br><span class="hljs-comment">/*flags值 - 关键</span><br><span class="hljs-comment">UNW_FLAG_NHANDLER 0x0 不对异常进行处理</span><br><span class="hljs-comment">UNW_FLAG_EHANDLER 0x01 使用Except函数进行处理。</span><br><span class="hljs-comment">UNW_FLAG_UHANDLER 0x02 使用finally函数处理。</span><br><span class="hljs-comment">UNW_FLAG_CHAININFO 0x04 使用调用链，某些函数被其他函数调用，在异常会滚时也需要做调用他函数的回滚工作，可以直接用其上层函数的runtime_func即可。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><p>当unwind_info—中的flag字段为后三种情况时，后续不定长数组<code>unwind_code</code>的结构如下。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221024202124917.png" alt="image-20221024202124917"></p><p>UWIND_CODE用于记录函数头中有关非易失性寄存器和RSP的操作。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">UNWIND_CODE</span></span><br><span class="hljs-class">{</span><br>  <span class="hljs-keyword">char</span> PrologOff;     <span class="hljs-comment">// 执行此操作的指令末尾的偏移量</span><br>  <span class="hljs-keyword">char</span> OpCode_OpInfo;<br>  <span class="hljs-comment">//Unwind operation code  low  4bit</span><br>  <span class="hljs-comment">//Operation info   high 4bit</span><br>};<br></code></pre></td></tr></tbody></table></figure><p><code>PrologOff</code>距离头部偏移的偏移量，例如值为x，那么在main函数x字节之外发生异常，则需要此次回滚，否则不进行回滚，<code>info</code>则是根据op的类型所需的相关参数。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221024185740395.png" alt="image-20221024185740395"></p><p>例如<code>47a0</code>函数的一条<code>unwind_code</code>如下，第一个值是4，结合函数处的汇编为<code>sub rsp,0x38</code>表示的该4字节的栈操作，而0x62，低4位为2即<code>UWOP_ALLOC_SMALL</code>,对于<code>info</code>的值为6，查看官方文档。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221024190207532.png" alt="image-20221024190207532"></p><p>在栈上开辟了一个8*<code>info</code>+8大小的空间，即6*8+8 = 0x38, 也就该条<code>unwind_code</code>记录着该函数前4字节做的操作在栈上开辟了0x38的空间，如果在之后出现异常，则回滚时则需要进行相应的栈处理。</p><blockquote><p>unwind_code的处理顺序和函数中对栈操作的指令相反。</p></blockquote><p>对于flags为1或2时，即函数存在异常处理/终止处理的程序。</p><p><code>unwind_info </code>中会塞入<code>__C_specific_handler</code>函数，他根据<code>SCOPE_TABLE</code>进行异常处理或终止处理，该函数后跟<code>SCOPE_TABLE</code>的数量，之后便是，相关的scope结构体数组。</p><p><code>C_SCOPE_TABLE</code>结构体记录了异常处理的结构,大小16字节，4个<code>RVA</code>。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">C_SCOPE_TABLE</span></span><br><span class="hljs-class">{</span><br>  <span class="hljs-keyword">void</span> *__ptr32 Begin;     <span class="hljs-comment">//try块开始的首地址</span><br>  <span class="hljs-keyword">void</span> *__ptr32 End;   <span class="hljs-comment">// try块结束的地址</span><br>  <span class="hljs-keyword">void</span> *__ptr32 Handler;<br>  <span class="hljs-keyword">void</span> *__ptr32 Target;<br>};<br><span class="hljs-comment">/*对于handler和target</span><br><span class="hljs-comment">如果UNWIND_INFO_HDR中Flags为UNW_FLAG_EHANDLER(1),则以此为filter程序和except程序。</span><br><span class="hljs-comment">如果Flags为UNW_FLAG_UHANDLER(2),则为finally程序和0。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><p>综上，<code>RUNTIME_FUNCTION</code>最后会指向一系列的<code>unwind_code</code>用于回滚。</p><p>结构体汇总</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">RUNTIME_FUNCTION</span> {</span><br>        ULONG BeginAddress;<br>        ULONG EndAddress;<br>        ULONG UnwindData;<br>    } RUNTIME_FUNCTION, *PRUNTIME_FUNCTION;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> _<span class="hljs-title">UNWIND_OP_CODES</span> {</span><br>        UWOP_PUSH_NONVOL = <span class="hljs-number">0</span>,<br>        UWOP_ALLOC_LARGE,       <span class="hljs-comment">// 1</span><br>        UWOP_ALLOC_SMALL,       <span class="hljs-comment">// 2</span><br>        UWOP_SET_FPREG,         <span class="hljs-comment">// 3</span><br>        UWOP_SAVE_NONVOL,       <span class="hljs-comment">// 4</span><br>        UWOP_SAVE_NONVOL_FAR,   <span class="hljs-comment">// 5</span><br>        UWOP_SPARE_CODE1,       <span class="hljs-comment">// 6</span><br>        UWOP_SPARE_CODE2,       <span class="hljs-comment">// 7</span><br>        UWOP_SAVE_XMM128,       <span class="hljs-comment">// 8</span><br>        UWOP_SAVE_XMM128_FAR,   <span class="hljs-comment">// 9</span><br>        UWOP_PUSH_MACHFRAME     <span class="hljs-comment">// 10</span><br>    } UNWIND_OP_CODES, *PUNWIND_OP_CODES;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> _<span class="hljs-title">UNWIND_CODE</span> {</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span><br>            UCHAR CodeOffset;<br>            UCHAR UnwindOp : <span class="hljs-number">4</span>;<br>            UCHAR OpInfo : <span class="hljs-number">4</span>;<br>        };<br>    <br>        USHORT FrameOffset;<br>    } UNWIND_CODE, *PUNWIND_CODE;<br>    <br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UNW_FLAG_NHANDLER 0x0   <span class="hljs-comment">//no </span></span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UNW_FLAG_EHANDLER 0x1<span class="hljs-comment">//exception</span></span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UNW_FLAG_UHANDLER 0x2<span class="hljs-comment">//unwind(finally)</span></span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UNW_FLAG_CHAININFO 0x4  <span class="hljs-comment">//chain</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">UNWIND_INFO</span> {</span><br>        UCHAR Version : <span class="hljs-number">3</span>;     <span class="hljs-comment">//前部分一共4字节，IDA中定义为UNWIND_INFO_HDR</span><br>        UCHAR Flags : <span class="hljs-number">5</span>;   <br>        UCHAR SizeOfProlog;    <span class="hljs-comment">//函数头部大小</span><br>        UCHAR CountOfCodes;    <span class="hljs-comment">//不定长结构体大小，不过更准确应该是包含的dw数据的个数  </span><br>        UCHAR FrameRegister : <span class="hljs-number">4</span>;<br>        UCHAR FrameOffset : <span class="hljs-number">4</span>;<br>        UNWIND_CODE UnwindCode[<span class="hljs-number">1</span>]; <span class="hljs-comment">//不定长数组</span><br>    <br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// The unwind codes are followed by an optional DWORD aligned field that</span><br>    <span class="hljs-comment">// contains the exception handler address or a function table entry if</span><br>    <span class="hljs-comment">// chained unwind information is specified. If an exception handler address</span><br>    <span class="hljs-comment">// is specified, then it is followed by the language specified exception</span><br>    <span class="hljs-comment">// handler data.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">//  union {</span><br>    <span class="hljs-comment">//      struct {</span><br>    <span class="hljs-comment">//          ULONG ExceptionHandler;</span><br>    <span class="hljs-comment">//          ULONG ExceptionData[];</span><br>    <span class="hljs-comment">//      };</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">//      RUNTIME_FUNCTION FunctionEntry;</span><br>    <span class="hljs-comment">//  };</span><br>    <span class="hljs-comment">//</span><br>    <br>    } UNWIND_INFO, *PUNWIND_INFO;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">SCOPE_TABLE</span> {</span><br>        ULONG Count;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">        {</span><br>            ULONG BeginAddress;<br>            ULONG EndAddress;<br>            ULONG HandlerAddress;<br>            ULONG JumpTarget;<br>        } ScopeRecord[<span class="hljs-number">1</span>];<br>    } SCOPE_TABLE, *PSCOPE_TABLE;<br></code></pre></td></tr></tbody></table></figure><p>详见官方: <a href="https://learn.microsoft.com/en-us/cpp/build/exception-handling-x64?view=msvc-170">https://learn.microsoft.com/en-us/cpp/build/exception-handling-x64?view=msvc-170</a></p><h4 id="异常信息">异常信息</h4><p><code>__finally</code>代码块为终止程序，<code>__except(filter())</code>为异常处理程序,<code>filter</code>为异常过滤程序，返回值有三种情况。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">EXCEPTION_CONTINUE_EXECUTION(<span class="hljs-number">-1</span>)  <span class="hljs-comment">//在发生异常的地方继续执行</span><br>EXCEPTION_EXECUTE_HANDLER(<span class="hljs-number">1</span>)    <span class="hljs-comment">//执行异常处理程序</span><br>EXCEPTION_CONTINUE_SEARCH(<span class="hljs-number">0</span>)    <span class="hljs-comment">//继续向上寻找异常过滤程序，直到能处理    </span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221024221213623.png" alt="image-20221024221213623"></p><blockquote><p>糊~</p></blockquote><p>异常处理中与异常信息相关结构体，可由GetExceptionInformation函数获取，返回<code>EXCEPTION_POINTERS</code>类型的指针。</p><p><code>EXCEPTION_POINTERS</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EXCEPTION_POINTERS</span> {</span><br>  PEXCEPTION_RECORD ExceptionRecord; <span class="hljs-comment">//与CPU无关的信息</span><br>  PCONTEXT          ContextRecord; <span class="hljs-comment">//CPU相关的异常信息，寄存器等。</span><br>} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;<br></code></pre></td></tr></tbody></table></figure><p><code>PEXCEPTION_RECORD</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EXCEPTION_RECORD</span> {</span><br>  DWORD                    ExceptionCode;<br>  DWORD                    ExceptionFlags;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EXCEPTION_RECORD</span> *<span class="hljs-title">ExceptionRecord</span>;</span><br>  PVOID                    ExceptionAddress;<br>  DWORD                    NumberParameters;<br>  ULONG_PTR                ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];<br>} EXCEPTION_RECORD;<br></code></pre></td></tr></tbody></table></figure><h3 id="题解">题解</h3><p>用户程序访问驱动，通过<code>CreateFile</code>访问设备。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221024222100867.png" alt="image-20221024222100867"></p><p>同时使用<code>DeviceIoControl</code>函数向驱动发送信息，控制设备执行相关操作，操作控制代码为0x222000。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">BOOL <span class="hljs-title">DeviceIoControl</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  (HANDLE) hDevice,                 <span class="hljs-comment">// handle to device</span></span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-literal">NULL</span>,                             <span class="hljs-comment">// lpInBuffer</span></span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-number">0</span>,                                <span class="hljs-comment">// nInBufferSize</span></span></span><br><span class="hljs-params"><span class="hljs-function">  (LPVOID) lpOutBuffer,             <span class="hljs-comment">// output buffer</span></span></span><br><span class="hljs-params"><span class="hljs-function">  (DWORD) nOutBufferSize,           <span class="hljs-comment">// size of output buffer</span></span></span><br><span class="hljs-params"><span class="hljs-function">  (LPDWORD) lpBytesReturned,        <span class="hljs-comment">// number of bytes returned</span></span></span><br><span class="hljs-params"><span class="hljs-function">  (LPOVERLAPPED) lpOverlapped       <span class="hljs-comment">// OVERLAPPED structure</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></tbody></table></figure><p>驱动程序通过<code>IoCreateDevice</code>创建设备名称，并使用<code>IoCreateSymbolicLink</code>创建符号链接。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221024222622619.png" alt="image-20221024222622619"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">DRIVER_OBJECT</span> {</span><br>  CSHORT             Type;<br>  CSHORT             Size;<br>  PDEVICE_OBJECT     DeviceObject;<br>  ULONG              Flags;<br>  PVOID              DriverStart;<br>  ULONG              DriverSize;<br>  PVOID              DriverSection;<br>  PDRIVER_EXTENSION  DriverExtension;<br>  UNICODE_STRING     DriverName;<br>  PUNICODE_STRING    HardwareDatabase;<br>  PFAST_IO_DISPATCH  FastIoDispatch;<br>  PDRIVER_INITIALIZE DriverInit;<br>  PDRIVER_STARTIO    DriverStartIo;<br>  PDRIVER_UNLOAD     DriverUnload;<br>  PDRIVER_DISPATCH   MajorFunction[IRP_MJ_MAXIMUM_FUNCTION + <span class="hljs-number">1</span>];<br>} DRIVER_OBJECT, *PDRIVER_OBJECT;<br></code></pre></td></tr></tbody></table></figure><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221023233226231.png" alt="image-20221023233226231"></p><p>并且驱动程序注册了一个<code>DriverObject-&gt;MajorFunction[14]</code>的函数，0xe对应着<code>IRP_MJ_DEVICE_CONTROL</code>,即应用程序调用<code> DeviceIoControl</code>，会指向注册的<code>sub_14000175C</code>函数。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221024230024387.png" alt="image-20221024230024387"></p><p>该函数会匹配操作控制码，并且获取应用程序传入的输入计算其长度，并使用<code>sub_1400018d8</code>函数进行处理。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221024230632623.png" alt="image-20221024230632623"></p><p>后续函数多使用异或来做SMC，并且在调用后恢复。</p><p><code>get_func_len</code>函数是通过访问<code>runtime_function</code>结构体获取函数开始和结束位置做差获取。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221024231130224.png" alt="image-20221024231130224"></p><p>如果对PE文件熟悉的话，<code>0x3c</code>是dos头最后四字节，指向NT头，而0xA0则对应<code>ExceptionDir</code>的首地址，相关结构体上文已给出。</p><p>使用ipy解密代码，但是发现后文并没有直接调用，而是在调用<code>hook_2_func_encrypt</code>后就将解密后的代码还原了。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idautils<br>adr=<span class="hljs-number">0x140001288</span><br>end=<span class="hljs-number">0x1400014C1</span><br>size=end-adr<br>code=<span class="hljs-built_in">bytearray</span>(get_bytes(adr,size))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(code)):<br>    code[i]^=<span class="hljs-number">0xab</span><br>    patch_byte(adr+i,code[i])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'win'</span>)<br></code></pre></td></tr></tbody></table></figure><p>查看<code>hook_2_func_encrypt</code>地址的函数，其通过触发int3异常来执行异常过滤程序，这样便能调用刚刚解密的<code> sub_140001288</code>函数。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221024231929089.png" alt="image-20221024231929089"></p><p><code>sub_140001288</code></p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221024232450647.png" alt="image-20221024232450647"></p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221025083058978.png" alt="image-20221025083058978"></p><p>通过v3(cnt)从0开始计数，并比对v3的值完成不同操作。如果v3的值小于7，则执行另外两组操作。并且在最后通过<code>EXCEPTION_POINTERS</code>获取异常ip，如果异常处指令为0xcc并且v3不等于1就将ip加1后返回，返回值为-1即继续在异常处执行。</p><p>如果v3为1或3时，会先对输入进行+i的处理，之后调用<code>sub_140001AB4</code>函数。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221025085825841.png" alt="image-20221025085825841"></p><p><code>sub_140001AB4</code>函数加密逻辑如下</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221025090206334.png" alt="image-20221025090206334"></p><p>通过计算两个固定函数的md5相异或，将得到的32个字符分为16个字节一组，第一组用做tea加密，第二组用作tea解密，类似3DES处理。</p><p>当v3等于2/4时，会首先调用<code> sub_140001C60</code>,并且异或0x10。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221025090522937.png" alt="image-20221025090522937"></p><p>一共有6个int3，并且第一次不改ip故cnt一共加了7次，第7次进入if块处理。</p><p>首先会调用<code>sub_140001868</code>函数，修改触发异常函数的<code>runtime_function</code>结构体，修改其异常处理程序为<code>0x140001009</code>处的<code>func_encrypt</code>函数。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221025094325672.png" alt="image-20221025094325672"></p><p>之后会将<code>sub_1400014C4</code>函数异或0x66，并且返回-1，下次触发异常对应的cnt为8则返回1，那么异常由except块的异常处理程序进行处理，即调用刚刚修改的<code>0x140001009 </code>地址处的函数。</p><blockquote><p>对<code>sub_1400014C4</code>函数还会异或0xcc，调用结束后会异或0xaa，因为0x66^0xcc == 0xaa,这里套了一层。</p></blockquote><p>函数的smc不在赘述，处理流程为将密文再异或0x99并使用<code>sub_140001C60</code>进行tea加密，结果与v11比对。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221026172745157.png" alt="image-20221026172745157"></p><p><code>sub_140001c60</code>函数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> __fastcall <span class="hljs-title">sub_140001C60</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *a1)</span></span><br><span class="hljs-function"></span>{<br>  __int64 v2; <span class="hljs-comment">// r10</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v0; <span class="hljs-comment">// r8d</span><br>  <span class="hljs-keyword">int</span> sum; <span class="hljs-comment">// r11d</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// r9d</span><br>  __int64 round; <span class="hljs-comment">// rbx</span><br><br>  v2 = <span class="hljs-number">5</span>i64;<br>  <span class="hljs-keyword">do</span><br>  {<br>    v0 = *a1;<br>    sum = <span class="hljs-number">0</span>;<br>    v1 = a1[<span class="hljs-number">1</span>];<br>    round = <span class="hljs-number">32</span>i64;<br>    <span class="hljs-keyword">do</span><br>    {<br>      sum -= <span class="hljs-number">0x61C88647</span>;<br>      v0 += (<span class="hljs-number">16</span> * v1 + <span class="hljs-number">17</span>) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">34</span>) ^ (sum + v1);<br>      v1 += (<span class="hljs-number">16</span> * v0 + <span class="hljs-number">51</span>) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">68</span>) ^ (sum + v0);<br>      --round;<br>    }<br>    <span class="hljs-keyword">while</span> ( round );<br>    *a1 = v0;<br>    a1[<span class="hljs-number">1</span>] = v1;<br>    a1 += <span class="hljs-number">2</span>;<br>    --v2;<br>  }<br>  <span class="hljs-keyword">while</span> ( v2 );<br>}<br></code></pre></td></tr></tbody></table></figure><p>整体加密流程简化后如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//循环两轮</span><br>ms[i]+=i<br>sub_140001AB4(v2); <span class="hljs-comment">//两个tea 加密 解密</span><br>sub_140001C60(v2); <span class="hljs-comment">//tea</span><br>ms[i]^=<span class="hljs-number">0x10</span><br>    <br><span class="hljs-comment">//sub_140001638异常处理函数</span><br>ms[i]^=<span class="hljs-number">0x99</span><br>sub_140001C60(v2) <span class="hljs-comment">//tea</span><br></code></pre></td></tr></tbody></table></figure><p>算法无魔改，只要取到key值即可，解密脚本如下。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ut32 unsigned int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> delta 0x9e3779b9</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> __fastcall <span class="hljs-title">sub_140001C60</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* a1)</span></span><br><span class="hljs-function"></span>{<br>__int64 v2; <span class="hljs-comment">// r10</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v0; <span class="hljs-comment">// r8d</span><br><span class="hljs-keyword">int</span> sum; <span class="hljs-comment">// r11d</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// r9d</span><br>__int64 round; <span class="hljs-comment">// rbx</span><br><br>v2 = <span class="hljs-number">1</span>i64;<br><span class="hljs-keyword">do</span><br>{<br>v0 = *a1;<br>sum = <span class="hljs-number">0</span>;<br>v1 = a1[<span class="hljs-number">1</span>];<br>round = <span class="hljs-number">32</span>i64;<br><span class="hljs-keyword">do</span><br>{<br>sum -= <span class="hljs-number">0x61C88647</span>;<br>v0 += (<span class="hljs-number">16</span> * v1 + <span class="hljs-number">17</span>) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">34</span>) ^ (sum + v1);<br>v1 += (<span class="hljs-number">16</span> * v0 + <span class="hljs-number">51</span>) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">68</span>) ^ (sum + v0);<br>--round;<br>}     <span class="hljs-keyword">while</span> (round);<br>*a1 = v0;<br>a1[<span class="hljs-number">1</span>] = v1;<br>a1 += <span class="hljs-number">2</span>;<br>--v2;<br>}   <span class="hljs-keyword">while</span> (v2);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"sum: %08x\n"</span>, sum);<br>}<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Tea_Encrypt</span><span class="hljs-params">(ut32* src, ut32* k)</span> </span>{<br>ut32 sum = <span class="hljs-number">0</span>;<br>ut32 v0 = src[<span class="hljs-number">0</span>];<br>ut32 v1 = src[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x20</span>; i++) {<br>sum += delta;<br>v0 += ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">1</span>]);<br>v1 += ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">3</span>]);<br>}<br>src[<span class="hljs-number">0</span>] = v0;<br>src[<span class="hljs-number">1</span>] = v1;<br>}<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Tea_Decrypt</span><span class="hljs-params">(ut32* enc, ut32* k)</span> </span>{<br><span class="hljs-keyword">int</span> sum = delta * <span class="hljs-number">0x20</span>;<br>ut32 v0 = enc[<span class="hljs-number">0</span>];<br>ut32 v1 = enc[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x20</span>; i++) {<br>v1 -= ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">3</span>]);<br>v0 -= ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">1</span>]);<br>sum -= delta;<br>}<br>enc[<span class="hljs-number">0</span>] = v0;<br>enc[<span class="hljs-number">1</span>] = v1;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(ut32* m, ut32 n)</span> </span>{<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"0x%08x "</span>, m[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>ut32 m[<span class="hljs-number">10</span>] = { <span class="hljs-number">0xbb929b51</span>,<span class="hljs-number">0x25fed57f</span>,<span class="hljs-number">0x988aa03d</span>,<span class="hljs-number">0xbdc35d79</span>,<span class="hljs-number">0xe60aca2f</span>,<span class="hljs-number">0xf2755515</span>,<span class="hljs-number">0x67aa0fc2</span>,<span class="hljs-number">0xeb1992a8</span>,<span class="hljs-number">0x62759e50</span>,<span class="hljs-number">0x461e460c</span> };<br>ut32 k1[<span class="hljs-number">4</span>] = { <span class="hljs-number">0x656565e</span>,<span class="hljs-number">0x57575207</span>,<span class="hljs-number">0x5201040a</span>,<span class="hljs-number">0xf045605</span> };<br><br>ut32 k2[<span class="hljs-number">4</span>] = { <span class="hljs-number">0x7595701</span>,<span class="hljs-number">0x5601560c</span>,<span class="hljs-number">0x5651565a</span>,<span class="hljs-number">0x5525056</span> };<br><br>ut32 k[<span class="hljs-number">4</span>] = { <span class="hljs-number">17</span>,<span class="hljs-number">34</span>,<span class="hljs-number">51</span>,<span class="hljs-number">68</span> };<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i+=<span class="hljs-number">2</span>)<br>Tea_Decrypt(m+i, k);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {<br>m[i] ^= <span class="hljs-number">0x99999999</span>;<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++) {<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>m[i] ^= <span class="hljs-number">0x10101010</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i += <span class="hljs-number">2</span>) {<br>Tea_Decrypt(m + i, k);<br>Tea_Encrypt(m + i, k2);<br>Tea_Decrypt(m + i, k1);<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) {<br>*((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>*)m + i) -= i;<br>}<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) {<br><span class="hljs-built_in">putchar</span>(*((<span class="hljs-keyword">char</span>*)m + i));<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="参考">参考</h3><p><a href="https://bbs.pediy.com/thread-190668.htm">(向量化异111常处理)VEH hook</a></p><p><a href="http://yimitumi.com/2020/05/13/VEH-Hook/">基于异常处理的Hook函数(VEH Hook)</a></p><p><a href="https://voidsec.com/windows-drivers-reverse-engineering-methodology/#windows-driver-101">Windows 驱动程序逆向工程方法</a></p><p><a href="https://www.pediy.com/kssd/pediy12/142371.htm">SEH分析笔记（X64篇)</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF-WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
      <tag>Wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022ASISCTF</title>
    <link href="/2022/10/17/2022ASISCTF/"/>
    <url>/2022/10/17/2022ASISCTF/</url>
    
    <content type="html"><![CDATA[<h1>2022ASISCTF</h1><blockquote><p>闲来垂钓碧溪上，记失踪人口回归，再不更就荣升年更博主咯x)，被学弟们🐴惨，其实有人偷偷去奇安信恰钱，我不说是谁.-.<a href="https://forum.butian.net/people/8376/community">Lu1u</a>，但是频率确实是低了不少。亦如学弟所言: 厉害的不是我，是18岁~</p></blockquote><p>Get Tips: blackbox、unicorn、hook、angr。</p><h2 id="figole">figole</h2><p>Android题，java层逆向，通过混淆隐藏控制流。</p><p><code>timesnewroman.ttf</code>是个<code>SQLite</code>数据库，程序通过l1和l2方法从中提取出数据moveToPosition方法用于选着哪一行。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221016210943577.png" alt="image-20221016210943577"></p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221016210842327.png" alt="image-20221016210842327"></p><p>关键加密为shctfdex下的ech函数，为cbc模式的aes，key和iv通过getkey获取，将一个拼接的字符取奇/偶下标分成两组。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221016211410711.png" alt="image-20221016211410711"></p><blockquote><p>入口处是 DActivity，对从数据库拿到的第二段数据解密之后还要经过<code>cdec</code>解密，Android👴直接hook拿数据即可。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs python">s1=<span class="hljs-string">'XPNXVO]PJYSJXTNYVM]PJ^RMX\OZVO\W'</span><br>t=<span class="hljs-string">''</span><br>kk=<span class="hljs-string">b'key'</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>   t+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(s1[i])^kk[i%<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(t)<br>s=<span class="hljs-built_in">bytes</span>.fromhex(t).decode()+<span class="hljs-string">'8i7a4t6155263210'</span><br>k=<span class="hljs-string">''</span><br>iv=<span class="hljs-string">''</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>    <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>        k+=s[i]<br>    <span class="hljs-keyword">else</span>:<br>        iv+=s[i]<br><span class="hljs-built_in">print</span>(k,iv)<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>c=<span class="hljs-string">'7mePfqpM6Wd1El2sj4dlUboU6PieF7La8IJ1e76cfp4='</span><br>c=b64decode(c)<br>aes=AES.new(k.encode(),AES.MODE_CBC,iv.encode()[:<span class="hljs-number">16</span>])<br><span class="hljs-built_in">print</span>(aes.decrypt(c))<br></code></pre></td></tr></tbody></table></figure><h2 id="traditional">traditional</h2><p>rust逆向，符号健在。创建flag.txt调试即可，得到程序流程为base64加密、复杂的移位运算、base64解密。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221016212336795.png" alt="image-20221016212336795"></p><p>经典移位运算，跑出置换表即可，因为是在base64表之后做的变换，字母表就64个,patch程序获取即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> *<br>s1=<span class="hljs-string">'This is the flag: '</span><br>s2=<span class="hljs-string">'This is the flag: MDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWYw'</span><br>s3=<span class="hljs-string">'This is the flag: MDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWYw Just decode it :P'</span><br><span class="hljs-comment">#倒叙处理</span><br>s4=<span class="hljs-string">'P: ti edoced tsuJ wYWZkNmYhlDO3YTN0MjMxAjZlR2YiFWO4cjN1QzMyEDM :galf eht si sihT'</span><br><span class="hljs-comment">#类似换表处理,直接通过patch base64表 跑出变换后的表规则</span><br><span class="hljs-string">"""</span><br><span class="hljs-string">' ' -&gt; '/'</span><br><span class="hljs-string">':' -&gt; '+'</span><br><span class="hljs-string">"""</span><br>s=<span class="hljs-string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span><br>ntb=<span class="hljs-string">'OPQRSTUVWXYZABCDEFGHIJKLMNtuvwxyzabcdefghijklmnopqrs5678901234+/'</span><br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">r'flag.enc'</span>,<span class="hljs-string">'rb'</span>)<br>enc=f.read()<br>f.close()<br>enc=b64encode(enc).decode()<br>m1=<span class="hljs-string">''</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    m1+=s[ntb.index(enc[i])]<br>m1=m1[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(m1)<br><span class="hljs-built_in">print</span>(b64decode(<span class="hljs-string">'QVNJU3tzSU1wTDNfYlU3X20xeDNkX1IzdkVyNWVfN0FzSyF9'</span>))<br></code></pre></td></tr></tbody></table></figure><h2 id="hannibal">hannibal</h2><blockquote><p>做题时有点犯迷糊了，逻辑很简单，非得想着爆破时间戳… 导致忽略了原跟这一点</p></blockquote><p>首先将输入转为二进制字符串，其中第一个字节转为7bit，故长度p=7+(n-1)*8，之后又通过随机数找到以p为模数的一个原跟，依次来遍历其简化剩余系，用于生成混淆表。</p><blockquote><p>这样会丢掉一位，因为简化剩余中不存在0，第一个因为是在ascii表的范围内，所以恒定为0。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span>  s2b<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_all_randk</span>(<span class="hljs-params">p</span>):</span><br>    tb=<span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,p-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> (p-<span class="hljs-number">1</span>)%i==<span class="hljs-number">0</span>:<br>            tb.add(i)<br>    tb=<span class="hljs-built_in">list</span>(tb)<br>    kk=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,p-<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(i,p-<span class="hljs-number">1</span>,p)==<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">all</span>([<span class="hljs-built_in">pow</span>(i,j,p)!=<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> tb]):<br>                    kk.append(i)<br>    <span class="hljs-keyword">return</span> kk<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_arr</span>(<span class="hljs-params">x,p</span>):</span><br>    ans=[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p-<span class="hljs-number">1</span>):<br>        ans.append((ans[i]*x)%p)<br>    <span class="hljs-keyword">assert</span> ans[-<span class="hljs-number">1</span>]==<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> ans[:-<span class="hljs-number">1</span>]<br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">r'flag.enc'</span>,<span class="hljs-string">'rb'</span>)<br>buf=f.read()<br>f.close()<br>enc_len=<span class="hljs-number">0x276</span><br>p=<span class="hljs-number">0x277</span><br>n=(p-<span class="hljs-number">7</span>)/<span class="hljs-number">8</span><br><span class="hljs-built_in">print</span>(n)<br>kk=get_all_randk(p)<br>mm=s2b(buf)[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(kk)):<br>    res=[<span class="hljs-string">'#'</span>]*p<br>    sh_tb=get_arr(kk[index],p)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(sh_tb)):<br>        res[sh_tb[i]]=mm[i]<br>    ans0=<span class="hljs-string">'00'</span>+<span class="hljs-string">''</span>.join(res[<span class="hljs-number">1</span>:])<br>    ans1=<span class="hljs-string">'01'</span>+<span class="hljs-string">''</span>.join(res[<span class="hljs-number">1</span>:])<br>    ans0=(long_to_bytes(<span class="hljs-built_in">int</span>(ans0,<span class="hljs-number">2</span>)))<br>    ans1=(long_to_bytes(<span class="hljs-built_in">int</span>(ans1,<span class="hljs-number">2</span>)))<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b'ASIS'</span> <span class="hljs-keyword">in</span> ans0 : <span class="hljs-built_in">print</span>(ans0) ;<span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b'ASIS'</span> <span class="hljs-keyword">in</span> ans1 : <span class="hljs-built_in">print</span>(ans1) ;<span class="hljs-keyword">break</span><br>    <span class="hljs-comment">#print('res: ' +ans)</span><br><span class="hljs-comment">#ASIS{Bi7_fL!p__Fl0P__w1Th_5ImPl3_pOW!!}</span><br></code></pre></td></tr></tbody></table></figure><p>赛时思路 patch程序爆破，将随机序列写入到文件再读取，奈何索引已经大于了单个字节，不失为一种爆破思路。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221016205324002.png" alt=""></p><h2 id="vivbit">vivbit</h2><blockquote><p>aarch64架构，hannibal升级版，变换更加复杂，单纯调试看就不合适了，不过加密的核心仍是bit位的混淆，各个字符间并无关系，可以考虑爆破/测试，测试每个字节影响的bit位。</p><p>Retard👴方法太帅了，qemu模拟执行，比较密文和测试flag字符影响的bit位，如果相同则当前位置是正确的flag字符，逐个字节进行爆破，进而getflag。x) 抄作业</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20221016214440859.png" alt="image-20221016214440859"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> s2b<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">enc</span>(<span class="hljs-params">flag, size=<span class="hljs-number">0</span></span>):</span><br>    <span class="hljs-keyword">if</span> size:<br>        flag = flag.ljust(size, <span class="hljs-string">b'*'</span>)<br>    <span class="hljs-built_in">open</span>(<span class="hljs-string">'./flag.txt'</span>, <span class="hljs-string">'wb'</span>).write(flag)<br>    os.system(<span class="hljs-string">'qemu-aarch64 vivbit_orig'</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'./flag.enc'</span>, <span class="hljs-string">'rb'</span>).read()<br><br>test_size = <span class="hljs-number">64</span>                                       <span class="hljs-comment">#需要为4的倍数进行测试</span><br>flag_enc = <span class="hljs-built_in">open</span>(<span class="hljs-string">'./chall_flag.enc'</span>, <span class="hljs-string">'rb'</span>).read()<br>verify_bins = s2b(flag_enc)                          <span class="hljs-comment">#转成二进制串</span><br>flag = <span class="hljs-string">''</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(flag) &lt; <span class="hljs-number">64</span>:<br>    cached = <span class="hljs-built_in">dict</span>()<br>    diff = <span class="hljs-built_in">set</span>()<br>    a = s2b(enc((flag+<span class="hljs-string">'L'</span>).encode(), test_size))     <span class="hljs-comment">#生成一个模板用于找出修改当前位置字节影响密文中的bit位</span><br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> string.printable:<br>        b = s2b(enc((flag+ch).encode(), test_size))  <span class="hljs-comment">#爆破当前不同的位，生成一个字典</span><br>        cached[ch] = b<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>            <span class="hljs-keyword">if</span> a[i] != b[i]:<br>                diff.add(i)                          <span class="hljs-comment">#将当前字符可能影响的所有位置都记录到diff</span><br>    diff = <span class="hljs-built_in">list</span>(diff)<br>    <span class="hljs-built_in">print</span>(diff)<br><br>    maybe = []<br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> string.printable:<br>        tmp = cached[ch]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">all</span>([tmp[i] == verify_bins[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> diff]):  <span class="hljs-comment">#影响的bit位与密文中的相同则为正确字符</span><br>            maybe.append(ch)<br>    <span class="hljs-built_in">print</span>(maybe)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(maybe) == <span class="hljs-number">1</span>:<br>        flag += maybe[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">else</span>:<br>        flag += <span class="hljs-string">'?'</span>                                   <br>    <span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF-WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
      <tag>Wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DAS_5月_出题人挑战赛</title>
    <link href="/2022/05/28/2022DAS5%E6%9C%88/"/>
    <url>/2022/05/28/2022DAS5%E6%9C%88/</url>
    
    <content type="html"><![CDATA[<h1>DAS 5月</h1><blockquote><p>隔天就要考试，单纯摸了摸，看能否摸到工作量少的，于是选择了luajit，网上的方法几乎尝试了一遍也没有解决方案，版本信息没有，luajit自带的反汇编尝试无果，体验极差。</p></blockquote><h2 id="wer">wer</h2><h3 id="求解">求解</h3><blockquote><p>bcf虚假控制流，真正的逻辑不在main，而是在某个函数内对输入进行了转存，之后又进行了相关处理。</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220527091239631.png" alt="image-20220527091239631"></p><p>直接定位到输入部分，要求输入为38位并且将输入存入两个xmmword下。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220527091852751.png" alt="image-20220527091852751"></p><p>跟进<code>sub_1400DB50</code>,a2中存放的我们的输入，可见对输入进行了转移，之后对<code>xmmword_140035C20</code>交叉引用，定位到一个新的处理函数。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220527092129863.png" alt="image-20220527092129863"></p><p>check逻辑为 input[i]^v3[i]==102 ,循环32次如果成功就输出correct。</p><p><code>exp</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs python">enc=[<span class="hljs-number">0x05</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x53</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    enc[i]^=<span class="hljs-number">102</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">b'flag{'</span>+<span class="hljs-built_in">bytes</span>(enc)+<span class="hljs-string">b'}'</span>)<br><span class="hljs-comment">#flag{ce3cba82ca6de596565c3f231ecd4675}</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>下次时间紧还是老老实实摸windows了，不摸不熟悉的领域。😭😭😭</p></blockquote><h3 id="溯源">溯源</h3><p>查阅<a href="https://docs.microsoft.com/en-us/windows/win32/wer/windows-error-reporting">Windows 错误报告 - Win32 应用|微软文档 (microsoft.com)</a>官方文档，了解WER和ARR(程序恢复和重启)的相关知识。</p><blockquote><p>错误报告功能使用户能够通知微软有关应用程序故障、内核故障、无反应的应用程序和其他应用程序的具体问题。并且可以使用应用程序恢复和重启(ARR)，以确保客户在其应用程序崩溃时不会丢失数据，并允许用户快速返回到他们的任务。</p></blockquote><p>对getflag的主要函数进行交叉引用，观察函数调用的关系。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220527124229347.png" alt="image-20220527124229347"></p><p><strong>首先atexit注册了终止函数，可以在任何地方注册终止函数，并且他在程序结束时调用。</strong></p><p>并且注册是在main函数运行前完成的。</p><blockquote><p>initterm函数负责遍历函数指针表并初始化它们的内部方法。</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220527125654996.png" alt="image-20220527125654996"></p><blockquote><p>这个特性为其能隐藏控制流，偷天换日，图穷而匕不见提供了支撑。</p></blockquote><p>其次是注册了<strong>恢复回调函数</strong></p><p>如果应用程序遇到未处理的异常或变得无响应，Windows 错误报告 （WER） 将调用指定的恢复回调。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">HRESULT <span class="hljs-title">RegisterApplicationRecoveryCallback</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           APPLICATION_RECOVERY_CALLBACK pRecoveyCallback, <span class="hljs-comment">//恢复函数指针</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in, optional] PVOID                         pvParameter,      <span class="hljs-comment">//传递变量的指针，可为空</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           DWORD                         dwPingInterval,   <span class="hljs-comment">//恢复 ping 间隔，以毫秒为单位，必须要在这个间隔内调用ApplicationRecoveryInProgress函数来说明正在主动恢复，否则会被wer终止。</span></span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           DWORD                         dwFlags           <span class="hljs-comment">//目前无意义</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br>ApplicationRecoveryInProgress(&amp;pbCancelled);<span class="hljs-comment">// 指示调用应用程序正在继续恢复数据。</span><br><br><span class="hljs-function">HRESULT <span class="hljs-title">ApplicationRecoveryInProgress</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [out] PBOOL pbCancelled    <span class="hljs-comment">//用户是否取消恢复，由wer设置 ;取消恢复/恢复完成时 pbCancelled为1</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ApplicationRecoveryFinished</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] BOOL bSuccess          <span class="hljs-comment">//恢复成功输入为1 不成功为0</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br></code></pre></td></tr></tbody></table></figure><p><code>注册函数</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> __fastcall <span class="hljs-title">sub_14000F4A0</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  HWND ForegroundWindow; <span class="hljs-comment">// rax</span><br><br>  ForegroundWindow = GetForegroundWindow();     <span class="hljs-comment">//检索前台窗口的句柄（用户当前正在使用的窗口）</span><br>  WerReportHang(ForegroundWindow, <span class="hljs-number">0</span>i64);        <span class="hljs-comment">// wer函数，在指定的窗口上启动“无响应”报告。</span><br>  sub_14000F490(); <span class="hljs-comment">//没有执行到 进程就结束了</span><br>}<br><br>.text:<span class="hljs-number">000000014000F</span>490 sub_14000F490   proc near               ; CODE XREF: sub_14000F4A0+<span class="hljs-number">19</span>↓j<br>.text:<span class="hljs-number">000000014000F</span>490                                         ; DATA XREF: .pdata:<span class="hljs-number">0000000140036894</span>↓o<br>.text:<span class="hljs-number">000000014000F</span>490 ; __unwind { <span class="hljs-comment">// sub_140010E50</span><br>.text:<span class="hljs-number">000000014000F</span>490                 <span class="hljs-keyword">xor</span>     ecx, ecx<br>.text:<span class="hljs-number">000000014000F</span>492                 mov     eax, <span class="hljs-number">61</span>h ; <span class="hljs-string">'a'</span><br>.text:<span class="hljs-number">000000014000F</span>497                 mov     [rcx], ax    <span class="hljs-comment">//内存地址0是未分配的区域 会引发内存访问异常</span><br>.text:<span class="hljs-number">000000014000F</span>49A                 retn<br>.text:<span class="hljs-number">000000014000F</span>49A ; } <span class="hljs-comment">// starts at 14000F490</span><br>.text:<span class="hljs-number">000000014000F</span>49A sub_14000F490   endp<br><br></code></pre></td></tr></tbody></table></figure><blockquote><p>因为Windows会自动报告未处理的异常，应用程序不应该处理致命的异常。</p><p>如果出现故障或不响应的进程是交互式的，WER会显示一个用户界面，告知用户这个问题。</p><p>如果在用户试图与应用程序进行交互时，应用程序在五秒钟内不响应Windows消息，则被认为是无响应的。</p></blockquote><p>因为我们<code>WerReportHang</code>启动了"无响应"报告，WER会有程序未响应的异常，在异常退出之前，调用恢复回调。</p><ol><li>使用恢复回调尝试在应用程序终止之前保存数据和状态信息。 然后，可以在重启应用程序时使用保存的数据和状态信息。</li><li>无响应报告完成后，它将终止创建窗口的进程。这也是调试到这一步会挂掉的原因。</li></ol><p>整体流程:  注册终止函数/恢复函数  -&gt; main(虚假控制流结束) -&gt; 终止函数 -&gt; 当前窗口启动"无响应"报告 -&gt; 触发异常 -&gt; 恢复函数。</p><h2 id="CEF">CEF</h2><h3 id="求解-2">求解</h3><blockquote><p>程序的依赖有点多，当时存下文件就没细看，后来看群#REtard师傅发了一张图，看着有点熟悉的sm4，终于还是对他下手了。</p></blockquote><p>运行程序，会有一段报错，不过可以根据这个明文信息进行搜索。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220527201157512.png" alt="image-20220527201157512"></p><p>查看strings窗口，交叉引用<code>please input your flag</code>得到的代码逻辑非check逻辑，应该是在注册窗口。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220527201315343.png" alt="image-20220527201315343"></p><p>可以在数据段对其他可疑的数据进行交叉引用，尤其是长度为32位的(经典flag len)，或者是加密逻辑中需要用的数据表。</p><p>可以通过交叉引用定位到<code>sub_44F360</code>函数，其中一些显示明文有异或解密得到。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220527202145352.png" alt="image-20220527202145352"></p><p>解密可得document.write(‘%c’); 并且之后其他字符可得alert(‘Correct’)。</p><blockquote><p>😀😀😀，通过解密出的一些明文字符和加密逻辑走向确定该处是关键check点。</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220527202548836.png" alt="image-20220527202548836"></p><p>这步逻辑没有涉及输入，如果有了解过<a href="https://github.com/smallboyZ/Reverse_Crypto/blob/main/SM4/sm4.c">SM4 - mygithub</a>加密的话，可以看出他大致为秘钥扩展的过程，由TK生成CK(轮秘钥)，不过进行了简化没有sbox的替换过程。</p><blockquote><p>并且出题人对细节处理比较好，对空间进行了优化，通过模运算来使轮秘钥的生成更节省空间。</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sm4_exkey</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span>*mkey)</span> </span>{<br>    <span class="hljs-keyword">int</span> i;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) { <span class="hljs-comment">//初始秘钥异或FK</span><br>        mkey[i] ^= FK[i];<br>    }<br><br>    rK = (<span class="hljs-keyword">uint32_t</span>*)(mkey + <span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {<br>        <span class="hljs-keyword">uint32_t</span> tmp = mkey[i + <span class="hljs-number">1</span>] ^ mkey[i + <span class="hljs-number">2</span>] ^ mkey[i + <span class="hljs-number">3</span>] ^ CK[i];<br>        sbox_replace(&amp;tmp);      <br>        rK[i]=mkey[i]^L2(tmp);<br>    } <br>}<br></code></pre></td></tr></tbody></table></figure><p>python模拟实现如下</p><blockquote><p>命名可能有些差异，主要是加密流程。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rol</span>(<span class="hljs-params">n,x</span>):</span><br>    <span class="hljs-keyword">return</span> (n&lt;&lt;x | n&gt;&gt;(<span class="hljs-number">32</span>-x))&amp;<span class="hljs-number">0xffffffff</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ror</span>(<span class="hljs-params">n,x</span>):</span><br>    <span class="hljs-keyword">return</span> (n&gt;&gt;x | n&lt;&lt;(<span class="hljs-number">32</span>-x))&amp;<span class="hljs-number">0xffffffff</span><br><br><br>x=[<span class="hljs-number">0xA3B1BAC6</span>, <span class="hljs-number">0x56AA3350</span>, <span class="hljs-number">0x677D9197</span>, <span class="hljs-number">0xB27022DC</span>]<br>s=[<span class="hljs-number">0x12345678</span>, <span class="hljs-number">0x90ABCDEF</span>, <span class="hljs-number">0xFEDCBA09</span>, <span class="hljs-number">0x87654321</span>]<br>block=[x[i]^s[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br><br>tb=[<span class="hljs-number">0x00070E15</span>, <span class="hljs-number">0x1C232A31</span>, <span class="hljs-number">0x383F464D</span>, <span class="hljs-number">0x545B6269</span>, <span class="hljs-number">0x70777E85</span>, <span class="hljs-number">0x8C939AA1</span>, <span class="hljs-number">0xA8AFB6BD</span>, <span class="hljs-number">0xC4CBD2D9</span>, <span class="hljs-number">0xE0E7EEF5</span>, <span class="hljs-number">0xFC030A11</span>, <span class="hljs-number">0x181F262D</span>, <span class="hljs-number">0x343B4249</span>, <span class="hljs-number">0x50575E65</span>, <span class="hljs-number">0x6C737A81</span>, <span class="hljs-number">0x888F969D</span>, <span class="hljs-number">0xA4ABB2B9</span>, <span class="hljs-number">0xC0C7CED5</span>, <span class="hljs-number">0xDCE3EAF1</span>, <span class="hljs-number">0xF8FF060D</span>, <span class="hljs-number">0x141B2229</span>, <span class="hljs-number">0x30373E45</span>, <span class="hljs-number">0x4C535A61</span>, <span class="hljs-number">0x686F767D</span>, <span class="hljs-number">0x848B9299</span>, <span class="hljs-number">0xA0A7AEB5</span>, <span class="hljs-number">0xBCC3CAD1</span>, <span class="hljs-number">0xD8DFE6ED</span>, <span class="hljs-number">0xF4FB0209</span>, <span class="hljs-number">0x10171E25</span>, <span class="hljs-number">0x2C333A41</span>, <span class="hljs-number">0x484F565D</span>, <span class="hljs-number">0x646B7279</span>] <span class="hljs-comment">#其实这是SM4标准的CK</span><br><br>ck=[]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    v11=tb[i]^block[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">4</span>]^block[(i+<span class="hljs-number">2</span>)%<span class="hljs-number">4</span>]^block[(i+<span class="hljs-number">3</span>)%<span class="hljs-number">4</span>]<br>    t=v11^ror(v11,<span class="hljs-number">9</span>)^rol(v11,<span class="hljs-number">13</span>)<br>    block[i%<span class="hljs-number">4</span>]=block[i%<span class="hljs-number">4</span>]^t<br>    ck.append(block[i%<span class="hljs-number">4</span>])<br></code></pre></td></tr></tbody></table></figure><p>之后可以观察到调用了CK_table,并且将输入4个一组转为DWORD类型，之后调用<code>sub_4520E0</code>进行加密。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220527204027178.png" alt="image-20220527204027178"></p><p><code>sub_4520E0</code>函数加密主体如下</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220527204401527.png" alt="image-20220527204401527"></p><p>过程与秘钥扩展类似。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">mstr=[<span class="hljs-number">0</span>]*<span class="hljs-number">32</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    v3=ck[i]^mstr[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">4</span>]^mstr[(i+<span class="hljs-number">2</span>)%<span class="hljs-number">4</span>]^mstr[(i+<span class="hljs-number">3</span>)%<span class="hljs-number">4</span>]<br>    t=v3^rol(v3,<span class="hljs-number">2</span>)^ror(v3,<span class="hljs-number">8</span>)^rol(v3,<span class="hljs-number">10</span>)^ror(v3,<span class="hljs-number">14</span>)<br>    mstr[i%<span class="hljs-number">4</span>]=mstr[i%<span class="hljs-number">4</span>]^t<br></code></pre></td></tr></tbody></table></figure><p>之后再赋值时，Block[0-3] 分别对应 v42、v41、v40、v39，之后存到CK[5]开始的地址，所以在二轮解密时ck的4个数据被替换。</p><p>综上，解密流程如下。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rol</span>(<span class="hljs-params">n,x</span>):</span><br>    <span class="hljs-keyword">return</span> (n&lt;&lt;x | n&gt;&gt;(<span class="hljs-number">32</span>-x))&amp;<span class="hljs-number">0xffffffff</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ror</span>(<span class="hljs-params">n,x</span>):</span><br>    <span class="hljs-keyword">return</span> (n&gt;&gt;x | n&lt;&lt;(<span class="hljs-number">32</span>-x))&amp;<span class="hljs-number">0xffffffff</span><br><br><br>x=[<span class="hljs-number">0xA3B1BAC6</span>, <span class="hljs-number">0x56AA3350</span>, <span class="hljs-number">0x677D9197</span>, <span class="hljs-number">0xB27022DC</span>]<br>s=[<span class="hljs-number">0x12345678</span>, <span class="hljs-number">0x90ABCDEF</span>, <span class="hljs-number">0xFEDCBA09</span>, <span class="hljs-number">0x87654321</span>]<br>block=[x[i]^s[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br><br>tb=[<span class="hljs-number">0x00070E15</span>, <span class="hljs-number">0x1C232A31</span>, <span class="hljs-number">0x383F464D</span>, <span class="hljs-number">0x545B6269</span>, <span class="hljs-number">0x70777E85</span>, <span class="hljs-number">0x8C939AA1</span>, <span class="hljs-number">0xA8AFB6BD</span>, <span class="hljs-number">0xC4CBD2D9</span>, <span class="hljs-number">0xE0E7EEF5</span>, <span class="hljs-number">0xFC030A11</span>, <span class="hljs-number">0x181F262D</span>, <span class="hljs-number">0x343B4249</span>, <span class="hljs-number">0x50575E65</span>, <span class="hljs-number">0x6C737A81</span>, <span class="hljs-number">0x888F969D</span>, <span class="hljs-number">0xA4ABB2B9</span>, <span class="hljs-number">0xC0C7CED5</span>, <span class="hljs-number">0xDCE3EAF1</span>, <span class="hljs-number">0xF8FF060D</span>, <span class="hljs-number">0x141B2229</span>, <span class="hljs-number">0x30373E45</span>, <span class="hljs-number">0x4C535A61</span>, <span class="hljs-number">0x686F767D</span>, <span class="hljs-number">0x848B9299</span>, <span class="hljs-number">0xA0A7AEB5</span>, <span class="hljs-number">0xBCC3CAD1</span>, <span class="hljs-number">0xD8DFE6ED</span>, <span class="hljs-number">0xF4FB0209</span>, <span class="hljs-number">0x10171E25</span>, <span class="hljs-number">0x2C333A41</span>, <span class="hljs-number">0x484F565D</span>, <span class="hljs-number">0x646B7279</span>]<br><br>ck=[]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    v11=tb[i]^block[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">4</span>]^block[(i+<span class="hljs-number">2</span>)%<span class="hljs-number">4</span>]^block[(i+<span class="hljs-number">3</span>)%<span class="hljs-number">4</span>]<br>    t=v11^ror(v11,<span class="hljs-number">9</span>)^rol(v11,<span class="hljs-number">13</span>)<br>    block[i%<span class="hljs-number">4</span>]=block[i%<span class="hljs-number">4</span>]^t<br>    ck.append(block[i%<span class="hljs-number">4</span>])<br><br><span class="hljs-string">""" encry</span><br><span class="hljs-string">mstr=[0]*32</span><br><span class="hljs-string">for i in range(32):</span><br><span class="hljs-string">    v3=ck[i]^mstr[(i+1)%4]^mstr[(i+2)%4]^mstr[(i+3)%4]</span><br><span class="hljs-string">    t=v3^rol(v3,2)^ror(v3,8)^rol(v3,10)^ror(v3,14)</span><br><span class="hljs-string">    mstr[i%4]=mstr[i%4]^t</span><br><span class="hljs-string">"""</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decry</span>(<span class="hljs-params">enc</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        v3 = ck[i] ^ enc[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>] ^ enc[(i + <span class="hljs-number">2</span>) % <span class="hljs-number">4</span>] ^ enc[(i + <span class="hljs-number">3</span>) % <span class="hljs-number">4</span>]<br>        t = v3 ^ rol(v3, <span class="hljs-number">2</span>) ^ ror(v3, <span class="hljs-number">8</span>) ^ rol(v3, <span class="hljs-number">10</span>) ^ ror(v3, <span class="hljs-number">14</span>)<br>        enc[i % <span class="hljs-number">4</span>] = enc[i % <span class="hljs-number">4</span>] ^ t<br><br><br>enc=[<span class="hljs-number">0xC0CB547D</span>, <span class="hljs-number">0xD7F5DB74</span>, <span class="hljs-number">0x1B92D96F</span>, <span class="hljs-number">0x204628EB</span>, <span class="hljs-number">0x60D3D5E5</span>, <span class="hljs-number">0x2F366D80</span>, <span class="hljs-number">0x612F63B0</span>, <span class="hljs-number">0x30A90F20</span>]<br>c1=enc[:<span class="hljs-number">4</span>][::-<span class="hljs-number">1</span>]<br>decry(c1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>.to_bytes(c1[i], <span class="hljs-number">4</span>, <span class="hljs-string">'little'</span>).decode(),end=<span class="hljs-string">''</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    ck[<span class="hljs-number">5</span>+i]=enc[i]<br><br>c2=enc[<span class="hljs-number">4</span>:][::-<span class="hljs-number">1</span>]<br>decry(c2)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>.to_bytes(c2[i], <span class="hljs-number">4</span>, <span class="hljs-string">'little'</span>).decode(),end=<span class="hljs-string">''</span>)<br><span class="hljs-comment">#flag{3b2365b04700b5eac3a5fd0ba21b687f}</span><br></code></pre></td></tr></tbody></table></figure><p>显示的无法打开url，实际输入解密的字符却有回显。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220527210629834.png" alt="image-20220527210629834"></p><h3 id="溯源-2">溯源</h3><blockquote><p><code>CEF</code>是<code>Chromium Embedded Framework</code>的缩写，即“Chromium嵌入式框架”，采用c++编写，地位类似于Electron，是web开发应用程序的重要框架。</p></blockquote><p>目录特征</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">cef.pak<br>cef<span class="hljs-built_in">_</span>100<span class="hljs-built_in">_</span>percent.pak<br>cef<span class="hljs-built_in">_</span>200<span class="hljs-built_in">_</span>percent.pak<br>libcef.dll<br></code></pre></td></tr></tbody></table></figure><p>cef使用多进程，主进程为"浏览器进程"，并且他实现的功能就是将Chromium 的浏览器嵌入到应用程序中。</p><p>cef应用程序demo默认加载<code>google.com</code>,当然这个url可以切换为本地文件。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 加载本地文件“c:\example\example.html” </span><br>... <br><span class="hljs-keyword">if</span> (url.empty()) <br>  url = <span class="hljs-string">"file://c:/example/example.html"</span>; <br>…<br></code></pre></td></tr></tbody></table></figure><blockquote><p>本题url设置的please input your flag 当然是错误的无法加载页面。</p></blockquote><p>入口点函数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"include/cef_command_line.h"</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"include/cef_sandbox_win.h"</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"tests/cefsimple/simple_app.h"</span></span><br><br><span class="hljs-comment">// When generating projects with CMake the CEF_USE_SANDBOX value will be defined</span><br><span class="hljs-comment">// automatically if using the required compiler version. Pass -DUSE_SANDBOX=OFF</span><br><span class="hljs-comment">// to the CMake command-line to disable use of the sandbox.</span><br><span class="hljs-comment">// Uncomment this line to manually enable sandbox support.</span><br><span class="hljs-comment">// #define CEF_USE_SANDBOX 1</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined(CEF_USE_SANDBOX)</span><br><span class="hljs-comment">// The cef_sandbox.lib static library may not link successfully with all VS</span><br><span class="hljs-comment">// versions.</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">"cef_sandbox.lib"</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">// Entry point function for all processes.</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> APIENTRY <span class="hljs-title">wWinMain</span><span class="hljs-params">(HINSTANCE hInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">                      HINSTANCE hPrevInstance,</span></span><br><span class="hljs-params"><span class="hljs-function">                      LPTSTR lpCmdLine,</span></span><br><span class="hljs-params"><span class="hljs-function">                      <span class="hljs-keyword">int</span> nCmdShow)</span> </span>{<br>  UNREFERENCED_PARAMETER(hPrevInstance);<br>  UNREFERENCED_PARAMETER(lpCmdLine);<br><br>  <span class="hljs-comment">// Enable High-DPI support on Windows 7 or newer.</span><br>  CefEnableHighDPISupport();<br><br>  <span class="hljs-keyword">void</span>* sandbox_info = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined(CEF_USE_SANDBOX)</span><br>  <span class="hljs-comment">// Manage the life span of the sandbox information object. This is necessary</span><br>  <span class="hljs-comment">// for sandbox support on Windows. See cef_sandbox_win.h for complete details.</span><br>  CefScopedSandboxInfo scoped_sandbox;<br>  sandbox_info = scoped_sandbox.sandbox_info();<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>  <span class="hljs-comment">// Provide CEF with command-line arguments.</span><br>  <span class="hljs-function">CefMainArgs <span class="hljs-title">main_args</span><span class="hljs-params">(hInstance)</span></span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> CEF应用程序有多个子进程（渲染、GPU等），共享同一个可执行文件。这个函数检查命令行，如果这是个 一个子进程，则执行适当的逻辑。</span><br><span class="hljs-comment">*/</span><br>  <span class="hljs-keyword">int</span> exit_code = CefExecuteProcess(main_args, <span class="hljs-literal">nullptr</span>, sandbox_info);<br>  <span class="hljs-keyword">if</span> (exit_code &gt;= <span class="hljs-number">0</span>) {<br>    <span class="hljs-comment">// The sub-process has completed so return here.</span><br>    <span class="hljs-keyword">return</span> exit_code;<br>  }<br><br>  <span class="hljs-comment">// Parse command-line arguments for use in this method.</span><br>  CefRefPtr&lt;CefCommandLine&gt; command_line = CefCommandLine::CreateCommandLine();<br>  command_line-&gt;InitFromString(::GetCommandLineW());<br><br>  <span class="hljs-comment">// Specify CEF global settings here.</span><br>  CefSettings settings;<br><br>  <span class="hljs-keyword">if</span> (command_line-&gt;HasSwitch(<span class="hljs-string">"enable-chrome-runtime"</span>)) {<br>    <span class="hljs-comment">// Enable experimental Chrome runtime. See issue #2969 for details.</span><br>    settings.chrome_runtime = <span class="hljs-literal">true</span>;<br>  }<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> !defined(CEF_USE_SANDBOX)</span><br>  settings.no_sandbox = <span class="hljs-literal">true</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>  <span class="hljs-comment">// SimpleApp implements application-level callbacks for the browser process.</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  它将在CEF初始化后的OnContextInitialized()中创建第一个浏览器实例。</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-function">CefRefPtr&lt;SimpleApp&gt; <span class="hljs-title">app</span><span class="hljs-params">(<span class="hljs-keyword">new</span> SimpleApp)</span></span>;<br><br>  <span class="hljs-comment">// 初始化CEF</span><br>  CefInitialize(main_args, settings, app.get(), sandbox_info);<br><br>  <span class="hljs-comment">// Run the CEF message loop. This will block until CefQuitMessageLoop() is</span><br>  <span class="hljs-comment">// called.</span><br>  CefRunMessageLoop();<br><br>  <span class="hljs-comment">// Shut down CEF.</span><br>  CefShutdown();<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>至于一些回调函数和更详细的实例可以结合<a href="https://bitbucket.org/chromiumembedded/cef/wiki/Tutorial.md">CEF-WIKI</a>提供的demo源码进行调试和学习。</p><blockquote><p>大致了解流程，这个框架还是比较有趣的，之后可以深入学习一下:)。</p></blockquote><h4 id="小插曲">小插曲</h4><p>对解密出的js api是否感到异或，搜索CEF逛看雪时捉到了出题人的身影。</p><blockquote><p>不过本题来说是cef直接调用js的，并非采用的以下技术手段。</p></blockquote><p><a href="https://bbs.pediy.com/thread-268570.htm">将js代码注入到第三方CEF应用程序的一点浅见-编程技术-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p><p>该文作者抓住CEF程序创建浏览器的特点，试图找到生成的浏览器对象，以此来任意执行js代码。</p><blockquote><p>cef 的核心全部在libcef.dll里，所以从其中创建浏览器的API入手，为了拿到创建出的浏览器对象。</p></blockquote><p><strong>尝试</strong></p><p>找到创建浏览器的API，进行hook拿到浏览器对象。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cef_browser_host_create_browser</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">cef_window_info_t</span>* windowInfo,</span></span><br><span class="hljs-params"><span class="hljs-function">    struct <span class="hljs-keyword">_cef_client_t</span>* client,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">const</span> <span class="hljs-keyword">cef_string_t</span>* url,</span></span><br><span class="hljs-params"><span class="hljs-function">    struct <span class="hljs-keyword">_cef_browser_settings_t</span>* settings,</span></span><br><span class="hljs-params"><span class="hljs-function">    struct <span class="hljs-keyword">_cef_request_context_t</span>* request_context)</span></span>;<br></code></pre></td></tr></tbody></table></figure><p>而这个函数是异步,所以<code>cef_browser_t*</code>存在于创建成功的回调中，作者之后又通过<code>_cef_client_t* client</code>参数入手去hook回调，但最终以失败告终。</p><p>同步和异步复习<a href="https://www.cnblogs.com/IT-CPC/p/10898871.html">同步(Synchronous)和异步(Asynchronous) - myCpC - 博客园 (cnblogs.com)</a></p><p><strong>柳暗花明</strong></p><p>师傅又通过观察libcef的其他API，找到了突破口。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">///</span><br><span class="hljs-comment">// Returns the current (top) context object in the V8 context stack.</span><br><span class="hljs-comment">///</span><br><span class="hljs-function">CEF_EXPORT <span class="hljs-keyword">cef_v8context_t</span>* <span class="hljs-title">cef_v8context_get_current_context</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//返回V8引擎的上下文</span><br></code></pre></td></tr></tbody></table></figure><p>介于V8js与browser是绑定的，所以借助v8js引擎的上下文来拿到browser对象。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">cef_browser_t</span>* browser = <span class="hljs-literal">NULL</span>;<br><span class="hljs-function"><span class="hljs-keyword">cef_v8context_t</span>* <span class="hljs-title">my_cef_v8context_get_current_context</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">cef_v8context_t</span>* js_context = ori_cef_v8context_get_current_context(); <span class="hljs-comment">//获取V8js引擎上下文</span><br>    Print(<span class="hljs-string">"my_cef_v8context_get_current_context js_context: %X!!\n"</span>, js_context);<br>    browser = js_context-&gt;get_browser(js_context); <span class="hljs-comment">//得到浏览器对象!!!</span><br>    <span class="hljs-comment">//Print("[!!!] browser = %X\n", browser);</span><br>    <span class="hljs-keyword">_cef_frame_t</span>* frame = browser-&gt;get_main_frame(browser);<br>    <span class="hljs-comment">//Print("[!!!] frame = %X\n", frame);</span><br>    CefString script = payload;<br>    CefString url = xorstr(<span class="hljs-string">"app/wd"</span>).crypt_get();<br>    frame-&gt;execute_java_script(frame, script.GetStruct(), url.GetStruct(), <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> js_context;<br>}<br><span class="hljs-comment">// write by renbohan  https://bbs.pediy.com/thread-268570.htm</span><br></code></pre></td></tr></tbody></table></figure><p>至此目的已经达成，即我们成功拿到了cef创建出的浏览器对象。所谓过河拆桥，拿到该对象后就可以非常方便的执行js代码，从而cef的打工生涯结束，js才是check代码的主场。</p><h2 id="LuaJit">LuaJit</h2><blockquote><p>哦，多么痛的领悟~😱😱😱</p></blockquote><p>拿到文件后可以通过010打开，发现是非PE文件格式，根据文件头<code>1B 4C 4A 02</code>搜索得知为luajit编译的文件。</p><p>LuaJIT 使用了一种全新的方式来编译和执行 Lua 脚本。经过处理后的 LuaJIT 程序，字节码的编码实现更加简单，执行效率相比 Lua 和 Luac 更加高效。</p><blockquote><p>直接百度luajit逆向，之前没接触过此类逆向，格局小了🙃。有幸之前在<a href="https://blog.shi1011.cn/rev/android/1216">🐟哥 - Mas0n</a>博客上看到过几种lua的保护方式和解决方案。</p></blockquote><p>可以通过非虫大牛的<a href="https://www.anquanke.com/post/id/90241#h3-11">Lua程序逆向之Luajit字节码与反汇编</a>了解luajit的opcode结构和文件格式，并且提供了010的<code>luajit.bt</code>的模板。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220528115928721.png" alt="image-20220528115928721"></p><p>并且也直接进行了反汇编，当然阅读luajit反汇编之后的字节码也是一种折磨，于是在<code>gayhub</code>上四处搜寻反编译的轮子，不过结果都不尽人意。</p><blockquote><p>总结: 前辈们的工具大多一脉相承，根据版本更新添加新的opcode；同时只能反编译luajit编译出32位的文件，对64位不适用。</p><p>而且本题没有给出luajit的具体版本，想采用luajit原生的反汇编工具进行反汇编都要自行摸索版本,主流应该在2.1或2.0😭。</p></blockquote><p>LJD最近的一个项目**<a href="https://github.com/Dr-MTN/luajit-decompiler">luajit-decompiler</a>**，知道题目对应版本才可知是否需要改opcode，或者是工具的有关报错信息。</p><p>又在吾爱上看到一篇博客<a href="https://www.52pojie.cn/thread-1378796-1-1.html"><strong>luajit反编译、解密</strong></a>,其中提到了另一种工具**<a href="https://github.com/bobsayshilol/luajit-decomp"> luajit-decomp</a>**,此工具使用起来只需下载对应版本的luajit并编译，拿到其中的<code>luajit.exe</code>、<code>lua51.dll</code>、<code>jit文件夹</code>放到decomp文件夹下，运行jitdecomp即可。</p><ol><li><code>luajit-decomp\data\luajit</code>下存放待反编译的jit文件。</li><li>运行jitdecomp，结果会在<code>luajit-decomp\data\out</code>路径下。</li></ol><p>虽然能对32/64位编译文件成功进行反编译，不过反编译后的代码也比较难读，相比读字节码并没有减少太多工作量，不过也不失为一种不错方法。</p><blockquote><p>后来和群友讨论，#REtard师傅说版本为LuaJIT-2.1.0-beta3，并且t0hka师傅arch拉的最新的包，用其自带的luajit -bl 即完成了反汇编。</p></blockquote><p>去官网下载2.1.0-beta3的源码，使用VS工具包中的命令行编译工具<code>vcvars64.bat</code>来完成编译，在Luajit根目录下打开cmd输入<code>vcvars64.bat</code></p><p>文件路径。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">"F:\visual studio2019\VC\Auxiliary\Build\vcvars64.bat"</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220528200018823.png" alt="image-20220528200018823"></p><blockquote><p>在MSVC 32位编译环境下  msvcbuild.bat  编译32位</p><p>msvcbuild.bat gc64编译64位，编译64位后面一定要跟gc64, 即便是开启的x64的编译命令行。</p></blockquote><p>之后成功编译出<code>luajit.exe</code> 和 <code>lua51.dll</code>这两个程序，这也是luajit-decomp工具实现反编译的支撑。</p><p>同目录下用过luajit.exe -bl task.jit 可以显示反编译后的字节码。</p><blockquote><p>经典luajit.exe -h 罗列指令菜单</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220528201038811.png" alt="image-20220528201038811"></p><p>反编译不得就撸字节码，不过官网给出的主要是2.0版本的bytecode ， 详细可见<code>src/lj_bc.h</code> 。</p><p>可以自己写一些lua代码，之后luajit -b test.lua xxx 进行编译之后查看字节码对照。</p><blockquote><p>或者用luajit-decomp反编译一下，可读性是有点差的。先暂时告一段落，之后填坑吧，即使我的知识星球已经被挖的坑坑洼洼咯!</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220528213003579.png" alt="image-20220528213003579"></p><p>相关连接:</p><p>LuaJit官网 : <a href="http://luajit.org/">http://luajit.org/</a>  一些参考文档和编译方法</p><p><a href="http://wiki.luajit.org/Bytecode-2.0">LuaJIT 2.0 Bytecode Instructions</a></p><h3 id="总结">总结</h3><p>知识面和广度还是差了亿点，之前太多题目都只是局限在解密表面，没去溯源。同时单纯解密的话思路要打开，能在最短时间内定位关键处理函数的能力十分重要，同时赛后的复现和深入学习题目涉及的考点也是必不可少的部分。😃😃😃</p>]]></content>
    
    
    <categories>
      
      <category>CTF-WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WER</tag>
      
      <tag>CEF</tag>
      
      <tag>LuaJIT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟栈帧修复</title>
    <link href="/2022/04/20/NaCl-%E7%A8%8B%E5%BA%8F%E4%BF%AE%E5%A4%8D/"/>
    <url>/2022/04/20/NaCl-%E7%A8%8B%E5%BA%8F%E4%BF%AE%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<h1>模拟栈帧修复</h1><blockquote><p>填坑，模拟堆栈的复原。</p></blockquote><h3 id="有关栈帧汇编复习">有关栈帧汇编复习</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs assembly">endbr64<br>;用于标记程序中间接调用和跳转的有效跳转目标地址 End Branch 64 bit<br>;间接跳转的接应指令,其实Intel为了防止控制流被劫持,正常跳转的第一条指令,如果不是,那么CPU会报错,引发#cp异常,错误跳转。<br>;直接调用 call + 偏移  <br>;间接调用 call + 绝对地址 往往会将结果保存在某寄存器中  <br>push xxx<br>;可解析为 sub esp,4 mov dword ptr ss:[esp],xxx<br>;或是    lea esp,dword ptr ss:[esp-4] 再 mov  <br>pop xxx ;与push类似<br></code></pre></td></tr></tbody></table></figure><blockquote><p>push和pop可由mov和sub等两步操作组成，所以开辟堆栈时一般是sub esp，xxx 之后通过mov来使用栈空间，而不是push。这样能提高指令的执行效率。</p></blockquote><p>常见栈帧的模板,以一个debug版本的加法为例。</p><blockquote><p>练习的话最好自己跟一个函数用excel画一下堆栈图。</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push 2 //参数入栈<br>push 3<br><br>call func<br><br>//函数内容<br>push ebp<br>mov ebp,esp<br>sub esp,40h //开辟栈空间<br><br>push ebx  //保存现场<br>push esi<br>push edi<br><br>lea edi,dword ptr ss:[esp-40] //开辟空间 填充0xcc(int 3) 防止溢出<br>mov ecx,0x10<br>mov eax,0xcccccccc<br>rep stos dword ptr ss:[edi]<br><br>mov eax,dword ptr ss:[ebp+8] //调用参数完成加法<br>add eax,dword ptr ss:[ebp+0ch]<br><br>pop edi //恢复现场<br>pop esi<br>pop ebx<br><br>mov esp,ebp <br>pop ebp<br>ret<br><br>add esp,8 //外平衡堆栈<br></code></pre></td></tr></tbody></table></figure><p>其实栈帧本身有系统默认的esp和ebp来维护，如果我们将其换用其他的寄存器，在内存的基础上模拟堆栈，那么IDA反编译的效果会大打折扣，从而起到保护作用，NaCl一题就是运用了该类技术。</p><h3 id="例题">例题</h3><blockquote><p>事先可以用Lumina和Finger恢复一下库函数符号，减少不必要的调试操作。</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;test_input: 012345abcdefghijklmnopqrstuvwxyz<br>.text:00000000080017B9 call    read<br>.text:00000000080017BE lea     rax, [rbp-30h]<br>.text:00000000080017C2 mov     rdi, rax ;输入的32字符<br>.text:00000000080017C5 call    sub_8080900;主要的check函数<br></code></pre></td></tr></tbody></table></figure><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220420232345847.png" alt="image-20220420232345847"></p><p>跳过来<code>endbr64</code>检测是否劫持，与原本函数开头的<code>push ebp</code> 和 <code>sub esp,xxx</code>大不相同，这里是对r15进行操作，为了方便观察右上开了一个子窗口专用来跟踪R15。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SFI:0000000008080904 sub     r15d, 28h ; '(' ;开辟栈空间<br>SFI:0000000008080908 lea     r15, [r13+r15+0] ;r13值为0<br>SFI:000000000808090D mov     [r15], rdi  ;栈顶存入输入地址<br>SFI:0000000008080910 mov     dword ptr [r15+24h], 0 ;第二个位置0<br>SFI:0000000008080918 mov     dword ptr [r15+24h], 0<br>SFI:0000000008080920 jmp     loc_8080A40 ;跳转<br></code></pre></td></tr></tbody></table></figure><p>之后又发现类似结构</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SFI:0000000008080940 loc_8080940:                            ; CODE XREF: sub_8080900+145↓j<br>SFI:0000000008080940 mov     eax, [r15+24h]<br>SFI:0000000008080944 shl     eax, 3     <br>SFI:0000000008080947 movsxd  rdx, eax<br>SFI:000000000808094A mov     rax, [r15] ;取输入<br>SFI:000000000808094D add     rax, rdx<br>SFI:0000000008080950 mov     [r15+18h], rax ;存到此处<br>SFI:0000000008080954 mov     rax, [r15+18h]<br>SFI:0000000008080958 mov     rdi, rax       ;放入rdi<br>SFI:000000000808095B nop     dword ptr [rax+rax+00h] ;nop<br>SFI:0000000008080960 lea     r15, [r15-8] ;栈顶上移<br>SFI:0000000008080964 lea     r12, loc_8080980 <br>SFI:000000000808096B mov     [r15], r12 ;将下一个执行的指令入栈<br>SFI:000000000808096E jmp     loc_8080720 ;跳转到该处执行<br>SFI:000000000808096E ; -------------------------------------------------<br>SFI:0000000008080973 align 20h<br>SFI:0000000008080980<br>SFI:0000000008080980 loc_8080980:                            ; DATA XREF: sub_8080900+64↑o<br>SFI:0000000008080980 mov     [r15+10h], rax <br></code></pre></td></tr></tbody></table></figure><p>该处的亮点在于使用r15模拟了一个call loc_8080720的操作，call之后执行8080980处代码，中间数据为垃圾指令。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220420234051834.png" alt="image-20220420234051834"></p><p>观察右侧窗口即为调用函数时入栈的<code>retadr</code>和<code>ebp</code>，并且对于函数调用的代码块用到了endbr64来标识，之后则是开辟新的栈帧。</p><blockquote><p>程序是64位的，所以rbp和返回地址以及对栈的操作都是以8字节为单位。其实这个rbx的内容也不是栈底，应该是保持结构。</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220420235428879.png" alt="image-20220420235428879"></p><p>逻辑段中也插入了一些垃圾数据。</p><p>函数调用的结构已经知晓，接下来看他调用完是如何恢复堆栈的。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SFI:00000000080802E0 lea     r15, [r15+8] ;pop<br>SFI:00000000080802E4 mov     edi, [r15-8] ;返回地址放入EDI<br>SFI:00000000080802E8 and     edi, 0FFFFFFE0h<br>SFI:00000000080802EB lea     rdi, [r13+rdi+0]<br>SFI:00000000080802F0 jmp     rdi ;跳回<br>SFI:00000000080802F0 ; END OF FUNCTION CHUNK FOR sub_8080900<br></code></pre></td></tr></tbody></table></figure><p>所以整体堆栈由r15来维护，并且模拟了call和ret，同时逻辑段中还有垃圾指令。</p><blockquote><p>我们预期是恢复堆栈由esp和ebp来控制，恢复call和ret函数并且去掉逻辑段中的垃圾指令，这项工作将通过使用ipy来解决。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">GetDisasm(adr) <span class="hljs-comment">#得到adr地址的一条汇编代码</span><br><br>GetMnem(adr) <span class="hljs-comment">#得到adr地址的操作码</span><br><br>next_head(adr) <span class="hljs-comment">#取下一条指令的地址</span><br><br>GetOpnd(adr，long n) <span class="hljs-comment">#获取操作数 第一个操作数 n是0 第二个n是1 ... </span><br><br>get_bytes(adr,end-adr) <span class="hljs-comment">#获取一片空间的字节</span><br>tmp=get_bytes(adr,end-adr)<br>tmp=tmp.replace(<span class="hljs-string">b'\x74\x03\x75\x01\xE8'</span>,<span class="hljs-string">b'\x90'</span>*<span class="hljs-number">5</span>) <span class="hljs-comment">#批量patch</span><br><br></code></pre></td></tr></tbody></table></figure><blockquote><p>本来是要这把r15修成rsp的，但是机器指令的长度不一致，改动的话会比较大，个人看到了PZ师傅的分享，只需要把控制流的call和ret修的清楚一些就能生成可读的反编译代码了。</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;ret 处的硬编码 其中夹杂着垃圾数据<br>SFI:000000000807FF5A 66 0F 1F 44 00+                nop     word ptr [rax+rax+00h]<br>SFI:000000000807FF5A 00<br>SFI:000000000807FF60 4D 8D 7F 08                    lea     r15, [r15+8]<br>SFI:000000000807FF64 41 8B 7F F8                    mov     edi, [r15-8]<br>SFI:000000000807FF68 83 E7 E0                       and     edi, 0FFFFFFE0h<br>SFI:000000000807FF6B 49 8D 7C 3D 00                 lea     rdi, [r13+rdi+0]<br>SFI:000000000807FF70 FF E7                          jmp     rdi<br>ret=[0x41, 0x8B, 0x7F, 0xF8, 0x83, 0xE7, 0xE0, 0x49, 0x8D, 0x7C, 0x3D, 0x00, 0xFF, 0xE7]<br><br>;call处 由于返回地址处不一致所以操作起来比<br>SFI:0000000008080A60 4D 8D 7F F8                    lea     r15, [r15-8]<br>SFI:0000000008080A64 4C 8D 25 15 00+                lea     r12, sub_8080A80<br>SFI:0000000008080A64 00 00<br>SFI:0000000008080A6B 4D 89 27                       mov     [r15], r12<br>SFI:0000000008080A6E E9 AD F4 FF FF                 jmp     loc_807FF20<br><br>;操作后的align 20h夹杂着垃圾数据<br></code></pre></td></tr></tbody></table></figure><p>根据上述硬编码的格式给出<code>Patch</code>脚本,感谢P师傅的思路分享。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python">beg=<span class="hljs-number">0x807FEC0</span> <span class="hljs-comment">#真个SFI段</span><br>end=<span class="hljs-number">0x8080ad2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'Patch Beg'</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Patch</span>(<span class="hljs-params">l,r</span>):</span><br>    <span class="hljs-keyword">while</span> l&lt;r:<br>        PatchByte(l,<span class="hljs-number">0x90</span>)<br>        l+=<span class="hljs-number">1</span><br><br>adr_ins=[<span class="hljs-number">0</span>]*<span class="hljs-number">5</span><br>call_mod = [<span class="hljs-string">"lea"</span>, <span class="hljs-string">"lea"</span>, <span class="hljs-string">"mov"</span>, <span class="hljs-string">"jmp"</span>]<br>ret_mod = [<span class="hljs-string">"lea"</span>, <span class="hljs-string">"mov"</span>, <span class="hljs-string">"and"</span>, <span class="hljs-string">"lea"</span>, <span class="hljs-string">"jmp"</span>]<br>adr=beg<br><span class="hljs-keyword">while</span> adr&lt;end:<br>    adr_ins[<span class="hljs-number">0</span>]=adr<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>):  <span class="hljs-comment">#取4个指令判断是否是call_mod</span><br>        adr_ins[i]=next_head(adr_ins[i-<span class="hljs-number">1</span>])<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">if</span> GetMnem(adr_ins[i])!=call_mod[i]:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        Patch(adr_ins[<span class="hljs-number">0</span>],adr_ins[<span class="hljs-number">3</span>])<br>        PatchByte(adr_ins[<span class="hljs-number">3</span>],<span class="hljs-number">0xe8</span>)<br>        l=next_head(adr_ins[<span class="hljs-number">3</span>]) <span class="hljs-comment">#Patch align</span><br>        r=next_head(l)<br>        Patch(l,r)<br>        adr=r<br>        <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):  <span class="hljs-comment">#取5个指令判断是否是ret_mod</span><br>        <span class="hljs-keyword">if</span> GetMnem(adr_ins[i]) != ret_mod[i]:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        Patch(adr_ins[<span class="hljs-number">0</span>],adr_ins[<span class="hljs-number">4</span>])<br>        PatchWord(adr_ins[<span class="hljs-number">4</span>],<span class="hljs-number">0x90</span>)<br>        PatchWord(adr_ins[<span class="hljs-number">4</span>]+<span class="hljs-number">1</span>,<span class="hljs-number">0xc3</span>)<br>        l=next_head(adr_ins[<span class="hljs-number">4</span>]) <span class="hljs-comment">#Patch align</span><br>        r=next_head(l)<br>        Patch(l,r)<br>        adr=r<br>        <span class="hljs-keyword">continue</span><br><br>    adr=next_head(adr)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'Patch End'</span>)<br><br><span class="hljs-string">""" 去一些垃圾数据的话</span><br><span class="hljs-string">tmp=get_bytes(beg,end-beg)</span><br><span class="hljs-string">junk1=[0x66, 0x66, 0x2E, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x2E, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00]</span><br><span class="hljs-string">new_code=tmp.replace(bytes(junk1),b'\x90'*len(junk1))</span><br><span class="hljs-string"></span><br><span class="hljs-string">for i in range(len(new_code)):</span><br><span class="hljs-string">    if tmp[i]!=new_code[i]:</span><br><span class="hljs-string">        PatchByte(beg+i,new_code[i])</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure><p>运行后，将Patch应用到一个附件上，IDA重新进行解析，反编译后结合调试信息恢复结构体。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220421182303300.png" alt="image-20220421182303300"></p><p>对比上一篇文章调试汇编得到的加密,结构基本一致。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">44</span>):<br>        a,b=(rol(a,<span class="hljs-number">1</span>)&amp;rol(a,<span class="hljs-number">8</span>))^rol(a,<span class="hljs-number">2</span>)^b^tb[i],a<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(a), <span class="hljs-built_in">hex</span>(b))<br>    a,b=b,a<br>    <span class="hljs-keyword">return</span> a,b<br></code></pre></td></tr></tbody></table></figure><blockquote><p>来喝杯茶吧🍵🍵🍵</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"> *(v3 - <span class="hljs-number">0x24</span>) = round;  <span class="hljs-comment">//8</span><br> *(v3 - <span class="hljs-number">0x30</span>) = enc;    <span class="hljs-comment">//0 </span><br> *(v3 - <span class="hljs-number">0x18</span>) = &amp;unk_80AFB40; <span class="hljs-comment">//0x18</span><br> *(v3 - <span class="hljs-number">8</span>) = *(v2 + *(v3 - <span class="hljs-number">0x30</span>));<span class="hljs-comment">//0x28</span><br> *(v3 - <span class="hljs-number">0xC</span>) = *(v2 + *(v3 - <span class="hljs-number">0x30</span>) + <span class="hljs-number">4</span>);<span class="hljs-comment">//0x24</span><br> *(v3 - <span class="hljs-number">0x10</span>) = <span class="hljs-number">0</span>;<span class="hljs-comment">//0x20</span><br> *(v3 - <span class="hljs-number">0x1C</span>) = <span class="hljs-number">0x10325476</span>;<span class="hljs-comment">//0x14</span><br><span class="hljs-comment">//如何计算偏移 其实-0x30 指向的是上一个结构体数据 并且结构体大小为0x30，那么可以通过 -0x24 = -0x30 +8 来计算偏移</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">en_st</span>{</span><br>_QWORD Enc;<br>_QWORD Round;<br>_QWORD Delta;<br>_DWORD* Xkey;<br>_DWORD Sum;<br>_DWORD V1;<br>_DWORD V0;<br>_DWORD I;<br>}<br></code></pre></td></tr></tbody></table></figure><p>修复结构体后函数如下。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220421193241470.png" alt="image-20220421193241470"></p><p>解密就不在赘述了，在上篇文章中有写。</p><blockquote><p>由于本题的逻辑代码块较少，并且Tea加密的汇编比较有特点，所以通过调试读汇编的手段也能快速解题，但一旦代码量大起来就G了。</p></blockquote><h3 id="End">End</h3><p>其实上述操作并没用完全解决栈指针换寄存器的问题，我们只是凭借对call和ret的修复使程序控制逻辑恢复，达到反编译的效果。这样做的缺点是我们不得不把 r15模拟的栈空间当成结构体来处理，其实修复起来也是有一定难度的，如果函数调用比较深，那么还是没能简化分析。</p><blockquote><p>彻底修复是把r15换成rsp，不过通过IDApython的话感觉会比较繁，使用r15和rsp的指令长度可能会差1,改动量会比较大，目前的尝试以失败告终。😭😭😭</p></blockquote><p><a href="https://www.csdn.net/tags/NtTagg1sMzkyODctYmxvZwO0O0OO0O0O.html">Intel-x64汇编指令机器码对应列表</a> – 更具体的硬编码可以通过在x64dbg或OD中写汇编来观察。</p>]]></content>
    
    
    <categories>
      
      <category>RE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>StarCTF-2022-someRE</title>
    <link href="/2022/04/19/StarCTF-2022/"/>
    <url>/2022/04/19/StarCTF-2022/</url>
    
    <content type="html"><![CDATA[<h1>*CTF-2022</h1><blockquote><p>题目本身逻辑不难，主要偏向于基础能力的考察，时间在看汇编和调试的过程中慢慢溜走。还有就是淦RE时不要中途去玩儿别的方向，坚持才是胜利，一遍调试不行那就来N遍，当然合理的搜索和工具的使用往往会加速分析。🤔🤔🤔</p></blockquote><h2 id="Simple-File-System">Simple File System</h2><p>tip：<code>debug</code></p><blockquote><p>签到题，虽然名字听起来有点吓人。</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220419173726329.png" alt="image-20220419173726329"></p><p>生成文件进行的操作。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs c">I implemented a very simple file system <span class="hljs-keyword">and</span> buried my flag in it.<br><br>The image file are initiated as follows: <br>./simplefs image.flag <span class="hljs-number">500</span><br> simplefs&gt; format<br> simplefs&gt; mount<br> simplefs&gt; plantflag<br> simplefs&gt; <span class="hljs-built_in">exit</span><br>And you cold run <span class="hljs-string">"help"</span> to explore other commands.<br></code></pre></td></tr></tbody></table></figure><p>主要关注<code>plantflag</code>操作，只有当<code>sub_1E16("flag", v17, 1)</code>才会写入加密后的flag，其余都是写入随机数。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220419174534722.png" alt="image-20220419174534722"></p><p>读写都以4k为单位，并且写入的数据长度为0x20，v4是从第一个数据块中取出的4Byte数据<code>0xDEEDBEEF</code>,之后将处理后的flag写入文件。</p><blockquote><p>可以通过调试模拟生成文件的过程拿到v4，定位flag写的位置。通过010观察<code>image.flag</code>文件，4k一块，每块开头处便是写入的0x20Byte数据，直接遍历所有解根据flag的格式判断即可。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">r'G:\game\X-CTF\RE\文件系统\image.flag'</span>,<span class="hljs-string">'rb'</span>).read()<br>s=[]<br>tao=[<span class="hljs-number">0</span>]*<span class="hljs-number">32</span><br>c=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(f),<span class="hljs-number">32</span>):<br>    t=<span class="hljs-built_in">list</span>(f[i:i+<span class="hljs-number">32</span>])<br>    <span class="hljs-keyword">if</span> t!=tao:<br>        c.append(t)<br><br><br>k=[<span class="hljs-number">0xEF</span>,<span class="hljs-number">0xBE</span>,<span class="hljs-number">0xED</span>,<span class="hljs-number">0xDE</span>]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ror</span>(<span class="hljs-params">n,m</span>):</span><br>    <span class="hljs-keyword">return</span> ((n&gt;&gt;m) | (n&lt;&lt;(<span class="hljs-number">8</span>-m)))&amp;<span class="hljs-number">0xff</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rol</span>(<span class="hljs-params">n,m</span>):</span><br>    <span class="hljs-keyword">return</span> (((n&lt;&lt;m)&amp;<span class="hljs-number">0xff</span>) | ((n&gt;&gt;(<span class="hljs-number">8</span>-m))&amp;<span class="hljs-number">0xff</span>))<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dcd</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>        s[i] = rol(s[i],<span class="hljs-number">5</span>)<br>        s[i] ^= k[<span class="hljs-number">3</span>]<br>        s[i] = rol(s[i], <span class="hljs-number">4</span>)<br>        s[i] ^= k[<span class="hljs-number">2</span>]<br>        s[i] = rol(s[i], <span class="hljs-number">3</span>)<br>        s[i] ^= k[<span class="hljs-number">1</span>]<br>        s[i] = rol(s[i], <span class="hljs-number">2</span>)<br>        s[i] ^= k[<span class="hljs-number">0</span>]<br>        s[i] = rol(s[i],<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">try</span>:<br>        m=<span class="hljs-built_in">bytes</span>(s).decode()<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">'*CTF'</span> <span class="hljs-keyword">in</span> m <span class="hljs-keyword">or</span> <span class="hljs-string">'*ctf'</span> <span class="hljs-keyword">in</span> m:<br>            <span class="hljs-built_in">print</span>(m)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">for</span> tb <span class="hljs-keyword">in</span> c:<br>    dcd(tb)<br><span class="hljs-comment">#*CTF{Gwed9VQpM4Lanf0kEj1oFJR6}</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>解密时异或的的key写成了ED ED，没有直接静态干掉，之后结合调试发现抄错了key。</p></blockquote><h2 id="NaCl">NaCl</h2><p>tip：<code>Feistel/Xtea</code></p><blockquote><p>r15模拟esp，自己维护的堆栈，所以IDA反编译的代码就比较乱，不过加密的逻辑块不是很多，调试加读汇编即可。=.= 硬逆</p><p>大🔥出题时间差不多，差一点点就摸到血了😭😭😭。</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220419171001916.png" alt="image-20220419171001916"></p><p>Xtea的delta和轮数被魔改了比较坑，并且在之前还进行了<code>Feistel </code>结构的加密。首先秘钥扩展，得到长为44的int数组，不过秘钥是固定的可以直接dump生成的扩展秘钥。</p><blockquote><p>贴一下当时跟踪时记录的数据处理信息。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rol</span>(<span class="hljs-params">n,m</span>):</span><br>    <span class="hljs-keyword">return</span> ((n&lt;&lt;m)&amp;<span class="hljs-number">0xffffffff</span>)|((n&gt;&gt;(<span class="hljs-number">32</span>-m))&amp;<span class="hljs-number">0xffffffff</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ror</span>(<span class="hljs-params">n,m</span>):</span><br>    <span class="hljs-keyword">return</span> ((n&gt;&gt;m)&amp;<span class="hljs-number">0xffffffff</span>)|((n&lt;&lt;(<span class="hljs-number">32</span>-m))&amp;<span class="hljs-number">0xffffffff</span>)<br>s=<span class="hljs-number">0x8090a0b</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(ror(s,<span class="hljs-number">3</span>)))<br>s=ror(s,<span class="hljs-number">3</span>)<br><br>x=<span class="hljs-number">0x098BADCFF</span>^<span class="hljs-number">0x4050607</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(x))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(x^s))<br><br>b=<span class="hljs-number">0x10203</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(x^s^b))<br><br>c=ror(<span class="hljs-number">0x8090a0b</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(c))<br><br>d=<span class="hljs-number">0xfdbff9ba</span>^<span class="hljs-number">0xb08090a0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br><br>e=<span class="hljs-number">0x10203</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(ror(e,<span class="hljs-number">1</span>)))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">0x4d3f691a</span>^<span class="hljs-number">0x80008101</span>))<br><span class="hljs-comment"># 0x00000000080AFB70 : 0xcd3fe81b</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'---------------------------'</span>)<br><br>a=<span class="hljs-number">0x67452301EFCDAB89</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(a&gt;&gt;<span class="hljs-number">1</span>))<br><span class="hljs-comment"># 一共是0x2c 从4个扩展到了44个有点类似</span><br>tb=[<span class="hljs-number">0x04050607</span>, <span class="hljs-number">0x00010203</span>, <span class="hljs-number">0x0C0D0E0F</span>, <span class="hljs-number">0x08090A0B</span>, <span class="hljs-number">0xCD3FE81B</span>, <span class="hljs-number">0xD7C45477</span>, <span class="hljs-number">0x9F3E9236</span>, <span class="hljs-number">0x0107F187</span>, <span class="hljs-number">0xF993CB81</span>, <span class="hljs-number">0xBF74166C</span>, <span class="hljs-number">0xDA198427</span>, <span class="hljs-number">0x1A05ABFF</span>, <span class="hljs-number">0x9307E5E4</span>, <span class="hljs-number">0xCB8B0E45</span>, <span class="hljs-number">0x306DF7F5</span>, <span class="hljs-number">0xAD300197</span>, <span class="hljs-number">0xAA86B056</span>, <span class="hljs-number">0x449263BA</span>, <span class="hljs-number">0x3FA4401B</span>, <span class="hljs-number">0x1E41F917</span>, <span class="hljs-number">0xC6CB1E7D</span>, <span class="hljs-number">0x18EB0D7A</span>, <span class="hljs-number">0xD4EC4800</span>, <span class="hljs-number">0xB486F92B</span>, <span class="hljs-number">0x8737F9F3</span>, <span class="hljs-number">0x765E3D25</span>, <span class="hljs-number">0xDB3D3537</span>, <span class="hljs-number">0xEE44552B</span>, <span class="hljs-number">0x11D0C94C</span>, <span class="hljs-number">0x9B605BCB</span>, <span class="hljs-number">0x903B98B3</span>, <span class="hljs-number">0x24C2EEA3</span>, <span class="hljs-number">0x896E10A2</span>, <span class="hljs-number">0x2247F0C0</span>, <span class="hljs-number">0xB84E5CAA</span>, <span class="hljs-number">0x8D2C04F0</span>, <span class="hljs-number">0x3BC7842C</span>, <span class="hljs-number">0x1A50D606</span>, <span class="hljs-number">0x49A1917C</span>, <span class="hljs-number">0x7E1CB50C</span>, <span class="hljs-number">0xFC27B826</span>, <span class="hljs-number">0x5FDDDFBC</span>, <span class="hljs-number">0xDE0FC404</span>,<span class="hljs-number">0x0B2B30907</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'---------------------------'</span>)<br>a=<span class="hljs-number">0x61616161</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(rol(a,<span class="hljs-number">1</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(rol(a,<span class="hljs-number">8</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">0xc2c2c2c2</span>&amp;<span class="hljs-number">0x61616161</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(rol(a,<span class="hljs-number">2</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">0x40404040</span>^<span class="hljs-number">0x85858585</span>))<br>b=<span class="hljs-number">0x62626262</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">0xc5c5c5c5</span>^b))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">0xa7a7a7a7</span>^tb[<span class="hljs-number">0</span>]))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'---------------------------'</span>)<br>a=<span class="hljs-number">0x61616161</span><br>b=<span class="hljs-number">0x62626262</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">44</span>):<br>    a,b=(rol(a,<span class="hljs-number">1</span>)&amp;rol(a,<span class="hljs-number">8</span>))^rol(a,<span class="hljs-number">2</span>)^b^tb[i],a<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(a),<span class="hljs-built_in">hex</span>(b))<br>a,b=b,a<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(a),<span class="hljs-built_in">hex</span>(b))<br><span class="hljs-comment">#0x668a1861 0xacbe01cb</span><br><span class="hljs-comment">#之后跟XTea</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'---------------------------'</span>)<br>c=[<span class="hljs-number">0x0F35310C</span>, <span class="hljs-number">0xD2CFADF5</span>]<br><span class="hljs-comment">#0xacbe01cb 0x668a1861 Xtea结果正确</span><br></code></pre></td></tr></tbody></table></figure><p><code>exp</code></p><p>魔改Xtea</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ut32 unsigned int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> delta 0x10325476</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">XTea_Decrypt</span><span class="hljs-params">(ut32* enc, ut32* k,ut32 r)</span> </span>{<br>ut32 sum = delta * r;<br>ut32 v0 = enc[<span class="hljs-number">0</span>];<br>ut32 v1 = enc[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; r; i++) {<br>v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + k[(sum &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>sum -= delta;<br>v0 -= (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + k[sum &amp; <span class="hljs-number">3</span>]);<br>}<br>enc[<span class="hljs-number">0</span>] = v0;<br>enc[<span class="hljs-number">1</span>] = v1;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>ut32 m[<span class="hljs-number">8</span>] = { <span class="hljs-number">0xFDF5C266</span>, <span class="hljs-number">0x7A328286</span>, <span class="hljs-number">0xCE944004</span>, <span class="hljs-number">0x5DE08ADC</span>, <span class="hljs-number">0xA6E4BD0A</span>, <span class="hljs-number">0x16CAADDC</span>, <span class="hljs-number">0x13CD6F0C</span>, <span class="hljs-number">0x1A75D936</span> };<br>ut32 k[<span class="hljs-number">4</span>] = { <span class="hljs-number">0x03020100</span>, <span class="hljs-number">0x07060504</span>, <span class="hljs-number">0x0B0A0908</span>, <span class="hljs-number">0x0F0E0D0C</span> };<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i += <span class="hljs-number">2</span>) {<br>XTea_Decrypt(m + i, k,<span class="hljs-number">2</span>&lt;&lt;(i/<span class="hljs-number">2</span>)); <span class="hljs-comment">//多调试几遍看轮数是如何生成的</span><br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) {<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"0x%x ,"</span>, m[i]);<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><code>RE-Feistel</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">tb=[<span class="hljs-number">0x04050607</span>, <span class="hljs-number">0x00010203</span>, <span class="hljs-number">0x0C0D0E0F</span>, <span class="hljs-number">0x08090A0B</span>, <span class="hljs-number">0xCD3FE81B</span>, <span class="hljs-number">0xD7C45477</span>, <span class="hljs-number">0x9F3E9236</span>, <span class="hljs-number">0x0107F187</span>, <span class="hljs-number">0xF993CB81</span>, <span class="hljs-number">0xBF74166C</span>, <span class="hljs-number">0xDA198427</span>, <span class="hljs-number">0x1A05ABFF</span>, <span class="hljs-number">0x9307E5E4</span>, <span class="hljs-number">0xCB8B0E45</span>, <span class="hljs-number">0x306DF7F5</span>, <span class="hljs-number">0xAD300197</span>, <span class="hljs-number">0xAA86B056</span>, <span class="hljs-number">0x449263BA</span>, <span class="hljs-number">0x3FA4401B</span>, <span class="hljs-number">0x1E41F917</span>, <span class="hljs-number">0xC6CB1E7D</span>, <span class="hljs-number">0x18EB0D7A</span>, <span class="hljs-number">0xD4EC4800</span>, <span class="hljs-number">0xB486F92B</span>, <span class="hljs-number">0x8737F9F3</span>, <span class="hljs-number">0x765E3D25</span>, <span class="hljs-number">0xDB3D3537</span>, <span class="hljs-number">0xEE44552B</span>, <span class="hljs-number">0x11D0C94C</span>, <span class="hljs-number">0x9B605BCB</span>, <span class="hljs-number">0x903B98B3</span>, <span class="hljs-number">0x24C2EEA3</span>, <span class="hljs-number">0x896E10A2</span>, <span class="hljs-number">0x2247F0C0</span>, <span class="hljs-number">0xB84E5CAA</span>, <span class="hljs-number">0x8D2C04F0</span>, <span class="hljs-number">0x3BC7842C</span>, <span class="hljs-number">0x1A50D606</span>, <span class="hljs-number">0x49A1917C</span>, <span class="hljs-number">0x7E1CB50C</span>, <span class="hljs-number">0xFC27B826</span>, <span class="hljs-number">0x5FDDDFBC</span>, <span class="hljs-number">0xDE0FC404</span>,<span class="hljs-number">0x0B2B30907</span>]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rol</span>(<span class="hljs-params">n,m</span>):</span><br>    <span class="hljs-keyword">return</span> ((n&lt;&lt;m)&amp;<span class="hljs-number">0xffffffff</span>)|((n&gt;&gt;(<span class="hljs-number">32</span>-m))&amp;<span class="hljs-number">0xffffffff</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ror</span>(<span class="hljs-params">n,m</span>):</span><br>    <span class="hljs-keyword">return</span> ((n&gt;&gt;m)&amp;<span class="hljs-number">0xffffffff</span>)|((n&lt;&lt;(<span class="hljs-number">32</span>-m))&amp;<span class="hljs-number">0xffffffff</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">44</span>):<br>        a,b=(rol(a,<span class="hljs-number">1</span>)&amp;rol(a,<span class="hljs-number">8</span>))^rol(a,<span class="hljs-number">2</span>)^b^tb[i],a<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(a), <span class="hljs-built_in">hex</span>(b))<br>    a,b=b,a<br>    <span class="hljs-keyword">return</span> a,b<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode</span>(<span class="hljs-params">a,b</span>):</span><br>    a,b=b,a<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">43</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        a,b=b,a^(rol(b,<span class="hljs-number">1</span>)&amp;rol(b,<span class="hljs-number">8</span>))^rol(b,<span class="hljs-number">2</span>)^tb[i]<br>    <span class="hljs-keyword">return</span> a,b<br><br>c=[<span class="hljs-number">0xe71f5179</span> ,<span class="hljs-number">0xb55f9204</span> ,<span class="hljs-number">0x722d4a3a</span> ,<span class="hljs-number">0x238e8b65</span> ,<span class="hljs-number">0x4385e0f2</span> ,<span class="hljs-number">0x6703757a</span> ,<span class="hljs-number">0xaabe9be3</span> ,<span class="hljs-number">0x4de4253b</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(c),<span class="hljs-number">2</span>):<br>    a=c[i]<br>    b=c[i+<span class="hljs-number">1</span>]<br>    a,b=decode(a,b)<br>    <span class="hljs-built_in">print</span>((<span class="hljs-built_in">int</span>.to_bytes(a,<span class="hljs-number">4</span>,<span class="hljs-string">'big'</span>)+<span class="hljs-built_in">int</span>.to_bytes(b,<span class="hljs-number">4</span>,<span class="hljs-string">'big'</span>)).decode(),end=<span class="hljs-string">''</span>)<br><br><span class="hljs-comment">#*CTF{mM7pJIobsCTQPO6R0g-L8kFExhYuivBN}</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>出题人: 很抱歉所有玩家通过对原始汇编代码的动态调试和静态分析解决了这个挑战。因为我的隐藏逻辑代码很短。太糟了。</p></blockquote><p>预期: 首先，转储段SFI和SFI_data。然后，您通过脚本代码修改二进制文件。您需要恢复堆栈、寄存器和指令调用、ret 等。</p><blockquote><p>这，确实自动化逆向工具和ipython的运用还不到位，暂时不会写。😔😔😔</p></blockquote><h2 id="jump">jump</h2><p>tip：<code>setjmp/longjmp</code></p><h3 id="硬逆">硬逆</h3><blockquote><p>逆出流程的时候有点晚了，没看懂逻辑，肝不动了。。。</p></blockquote><p>无符号，控制流不清晰，逻辑比较乱的，看一下数据段的信息准备动调。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220418163622494.png" alt="image-20220418163622494"></p><p>密文是34位，并且第一个函数就是输入。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">input=<span class="hljs-string">"01234567abcdefghijklmnopqrstuvwxyz"</span> <span class="hljs-comment">//测试输入的长度有问题 结合下文分析应为32位</span><br></code></pre></td></tr></tbody></table></figure><p>之后进入进入<code>sub_46a4c0</code>函数，a1明显是一个结构体，可以通过调试信息定义一下。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220418164403230.png" alt="image-20220418164403230"></p><blockquote><p>原本猜测为虚拟机,但后来发现这是保存上下文的操作，结合调试信息定义结构体存放数据，若了解<code>setjmp/longjmp</code>直接改参数为jmpbuf结构体即可。</p></blockquote><p>直接按照setjmp函数的参数进行修复，大致如下。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220418172303587.png" alt="image-20220418172303587"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//env 结构体是全局变量</span><br><span class="hljs-function">Int <span class="hljs-title">setjmp</span><span class="hljs-params">(jmp_buf  env)</span></span>;<br>       <span class="hljs-comment">//返回值：若直接调用则返回0，若从longjmp调用返回则返回longjmp中的val值</span><br><span class="hljs-function">Void <span class="hljs-title">longjmp</span><span class="hljs-params">(jmp_buf env,<span class="hljs-keyword">int</span> val)</span></span>;<br>       <span class="hljs-comment">//调用此函数则返回到语句setjmp所在的地方，其中env 就是setjmp中的 env，而val 则是使setjmp的返回值变为val。</span><br>   <span class="hljs-comment">//跳到call setjmp之后的汇编语句，处理eax中的返回值之前。</span><br><span class="hljs-comment">//可用此来实现异常处理</span><br></code></pre></td></tr></tbody></table></figure><p>那么<code>sub_401D45</code>函数则是<code>longjmp</code>。</p><p>在函数sub_402689中实现加密操作。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220418181345932.png" alt="image-20220418181345932"></p><p>其中longjmp与外层函数的交互，依次将处理后输入字符循环左移。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220418181815197.png" alt="image-20220418181815197"></p><p>内存中如下</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220418182740692.png" alt="image-20220418182740692"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">var=<span class="hljs-number">0</span><span class="hljs-comment">//2 '01234567abcdefghijklmnopqrstuvwxyz'3</span><br>var=<span class="hljs-number">1</span><span class="hljs-comment">//'01234567abcdefghijklmnopqrstuvwxyz' 3 2</span><br>var=<span class="hljs-number">2</span><span class="hljs-comment">//'1234567abcdefghijklmnopqrstuvwxyz' 3 2 '0'</span><br>var=<span class="hljs-number">3</span><span class="hljs-comment">//'234567abcdefghijklmnopqrstuvwxyz' 3 2 '01'</span><br>...<br>var=<span class="hljs-number">34</span> <span class="hljs-comment">//'z' 3 2 '01234567abcdefghijklmnopqrstuvwxy'</span><br></code></pre></td></tr></tbody></table></figure><p>生成了一系列的<code>tmp_str</code>数组，接着进入<code>sub_401F62</code>函数进行处理。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220419101201529.png" alt="image-20220419101201529"></p><blockquote><p>该函数是对str_arr中的字符串组进行升序的快速排序，=.= 当时没认出来。第一个字符从小到大。</p></blockquote><p>之后又按照类似操作循环取字符，每次取str_arr[i][0x21]。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220418204032667.png" alt="image-20220418204032667"></p><p>内层通过<code>jmp_buf</code>变量env来保持上下文。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220418210002030.png" alt="image-20220418210002030"></p><p>循环0x22次获取enc，最后<code>longjmp(env,0x23)</code>调到check函数的比对处,相等则返回并输出,加密算法和测试数据如下。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">testinput=<span class="hljs-string">'01234567abcdefghijklmnopqrstuvwxyz'</span><br>testoutput=[<span class="hljs-number">0x79</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x76</span>]<br>s=<span class="hljs-built_in">list</span>(<span class="hljs-string">'\x02'</span>+<span class="hljs-string">'01234567abcdefghijklmnopqrstuvwxyz'</span>+<span class="hljs-string">'\x03'</span>)<br>s=[<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s]<br>str_arr=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x22</span>):<br>    str_arr.append(s[i:]+s[<span class="hljs-number">0</span>:i])<br><span class="hljs-comment">#qsort(str_arr) 有快速排序 不过本次输入体现不出 因为本身就是有序的</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x22</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(str_arr[i][<span class="hljs-number">0x21</span>]),end=<span class="hljs-string">' '</span>)<br><span class="hljs-comment">#如果输入是34位那么补充后变成36位会丢位，所以正确输入应该是32位,移位排序后取出最后一位。</span><br></code></pre></td></tr></tbody></table></figure><p><code>exp</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br>enc=[<span class="hljs-number">0x03</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x6B</span>]<br>c=copy.deepcopy(enc)<br>c.sort()<span class="hljs-comment">#排序就能获得第一列数据,已知最后一列数据</span><br><span class="hljs-comment">#因为是 2和3中间包含输入 所以如果排序后首位为3 那么末尾为他前一个数据，从右向左复原数据。</span><br>m=[<span class="hljs-number">0</span>]*<span class="hljs-number">34</span><br>m[<span class="hljs-number">0</span>]=<span class="hljs-number">2</span><br>m[-<span class="hljs-number">1</span>]=<span class="hljs-number">3</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x20</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    p=c.index(m[i+<span class="hljs-number">1</span>])<br>    m[i]=enc[p]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(m))<br><span class="hljs-comment">#*CTF{cwNG1paBu=6Vn2kxSCqm+_4LETvFRZDj}</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>这次的测试输入和算法识别上失误有点大，去符号猜的函数有点偏差，C的基础确实薄弱了点，没识别setjmp和longjmp。</p></blockquote><h3 id="符号恢复">符号恢复</h3><blockquote><p>可以使用<a href="https://github.com/aliyunav/Finger">Finger - 符号恢复-github</a>来恢复库函数符号，真脚本小子的福利，基本上常用库函数都被复原了,分析直接上高速。</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220419163311164.png" alt="image-20220419163311164"></p><p>恢复了一些库函数的符号，增加了程序的可读性，同时调试时也可以快速判断一些处理。</p><h2 id="end">end</h2><blockquote><p>唯有自信和坚持，才能得到自己想要的结果。👏👏👏</p></blockquote><p><a href="https://www.52pojie.cn/thread-1623713-1-1.html#42357189_jump">zsky师傅的blog-*CTF - RE</a></p><p><a href="https://blog.csdn.net/chenyiming_1990/article/details/8683413">setjmp和longjmp函数使用详解 - CSDN</a></p><p><a href="https://blog.csdn.net/origin_lee/article/details/45057507">setjmp/longjmp非局部跳转函数分析 - jmp_buf结构体</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF-WP</category>
      
      <category>RE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Native Reverse(...ing)</title>
    <link href="/2022/04/04/Android%20native%20%E9%80%86%E5%90%91/"/>
    <url>/2022/04/04/Android%20native%20%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h1>Android native 逆向</h1><h2 id="前置知识">前置知识</h2><p><code>NDK</code></p><p>NDK 即 Native Development Kit，是 Android 中的一个开发工具包，使您能够在 Android 应用中使用 C 和 C++ 代码。</p><p>使用NDK可以快速开发 C、 C++ 的动态库，并自动将 so 和应用一起打包成 APK。即可通过 NDK使 Java 与 Native 代码（如 C、C++）交互。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/20200924220730991.png" alt="在这里插入图片描述"></p><p><code>JNI</code></p><p>JNI 即 Java Native Interface，是一种编程框架，使得 Java 虚拟机中的 Java 程序可以调用本地应用或库，也可以被其他程序调用。 本地程序一般是用其它语言（C、C++ 或汇编语言等）编写的，并且被编译为基于本机硬件和操作系统的程序</p><p>使用JNI 首先要声明native方法，之后实现native方法，并生成so文件，最终加载so文件，调用native方法。</p><blockquote><p>JNI 是一个编程框架，是一个抽象的东西，NDK 是一个工具包</p></blockquote><p><code>ABI</code></p><p>ABI 即 Application Binary Interface。我们上面说了，每个CPU系统只能使用相对应的二进制文件，不同的 Android 设备使用不同的 CPU，而不同的 CPU 支持不同的指令集。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220331174010239.png" alt="image-20220331174010239"></p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220403183650728.png" alt="image-20220403183650728"></p><p><strong>在 Android 手机上安装一个应用时，只有手机CPU架构支持的ABI架构对应的.so文件会被安装。如果支持多个ABI架构，会按照优先级进行安装。x86架构的模拟器也能运行arm的程序是因为其中间对so文件进行了转换，所以在调试或者是用frida hook 时会因此出现不匹配或找不到的问题。</strong></p><h2 id="JNI方法的使用">JNI方法的使用</h2><h3 id="静态注册">静态注册</h3><p>native 层的方法名为：<strong>Java_&lt;包名&gt;*&lt;类名&gt;*&lt;方法名&gt;（__&lt;参数&gt;）</strong></p><p>linux: mkdir -p jni/com/example/task</p><p>注册步骤如下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.task; <span class="hljs-comment">//包名</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>{<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">func</span><span class="hljs-params">(String a)</span></span>; <br>    <span class="hljs-comment">//只有当 native 方法出现需要重载的时候，native 层的方法名后才需要跟上参数</span><br><br>}<br><span class="hljs-comment">//java层 native 方法声明 通常在一个类中</span><br></code></pre></td></tr></tbody></table></figure><p>在<code>xxxx/jni/com/example/task</code>目录下编译java文件</p><p>javac 编译<code>test.java</code>文件生成<code>test.class</code></p><p>进入到 <code> xxx/jni</code> 目录下使用命令：  <strong>javah com.example.task.test</strong> 会生成 com_example_task_test.h 文件，内容如下。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;jni.h&gt;</span></span><br><span class="hljs-comment">/* Header for class com_example_task_test */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _Included_com_example_task_test</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _Included_com_example_task_test</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">"C"</span> {<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Class:     com_example_task_test</span><br><span class="hljs-comment"> * Method:    init</span><br><span class="hljs-comment"> * Signature: ()V</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">JNIEXPORT <span class="hljs-keyword">void</span> JNICALL <span class="hljs-title">Java_com_example_task_test_init</span> </span><br><span class="hljs-function">  <span class="hljs-params">(JNIEnv *, jobject)</span></span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Class:     com_example_task_test</span><br><span class="hljs-comment"> * Method:    func</span><br><span class="hljs-comment"> * Signature: (I)V</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">JNIEXPORT <span class="hljs-keyword">void</span> JNICALL <span class="hljs-title">Java_com_example_task_test_func__I</span></span><br><span class="hljs-function">  <span class="hljs-params">(JNIEnv *, jobject, jint)</span></span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Class:     com_example_task_test</span><br><span class="hljs-comment"> * Method:    func</span><br><span class="hljs-comment"> * Signature: (Ljava/lang/String;)Z</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">JNIEXPORT jboolean JNICALL <span class="hljs-title">Java_com_example_task_test_func__Ljava_lang_String_2</span></span><br><span class="hljs-function">  <span class="hljs-params">(JNIEnv *, jobject, jstring)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> __cplusplus</span><br>}<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>可以观察 函数是 java_包名_类名_函数名 参数是 <strong>JNIEnv</strong>* 和 <strong>jobject</strong> + 额外参数</p></blockquote><p>将<code>com_example_task_test.h</code> 修改为<code>Myjni.h</code> 或其他 按照自己喜好👨‍💻。</p><p>此时我们只拿到了在java中声明的native函数，还没有给出函数体，故下一步是通过c/c++完善函数并编译出so文件。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"MyJni.h"</span> <span class="hljs-comment">//导入修改后的头文件 编写函数实体</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br>JNIEXPORT jboolean JNICALL Java_com_example_task_test_func__Ljava_lang_String_2 <span class="hljs-comment">//头文件中声明的native函数</span><br>  (JNIEnv *, jobject, jstring){<br>         <span class="hljs-keyword">char</span> *cstr=(<span class="hljs-keyword">char</span> *)(*env)-&gt;GetStringUTFChars(env,jstr,<span class="hljs-literal">NULL</span>); <span class="hljs-comment">//获取传入的字符</span><br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>,cstr);<br>}<br>....<br></code></pre></td></tr></tbody></table></figure><p>之后通过gcc 编译<code>MyJni.c</code>生成so文件</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">gcc -fPIC -shared -o libMyJni.so MyJni.c -I xxxx/include<br></code></pre></td></tr></tbody></table></figure><blockquote><p>-I  xxxx/include 指定头文件搜索目录，xxx为jdk的安装路径，要用到Jni.h文件 ， 并且输出so文件必须以lib开头</p></blockquote><p>如果要想实例运行，<code>test.java</code>中需要调用so文件,如下。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.task; <span class="hljs-comment">//包名</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>{<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">func</span><span class="hljs-params">(String a)</span></span>; <br>    <span class="hljs-comment">//只有当 native 方法出现需要重载的时候，native 层的方法名后才需要跟上参数</span><br>    <span class="hljs-keyword">static</span>{<br>            System.loadLibrary(<span class="hljs-string">"MyJni"</span>); <span class="hljs-comment">//加载so文件</span><br>    }<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] argv)</span></span>{ <span class="hljs-comment">//主函数</span><br>                System.out.println(<span class="hljs-string">"hello"</span>);<br>                <span class="hljs-keyword">new</span> test().func(<span class="hljs-string">"jni callback!"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>完成上述步骤后可通过 <strong>java -Djava.library.path=xxx/jni/com/example/task/ com.example.task.test</strong>进行运行测试。</p><p>上述是静态注册的方法，静态注册的函数名都按照<code>java_包名_类名_方法名</code>的格式来命名，长度比较长，并且类名或包名修改后还要重复上述步骤生成新的so文件。</p><h3 id="动态注册">动态注册</h3><p>动态注册需要将native方法构造成JNINativeMethod数组，JNINativeMethod结构体定义如下。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">typedef struct {<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* name; <span class="hljs-comment">// Java层native方法名称</span><br><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* signature; <span class="hljs-comment">// 方法签名</span><br><br>    <span class="hljs-keyword">void</span>*       fnPtr; <span class="hljs-comment">// native层方法指针</span><br>} JNINativeMethod;<br></code></pre></td></tr></tbody></table></figure><p><strong>之后需要重写JNI_OnLoad函数，该函数会在 System.loadLibrary加载完so文件后被调用，在其中完成动态注册。</strong></p><p>一个MyJni.c的结构如下。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">#include&lt;jni.h&gt;<br>#include&lt;stdio.h&gt;<br><span class="hljs-keyword">static</span> JNINativeMethod methods[] = {      <span class="hljs-comment">//JNINativeMethod数组 每一项的值 包括 name sign 和 函数指针</span><br>        {<span class="hljs-string">"init"</span>, <span class="hljs-string">"()V"</span>, (<span class="hljs-keyword">void</span> *)c_init1},<br>        {<span class="hljs-string">"init"</span>, <span class="hljs-string">"(I)V"</span>, (<span class="hljs-keyword">void</span> *)c_init2},<br>        {<span class="hljs-string">"init"</span>, <span class="hljs-string">"(Ljava/lang/String;)Z"</span>, (<span class="hljs-keyword">void</span> *)c_init3},<br>        {<span class="hljs-string">"update"</span>, <span class="hljs-string">"()V"</span>, (<span class="hljs-keyword">void</span> *)c_update},<br>    .....<br>};<br><br>JNIEXPORT jint JNICALL  <span class="hljs-comment">//JNIEXPORT</span><br>JNI_OnLoad(JavaVM* vm, <span class="hljs-keyword">void</span>* reserved) { <span class="hljs-comment">//注意参数 JavaVM* vm 和 void* reserved </span><br>    JNIEnv *env = NULL;<br>    jint result = -<span class="hljs-number">1</span>;<br> <br>    <span class="hljs-comment">// 获取JNI env变量</span><br>    <span class="hljs-keyword">if</span> (vm-&gt;GetEnv((<span class="hljs-keyword">void</span>**) &amp;env, JNI_VERSION_1_6) != JNI_OK) {<br>        <span class="hljs-comment">// 失败返回-1</span><br>        <span class="hljs-keyword">return</span> result;<br>    }<br> <br>    <span class="hljs-comment">// 获取native方法所在类</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* className = <span class="hljs-string">"com/example/ndk/NativeTest"</span>;<br>    jclass clazz = env-&gt;FindClass(className);<br>    <span class="hljs-keyword">if</span> (clazz == NULL) {<br>        <span class="hljs-keyword">return</span> result;<br>    }<br> <br>    <span class="hljs-comment">// 动态注册native方法</span><br>    <span class="hljs-keyword">if</span> (env-&gt;RegisterNatives(clazz, methods, sizeof(methods) / sizeof(methods[<span class="hljs-number">0</span>])) &lt; <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">return</span> result;<br>    }<br> <br>    <span class="hljs-comment">// 返回成功</span><br>    result = JNI_VERSION_1_6;<br>    <span class="hljs-keyword">return</span> result;<br>}<br><br>extern <span class="hljs-string">"C"</span> <span class="hljs-function">JNIEXPORT <span class="hljs-keyword">void</span> JNICALL</span><br><span class="hljs-function"><span class="hljs-title">c_init1</span><span class="hljs-params">(JNIEnv *env, jobject thiz)</span> </span>{<br>    <span class="hljs-comment">//  函数实体</span><br>}<br>...........<br><br></code></pre></td></tr></tbody></table></figure><p>因为<code>JNI_OnLoad</code>是导出函数，所以IDA在exports中可以找到。</p><p>其中，主要用RegisterNatives解析</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">jint <span class="hljs-title">RegisterNatives</span><span class="hljs-params">(jclass clazz, <span class="hljs-keyword">const</span> JNINativeMethod* methods, jint nMethods)</span><span class="hljs-comment">//参数依次是 native所在类 函数数组 和 函数个数</span></span><br><span class="hljs-function"><span class="hljs-comment">//注册成功则返回 0,失败则返回一个负值</span></span><br></code></pre></td></tr></tbody></table></figure><p>上述只是对JNI编程结构有一定的了解，如果要深入的话还要系统学习一下Android开发和java等😔。</p><h2 id="libxxx-so文件函数修复">libxxx.so文件函数修复</h2><p>👀易忽略点：so文件是一个elf格式的文件，在so被加载之前，会执行init段的代码,在结束的时候，会执行fini段的代码。所以在init_array中可能会有smc数据解密的代码，往往存在着数据解密。</p><blockquote><p>静态注册的native函数因为命名规范很容易识别，所以难点在动态注册的函数。</p></blockquote><p>jadx中查看native声明，并且之后会调用check函数。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220401003254289.png" alt="image-20220401003254289"></p><p>打开lib.so文件，其中native的check函数通过动态注册，因为导出表中无xxxx_check函数。可见JNI_OnLoad函数本身的参数是正确的，但是其中的局部变量类型却不正确😭。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220331230040806.png" alt="image-20220331230040806"></p><p>根据上文所述动态注册的步骤(获取JNI的env变量，获取包含native的类，通过RegisterNatives和method数组来动态注册)，调整变量修复函数。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">jint <span class="hljs-title">JNI_OnLoad</span><span class="hljs-params">(JavaVM *vm, <span class="hljs-keyword">void</span> *reserved)</span></span><br><span class="hljs-function"></span>{<br>  jint v3; <span class="hljs-comment">// w19</span><br>  JNIEnv *v5; <span class="hljs-comment">// x20</span><br>  jclass v6; <span class="hljs-comment">// x0</span><br>  JNIEnv *v7[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [xsp+0h] [xbp-30h] BYREF</span><br><br>  v3 = <span class="hljs-number">65542</span>;<br>  v7[<span class="hljs-number">1</span>] = *(JNIEnv **)(_ReadStatusReg(ARM64_SYSREG(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">13</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>)) + <span class="hljs-number">40</span>);<br>  v7[<span class="hljs-number">0</span>] = <span class="hljs-number">0LL</span>;<br>  sub_1724();                                   <span class="hljs-comment">// 反调试</span><br>  <span class="hljs-keyword">if</span> ( (*vm)-&gt;GetEnv(vm, (<span class="hljs-keyword">void</span> **)v7, <span class="hljs-number">65542LL</span>) )<span class="hljs-comment">// 通过vm获取JNI env变量存到v7</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  v5 = v7[<span class="hljs-number">0</span>];<br>  v6 = (*v7[<span class="hljs-number">0</span>])-&gt;FindClass(v7[<span class="hljs-number">0</span>], class_name);  <span class="hljs-comment">// com/test/hufu22/TestActivity</span><br>  <span class="hljs-keyword">if</span> ( !v6<br>    || (((__int64 (__fastcall *)(JNIEnv *, jclass, <span class="hljs-keyword">char</span> **, __int64))(*v5)-&gt;RegisterNatives)(v5, v6, &amp;method, <span class="hljs-number">1LL</span>) &amp; <span class="hljs-number">0x80000000</span>) != <span class="hljs-number">0</span> )<br>  {<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;                                  <span class="hljs-comment">// 动态注册了一个函数 并且在TestActivity类中的调用</span><br>  }<br>  <span class="hljs-keyword">return</span> v3;<br>}<br></code></pre></td></tr></tbody></table></figure><p>修改之后，即可直观看出是对一个函数进行了动态注册，跟进method变量，观察其3个值，是经过smc修改的，手动修一下，如下。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220331231932296.png" alt="image-20220331231932296"></p><p><strong>动态注册的check函数已经找到，接下来就要逆向分析函数逻辑，不过在此之前，.init_array的内容需要解决，因为本题中发现其中存在解密代码，对一些静态数据进行了修改。</strong></p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220331234953540.png" alt="image-20220331234953540"></p><p>根据jadx中check函数的参数和JNI函数的结构修复check函数。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220403203347019.png" alt="image-20220403203347019"></p><blockquote><p>对于Init段存在字符解密的so文件，可以用frida hook dump出so，这样拿到就是字符串解密后的so文件，可惜👦手上没有root机，暂且硬怼。</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220403210636506.png" alt="image-20220403210636506"></p><p>首先对传入字符进行base64解密，解密函数也是通过索引表映射来实现的，打印出索引表，b64表被修改，这和RE2 shellcode中所用函数一致。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[...] <span class="hljs-comment">#删除末尾重复0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(a.index(i)),end=<span class="hljs-string">''</span>)<br><span class="hljs-comment">#zTsI01htNUF/VoE4uQnpyA9bCqD53fgiBd6GXcKHLjJv7Pm2rSkMlxwW8OeRZa+Y</span><br></code></pre></td></tr></tbody></table></figure><p>之后进入第一个处理函数，<code>pre_getstr</code>通过交叉引用知是java层调用prenative函数传入的字符串，分析知该函数为AES128的秘钥扩展。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220403210433884.png" alt="image-20220403210433884"></p><p>不过这里的sbox经过换表了，接下来是<code>sub_2DE8</code>函数，是AES的加密主体。由控制流程图知，他在进行加密的时候没有用循环，代码复用导致函数比较大，比较难读。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220403224816348.png" alt="image-20220403224816348"></p><p>类似这种块主要进行轮秘钥加和行位移，之后<code>sub_2668</code>执行列混淆，用到了一个数组</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220404000101335.png" alt="image-20220404000101335"></p><p>通过<code>IDAPYTHON</code> dump出数组，根据数组去github上搜一下，找到了类似符号的源码<a href="https://github.com/microsoft/LWE_Library/blob/master/src/aes/aes_c.c">aes_c.c - github</a>,这段逻辑也主要用于列混淆中。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s1=[<span class="hljs-number">0x00</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x0a</span>,<span class="hljs-number">0x0c</span>,<span class="hljs-number">0x0e</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x16</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0x1a</span>,<span class="hljs-number">0x1c</span>,<span class="hljs-number">0x1e</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x22</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x2a</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x2e</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x36</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x3e</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x4a</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0x4e</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x5a</span>,<span class="hljs-number">0x5c</span>,<span class="hljs-number">0x5e</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x6a</span>,<span class="hljs-number">0x6c</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x76</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x7a</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x7e</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0x86</span>,<span class="hljs-number">0x88</span>,<span class="hljs-number">0x8a</span>,<span class="hljs-number">0x8c</span>,<span class="hljs-number">0x8e</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x92</span>,<span class="hljs-number">0x94</span>,<span class="hljs-number">0x96</span>,<span class="hljs-number">0x98</span>,<span class="hljs-number">0x9a</span>,<span class="hljs-number">0x9c</span>,<span class="hljs-number">0x9e</span>,<span class="hljs-number">0xa0</span>,<span class="hljs-number">0xa2</span>,<span class="hljs-number">0xa4</span>,<span class="hljs-number">0xa6</span>,<span class="hljs-number">0xa8</span>,<span class="hljs-number">0xaa</span>,<span class="hljs-number">0xac</span>,<span class="hljs-number">0xae</span>,<span class="hljs-number">0xb0</span>,<span class="hljs-number">0xb2</span>,<span class="hljs-number">0xb4</span>,<span class="hljs-number">0xb6</span>,<span class="hljs-number">0xb8</span>,<span class="hljs-number">0xba</span>,<span class="hljs-number">0xbc</span>,<span class="hljs-number">0xbe</span>,<span class="hljs-number">0xc0</span>,<span class="hljs-number">0xc2</span>,<span class="hljs-number">0xc4</span>,<span class="hljs-number">0xc6</span>,<span class="hljs-number">0xc8</span>,<span class="hljs-number">0xca</span>,<span class="hljs-number">0xcc</span>,<span class="hljs-number">0xce</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd4</span>,<span class="hljs-number">0xd6</span>,<span class="hljs-number">0xd8</span>,<span class="hljs-number">0xda</span>,<span class="hljs-number">0xdc</span>,<span class="hljs-number">0xde</span>,<span class="hljs-number">0xe0</span>,<span class="hljs-number">0xe2</span>,<span class="hljs-number">0xe4</span>,<span class="hljs-number">0xe6</span>,<span class="hljs-number">0xe8</span>,<span class="hljs-number">0xea</span>,<span class="hljs-number">0xec</span>,<span class="hljs-number">0xee</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-number">0xf2</span>,<span class="hljs-number">0xf4</span>,<span class="hljs-number">0xf6</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-number">0xfa</span>,<span class="hljs-number">0xfc</span>,<span class="hljs-number">0xfe</span>,<span class="hljs-number">0x1b</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0x0b</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x0f</span>,<span class="hljs-number">0x0d</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x3b</span>,<span class="hljs-number">0x39</span>,<span class="hljs-number">0x3f</span>,<span class="hljs-number">0x3d</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x37</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x2b</span>,<span class="hljs-number">0x29</span>,<span class="hljs-number">0x2f</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x27</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0x5b</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x5d</span>,<span class="hljs-number">0x53</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x4b</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x4f</span>,<span class="hljs-number">0x4d</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x7f</span>,<span class="hljs-number">0x7d</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x71</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x6d</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x9b</span>,<span class="hljs-number">0x99</span>,<span class="hljs-number">0x9f</span>,<span class="hljs-number">0x9d</span>,<span class="hljs-number">0x93</span>,<span class="hljs-number">0x91</span>,<span class="hljs-number">0x97</span>,<span class="hljs-number">0x95</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x89</span>,<span class="hljs-number">0x8f</span>,<span class="hljs-number">0x8d</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x87</span>,<span class="hljs-number">0x85</span>,<span class="hljs-number">0xbb</span>,<span class="hljs-number">0xb9</span>,<span class="hljs-number">0xbf</span>,<span class="hljs-number">0xbd</span>,<span class="hljs-number">0xb3</span>,<span class="hljs-number">0xb1</span>,<span class="hljs-number">0xb7</span>,<span class="hljs-number">0xb5</span>,<span class="hljs-number">0xab</span>,<span class="hljs-number">0xa9</span>,<span class="hljs-number">0xaf</span>,<span class="hljs-number">0xad</span>,<span class="hljs-number">0xa3</span>,<span class="hljs-number">0xa1</span>,<span class="hljs-number">0xa7</span>,<span class="hljs-number">0xa5</span>,<span class="hljs-number">0xdb</span>,<span class="hljs-number">0xd9</span>,<span class="hljs-number">0xdf</span>,<span class="hljs-number">0xdd</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd7</span>,<span class="hljs-number">0xd5</span>,<span class="hljs-number">0xcb</span>,<span class="hljs-number">0xc9</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xcd</span>,<span class="hljs-number">0xc3</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xc7</span>,<span class="hljs-number">0xc5</span>,<span class="hljs-number">0xfb</span>,<span class="hljs-number">0xf9</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0xfd</span>,<span class="hljs-number">0xf3</span>,<span class="hljs-number">0xf1</span>,<span class="hljs-number">0xf7</span>,<span class="hljs-number">0xf5</span>,<span class="hljs-number">0xeb</span>,<span class="hljs-number">0xe9</span>,<span class="hljs-number">0xef</span>,<span class="hljs-number">0xed</span>,<span class="hljs-number">0xe3</span>,<span class="hljs-number">0xe1</span>,<span class="hljs-number">0xe7</span>,<span class="hljs-number">0xe5</span>]<br>s2=[<span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x0c</span>,<span class="hljs-number">0x0f</span>,<span class="hljs-number">0x0a</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0x1b</span>,<span class="hljs-number">0x1e</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0x36</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x3f</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x39</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x2b</span>,<span class="hljs-number">0x2e</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x27</span>,<span class="hljs-number">0x22</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x6c</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x6a</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x7e</span>,<span class="hljs-number">0x7d</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x71</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x53</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x5c</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x5a</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x4b</span>,<span class="hljs-number">0x4e</span>,<span class="hljs-number">0x4d</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0xc0</span>,<span class="hljs-number">0xc3</span>,<span class="hljs-number">0xc6</span>,<span class="hljs-number">0xc5</span>,<span class="hljs-number">0xcc</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xca</span>,<span class="hljs-number">0xc9</span>,<span class="hljs-number">0xd8</span>,<span class="hljs-number">0xdb</span>,<span class="hljs-number">0xde</span>,<span class="hljs-number">0xdd</span>,<span class="hljs-number">0xd4</span>,<span class="hljs-number">0xd7</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-number">0xf3</span>,<span class="hljs-number">0xf6</span>,<span class="hljs-number">0xf5</span>,<span class="hljs-number">0xfc</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0xfa</span>,<span class="hljs-number">0xf9</span>,<span class="hljs-number">0xe8</span>,<span class="hljs-number">0xeb</span>,<span class="hljs-number">0xee</span>,<span class="hljs-number">0xed</span>,<span class="hljs-number">0xe4</span>,<span class="hljs-number">0xe7</span>,<span class="hljs-number">0xe2</span>,<span class="hljs-number">0xe1</span>,<span class="hljs-number">0xa0</span>,<span class="hljs-number">0xa3</span>,<span class="hljs-number">0xa6</span>,<span class="hljs-number">0xa5</span>,<span class="hljs-number">0xac</span>,<span class="hljs-number">0xaf</span>,<span class="hljs-number">0xaa</span>,<span class="hljs-number">0xa9</span>,<span class="hljs-number">0xb8</span>,<span class="hljs-number">0xbb</span>,<span class="hljs-number">0xbe</span>,<span class="hljs-number">0xbd</span>,<span class="hljs-number">0xb4</span>,<span class="hljs-number">0xb7</span>,<span class="hljs-number">0xb2</span>,<span class="hljs-number">0xb1</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x93</span>,<span class="hljs-number">0x96</span>,<span class="hljs-number">0x95</span>,<span class="hljs-number">0x9c</span>,<span class="hljs-number">0x9f</span>,<span class="hljs-number">0x9a</span>,<span class="hljs-number">0x99</span>,<span class="hljs-number">0x88</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x8e</span>,<span class="hljs-number">0x8d</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0x87</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x9b</span>,<span class="hljs-number">0x98</span>,<span class="hljs-number">0x9d</span>,<span class="hljs-number">0x9e</span>,<span class="hljs-number">0x97</span>,<span class="hljs-number">0x94</span>,<span class="hljs-number">0x91</span>,<span class="hljs-number">0x92</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x85</span>,<span class="hljs-number">0x86</span>,<span class="hljs-number">0x8f</span>,<span class="hljs-number">0x8c</span>,<span class="hljs-number">0x89</span>,<span class="hljs-number">0x8a</span>,<span class="hljs-number">0xab</span>,<span class="hljs-number">0xa8</span>,<span class="hljs-number">0xad</span>,<span class="hljs-number">0xae</span>,<span class="hljs-number">0xa7</span>,<span class="hljs-number">0xa4</span>,<span class="hljs-number">0xa1</span>,<span class="hljs-number">0xa2</span>,<span class="hljs-number">0xb3</span>,<span class="hljs-number">0xb0</span>,<span class="hljs-number">0xb5</span>,<span class="hljs-number">0xb6</span>,<span class="hljs-number">0xbf</span>,<span class="hljs-number">0xbc</span>,<span class="hljs-number">0xb9</span>,<span class="hljs-number">0xba</span>,<span class="hljs-number">0xfb</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-number">0xfd</span>,<span class="hljs-number">0xfe</span>,<span class="hljs-number">0xf7</span>,<span class="hljs-number">0xf4</span>,<span class="hljs-number">0xf1</span>,<span class="hljs-number">0xf2</span>,<span class="hljs-number">0xe3</span>,<span class="hljs-number">0xe0</span>,<span class="hljs-number">0xe5</span>,<span class="hljs-number">0xe6</span>,<span class="hljs-number">0xef</span>,<span class="hljs-number">0xec</span>,<span class="hljs-number">0xe9</span>,<span class="hljs-number">0xea</span>,<span class="hljs-number">0xcb</span>,<span class="hljs-number">0xc8</span>,<span class="hljs-number">0xcd</span>,<span class="hljs-number">0xce</span>,<span class="hljs-number">0xc7</span>,<span class="hljs-number">0xc4</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xc2</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd5</span>,<span class="hljs-number">0xd6</span>,<span class="hljs-number">0xdf</span>,<span class="hljs-number">0xdc</span>,<span class="hljs-number">0xd9</span>,<span class="hljs-number">0xda</span>,<span class="hljs-number">0x5b</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x5d</span>,<span class="hljs-number">0x5e</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x4f</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x4a</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x6d</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x76</span>,<span class="hljs-number">0x7f</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x7a</span>,<span class="hljs-number">0x3b</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x3d</span>,<span class="hljs-number">0x3e</span>,<span class="hljs-number">0x37</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x2f</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x29</span>,<span class="hljs-number">0x2a</span>,<span class="hljs-number">0x0b</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x0d</span>,<span class="hljs-number">0x0e</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0x16</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x1c</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0x1a</span>]<br></code></pre></td></tr></tbody></table></figure><p>如下图，用到了两个表来列混淆，特征比较明显，一般这种使用数组来实现的，可以在github上找到到蛛丝马迹。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220404005222022.png" alt="image-20220404005222022"></p><p>通过交叉引用和第三个参数128可知调用了9次，对应AES中间的9轮，所以上述AES单纯魔改了sbox，其余算法不变。</p><blockquote><p>到此，一个动态注册的函数分析完毕，从修复JNI和注册信息，再到定位函数逆向逻辑，最后逆向还原即可💪。</p></blockquote><p>😴至于后续如何，未完待续。。。。</p><p>参考:</p><p><a href="https://blog.csdn.net/hello_1995/article/details/109393760">NDK 入门指南</a></p><p><a href="https://blog.csdn.net/hello_1995/article/details/109393760">NDK 开发之 JNI 方法静态注册与动态注册</a></p><p><a href="https://blog.csdn.net/yangguo_2011/article/details/17379297">java jni编程详细步骤及注意细节</a></p><p><a href="https://www.programminghunter.com/article/13461090681/">Frida环境搭建-基于python3.7</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android逆向环境搭建(持续更新中...)</title>
    <link href="/2022/04/03/Android%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/04/03/Android%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1>Android逆向环境搭建</h1><blockquote><p>记录在Android 学习中工具的配置及相关环境的搭建。</p></blockquote><h2 id="Frida的安装">Frida的安装</h2><blockquote><p>过程非常的曲折，好在最终是装上了的，或许你坚持走的路，他始终就是个优雅的错误，梦醒了，还要继续走🚩。</p></blockquote><h3 id="Frida-下载">Frida 下载</h3><p>网上很多教程都是直接<code>pip install frida</code> 和<code>pip install frida-tools</code>即可，可是我在安装时却不是如此。<strong>(记得关掉梯子，否则会出错)</strong></p><blockquote><p>其实后来在装好后 学习用法的时看到很多前辈在安装时候都有强调版本问题，只能怪自己当时有点急躁，漏掉了许多细节😞。</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220401233143141.png" alt="image-20220401233143141"></p><p>这是我安装成功后用python3.10运行时的报错(部分)，其余版本也是如此，对此我测试了python3.7-3.10间的版本。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220401233315327.png" alt="image-20220401233315327"></p><p>在使用python3.8和python2.7安装时，发现其缓存中的库都是同一个版本<code>frida-15.1.17</code>这在pypi上标注是针对3.10的,然后错误是在setup.py所以是版本处理不当,不过python3.10也运行出错就有点意外。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220401234359678.png" alt="image-20220401234359678"></p><p>他这一步其实是下载了 <code>frida-15.1.17.tar.gz</code> , <a href="http://xn--setup-4n1hg0rx93at61crfxbxjr.py">并运行其中的setup.py</a> ,故可以直接在网上下载一个对应python3.7版本的frida文件 ,<a href="http://xn--setup-r96h474gtsi6t8eyyp.py">手动来运行setup.py</a>。</p><p>python3.7对应win-amd64版本  <a href="https://files.pythonhosted.org/packages/0a/4b/b191420bd34215377f72e04593619d9266d5e3e33f6cf48c8e827dcecb89/frida-12.8.20.tar.gz">frida-12.8.20.tar.gz </a> ,之后在任意目录解压，并在命令行依次运行如下指令。</p><ol><li><p><strong>python3.7 <a href="http://setup.py">setup.py</a> install</strong></p><p>该步过后会在Python37\Lib\site-packages 目录下生成frida-12.8.20-py3.7-win-amd64.egg，在运行的最后一步可能需要等待一段时间。</p><p>之后不要再去pip install frida ，接着去安装 frida-tools，不过直接pip 也会有报错。</p></li><li><p><strong>pip3.7 install  frida-tools==7.2.1</strong></p></li></ol><p>​指定frida-tools的版本为7.2.1，接着等待一段时间，出现success就算成功。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220402000244440.png" alt="image-20220402000244440"></p><p>之后安装frida-server 版本要和frida一致 <code>frida --version</code> ，到<a href="https://github.com/frida/frida/releases?page=8">frida-github</a>安装对应版本的server。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220403004209807.png" alt="image-20220403004209807"></p><blockquote><p>adb shell getprop ro.product.cpu.abi   查看手机cpu版本下载对应的server架构</p></blockquote><p>下载解压后，将文件重命名为 <code>frida-server</code> ，或者加上对应的架构，<strong>夜神模拟器的话选Android-x86</strong>。</p><h3 id="adb调试环境">adb调试环境</h3><p>首先进入夜神模拟器的bin目录，打开终端。</p><ol><li>nox_adb.exe connect 127.0.0.1:62001 模拟器连到62001这个端口上</li><li>在非夜神bin目录的终端下 运行 adb connect 127.0.0.1:62001</li><li>adb devices 检测是否连接</li></ol><blockquote><p>如果其中出现不匹配的问题，就到Android_SDK目录下把adb.exe复制到夜神模拟器的bin目录，重命名为nox_adb.exe之后再进行上述步骤。</p></blockquote><p>配置好夜神后，将<code>frida-server</code>传到其<code>\data\local\tmp</code>目录下，修改权限并运行。</p><ol><li><strong>adb push ./frida-server /data/local/tmp</strong></li><li><strong>adb shell</strong></li><li><strong>cd data/local/tmp</strong></li><li><strong>chmod 777 frida-server</strong></li><li><strong>./frida-server</strong></li><li><strong>adb tcp:27042 tcp:27042 进行端口转发</strong></li></ol><p>夜神模拟器中打开一个app程序，在主机上通过<code>frida-ps -U</code>查看USB调试进程，发现自己启动的程序包即为成功😃。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220403004501603.png" alt="image-20220403004501603"></p><p>使用<code>firda</code>hook包，<strong>frida-trace -i “open” -U com.test.hufu22</strong>。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220403104658735.png" alt="image-20220403104658735"></p><blockquote><p>当然基于frida的使用还有待进一步的学习，使用夜神模拟器等也只能是正对程序中带了x86的so文件才能进行IDA调试和Frida hook，要想用于实战必须要配备root机。</p></blockquote><p>最终简介一下:frida是一款基于python + javascript 的hook框架，可运行在android、ios、linux、winosx等各平台，主要使用动态二进制插桩技术。</p><h3 id="Objection安装">Objection安装</h3><p>objection是一个基于Frida开发的命令行工具，它可以很方便的Hook Java函数和类，并输出参数，调用栈。其git地址为<a href="https://github.com/sensepost/objection/releases?page=2">objection-github-release</a>。</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs cmd">frida --version #打印frida版本  <span class="hljs-number">12</span>.<span class="hljs-number">11</span>.<span class="hljs-number">18</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>安装对版本也又要求，如果frida安装的是12.11.18 ，那么安装的版本在1.8.4 ~ 1.9.0左右，更多可以根据frida版本的发行时间去objection找靠后一点的版本。</p></blockquote><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip3.<span class="hljs-number">7</span> install objection==<span class="hljs-number">1</span>.<span class="hljs-number">9</span>.<span class="hljs-number">0</span> #直接指定相应版本即可<br></code></pre></td></tr></tbody></table></figure><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220403195842070.png" alt="image-20220403195842070"></p><p><a href="https://chowdera.com/2021/09/20210926150657751D.html">frida install and 夜神模拟器</a></p><p><a href="https://www.cxybb.com/article/freeking101/106965168">Android逆向-firda Hook 框架</a></p><p><a href="https://www.codeleading.com/article/77291460162/">Python-HOOK神器-Frida学习</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RE_Challenge</title>
    <link href="/2022/03/28/RE_Challenge/"/>
    <url>/2022/03/28/RE_Challenge/</url>
    
    <content type="html"><![CDATA[<blockquote><p>主要是以虎符和近期国际赛的题为主，梳理一下学到的方法和技巧。</p></blockquote><h2 id="虎符">虎符</h2><h3 id="fype">fype</h3><p>基于libbpf编写的bpf程序逆向，原理类似hook。主要分为两部分，一部分是bpf代码，一部分是用户代码。本题是<a href="https://github.com/libbpf/libbpf-bootstrap"> libbpf-bootstrap</a>结构下的uprobe模板，用于对程序内函数进行hook(或称跟踪)。</p><p><code>uprobe.bpf.c</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause</span><br><span class="hljs-comment">/* Copyright (c) 2020 Facebook */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/bpf.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/ptrace.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bpf/bpf_helpers.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bpf/bpf_tracing.h&gt;</span></span><br><br><span class="hljs-keyword">char</span> LICENSE[] SEC(<span class="hljs-string">"license"</span>) = <span class="hljs-string">"Dual BSD/GPL"</span>;<br><br>SEC(<span class="hljs-string">"uprobe/func"</span>)<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">BPF_KPROBE</span><span class="hljs-params">(uprobe, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>{<br>bpf_printk(<span class="hljs-string">"UPROBE ENTRY: a = %d, b = %d\n"</span>, a, b);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br>SEC(<span class="hljs-string">"uretprobe/func"</span>)<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">BPF_KRETPROBE</span><span class="hljs-params">(uretprobe, <span class="hljs-keyword">int</span> ret)</span></span><br><span class="hljs-function"></span>{<br>bpf_printk(<span class="hljs-string">"UPROBE EXIT: return = %d\n"</span>, ret);<br>    <span class="hljs-comment">//类似printf 把格式化字符串放入 /sys/kernel/debug/tracing/trace_pipe 文件中，需要sudo 即root权限下运行</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span class="hljs-comment">//LICENSE变量定义了BPF代码的许可证。指定许可证是强制性的，由内核强制执行。某些 BPF 功能不可用于非 GPL 兼容代码。</span><br><span class="hljs-comment">//其中uprobe/func 为进入函数 , uretprobe/func为退出函数。</span><br></code></pre></td></tr></tbody></table></figure><p>BPF程序一般需要4个步骤，即创建并打开<code>open</code>、加载并验证<code>loda</code>、附加<code>attach</code>、退出<code>destroy</code>。</p><p>bpf程序用户代码模板函数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">libbpf_set_print(libbpf_print_fn);<span class="hljs-comment">//设置日志输出函数libbpf_print_fn</span><br><br>bump_memlock_rlimit();<span class="hljs-comment">//提高内核内部用户的内存权限，为bpf程序的执行做准备</span><br><br>fype(name)_bpf__open_and_load();<span class="hljs-comment">//加载bpf字节码文件到内核中</span><br><span class="hljs-comment">//又细分为如下两个函数</span><br><br>fpbe_bpf *obj=fpbe_bpf__open();<span class="hljs-comment">//创建并打开bpf</span><br><span class="hljs-comment">//-- fpbe_bpf__create_skeleton(obj)</span><br><span class="hljs-comment">//bpftool 会根据 bpf 字节码文件（xxx.bpf.o）生成对应的 skeleton 文件——xxx.skel.h。这个文件中包含了关键的函数和结构体。比如，这个文件中包含了 xxx.bpf.o 文件的内容。</span><br><span class="hljs-comment">//这个函数的内容十分关键</span><br><br>fpbe_bpf__load(obj);<span class="hljs-comment">//进行check</span><br><br>bpf_program__attach_uprobe() <span class="hljs-comment">//用于绑定 uprobe 和 uretprobe 追踪目标的信息</span><br><span class="hljs-comment">//如下  最后一个参数是函数偏移 base_addr调试为0x400000即Imagebase</span><br>obj-&gt;links.uprobe = bpf_program__attach_uprobe(<br>                              obj-&gt;progs.uprobe,<br>                              <span class="hljs-number">0</span>,<br>                              <span class="hljs-number">0</span>,<br>                              <span class="hljs-string">"/proc/self/exe"</span>,<span class="hljs-comment">//跟踪程序</span><br>                              (<span class="hljs-keyword">size_t</span>)uprobed_function - base_addr);<span class="hljs-comment">//跟踪函数</span><br><br>fpbe_bpf__destroy(obj);<span class="hljs-comment">//退出</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220325212024715.png" alt="image-20220325212024715"></p><p>了解过bpf程序的框架之后，再分析程序就比较清晰了。将钩子挂在了当前程序的uprobed函数上，该函数内容为hash check，对flag的内容进行检测。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220325212213296.png" alt="image-20220325212213296"></p><p>故关键处理在bpf代码，处理后的结果再进行比对，我们只需拿到bpf字节码反汇编逆出逻辑问题就解决了。</p><p>方法一:</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220326000537317.png" alt="image-20220326000537317"></p><p><strong>可以直接在create_skeleton下找到ebpf字节码文件(elf)，用ipython dump，当然最后看了wp发现binwalk直接分离是一种不错的方法。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idautils<br>adr=<span class="hljs-number">0x00000000004F4018</span><br><span class="hljs-built_in">len</span>=<span class="hljs-number">1648</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">r'G:\dump'</span>,<span class="hljs-string">'wb'</span>)<br>s=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>):<br>    s.append(Byte(adr+i))<br>f.write(<span class="hljs-built_in">bytes</span>(s))<br>f.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'ok'</span>)<br></code></pre></td></tr></tbody></table></figure><p>分离出的是bpf字节码，IDA无法直接反汇编，需要找到相应的解释器。</p><p><a href="https://github.com/saaph/eBPF_processor">saaph/eBPF_processor . disassemble eBPF bytecode</a></p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220326001348915.png" alt="image-20220326001348915"></p><p>配置好后打开dump出的文件，选择EBPF，即可对字节码反汇编，查看汇编代码即可，主要是求解线性方程组，z3即可，通过hash来check flag是否正确</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220326001641632.png" alt="image-20220326001641632"></p><p><code>exp</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br>a=[Int(<span class="hljs-string">'a{}'</span>.<span class="hljs-built_in">format</span>(i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>s=Solver()<br>s.add(a[<span class="hljs-number">3</span>]*<span class="hljs-number">0x6DC0</span>+a[<span class="hljs-number">2</span>]*<span class="hljs-number">0xfb88</span>+a[<span class="hljs-number">1</span>]*<span class="hljs-number">0x71fb</span>+a[<span class="hljs-number">0</span>]*<span class="hljs-number">0xcc8e</span>==<span class="hljs-number">0xBE18A1735995</span>)<br>s.add(a[<span class="hljs-number">3</span>]*<span class="hljs-number">0xF1BF</span>+a[<span class="hljs-number">2</span>]*<span class="hljs-number">0x6AE5</span>+a[<span class="hljs-number">1</span>]*<span class="hljs-number">0xADD3</span>+a[<span class="hljs-number">0</span>]*<span class="hljs-number">0x9284</span>==<span class="hljs-number">0xA556E5540340</span>)<br>s.add(a[<span class="hljs-number">3</span>]*<span class="hljs-number">0xDD85</span>+a[<span class="hljs-number">2</span>]*<span class="hljs-number">0x8028</span>+a[<span class="hljs-number">1</span>]*<span class="hljs-number">0x652D</span>+a[<span class="hljs-number">0</span>]*<span class="hljs-number">0xE712</span>==<span class="hljs-number">0xA6F374484DA3</span>)<br>s.add(a[<span class="hljs-number">3</span>]*<span class="hljs-number">0x822C</span>+a[<span class="hljs-number">2</span>]*<span class="hljs-number">0xCA43</span>+a[<span class="hljs-number">1</span>]*<span class="hljs-number">0x7C8E</span>+a[<span class="hljs-number">0</span>]*<span class="hljs-number">0xF23A</span>==<span class="hljs-number">0xB99C485A7277</span>)<br>s.check()<br>ans=s.model()<br>res=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    res.append(<span class="hljs-built_in">int</span>.to_bytes(ans[a[i]].as_long(),<span class="hljs-number">4</span>,<span class="hljs-string">'little'</span>).decode())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(res[i],end=<span class="hljs-string">''</span>)<br><span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">print</span>(sha256(<span class="hljs-string">b'0vR3sAlbs8pD2h53'</span>).hexdigest())<br><span class="hljs-comment">#0vR3sAlbs8pD2h53</span><br></code></pre></td></tr></tbody></table></figure><p>方法二:</p><p>使用bpftool，bpftool是一个用来检查 BPF 程序和映射的内核工具。</p><p><code>bpftool prog</code> 可以用来检查系统中运行程序的情况</p><p><code>bpf prog dump </code>获取到了程序标识符后，可以执行 bpf prog dump 来获取整个程序的数据,能够看到由编译器生成的字节码。</p><p>当然拿到编译器生成的字节码已经可读了，如果代码量大的话，则需要修改一下格式之后用C重新编译，详见<a href="https://blog.shi1011.cn/ctf/2259">Mas0n</a>师傅的做法。</p><p>参考:</p><p><a href="https://github.com/libbpf/libbpf-bootstrap">git-libbpf-bootstrap source</a></p><p><a href="https://zhuanlan.zhihu.com/p/467647354">ebpf:基于 uprobe 的自定义例程</a></p><h3 id="the-shellcode">the shellcode</h3><p>赛后复现，程序加了<code>Themida / Winlicense v3.0.0.0 - 3.0.4.0</code>强保护壳，硬脱比较困难，并且壳代码有反调试，可以先运行，之后IDA attach来进行调试。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220323165537110.png" alt="image-20220323165537110"></p><p>将the shell程序代码段的数据用IDA python批量转为代码，大小0x12f7。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idaapi<br>adr=<span class="hljs-number">0x00631000</span><br>size=<span class="hljs-number">0x12f7</span><br>end=adr+size<br><span class="hljs-keyword">while</span> adr&lt;end:<br>    idaapi.create_insn(adr)<br>    insn=idaapi.insn_t()<br>    <span class="hljs-built_in">len</span>=idaapi.decode_insn(insn,adr)<br>    adr+=<span class="hljs-built_in">len</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'ok'</span>)<br><span class="hljs-comment"># 自动化转data 为 code</span><br></code></pre></td></tr></tbody></table></figure><p>之后通过运行时的输出字符定位关键处理函数。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220321234631973.png" alt=""></p><p>首先对opcode进行base64解密，解密函数通过 密文&lt;-&gt;索引表下标 的方式实现，之后又发现了位运算和魔改xxTea。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br>s=<span class="hljs-string">b'abc'</span><br><span class="hljs-built_in">print</span>(b64encode(s))<br>c=<span class="hljs-string">b'YWJj'</span><br>table=[<span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>]<br><span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:<br>    <span class="hljs-built_in">sum</span>=(<span class="hljs-built_in">sum</span>&lt;&lt;<span class="hljs-number">6</span>)+table[i]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">sum</span>))<br><span class="hljs-comment">#base64解密</span><br></code></pre></td></tr></tbody></table></figure><p>之后是逐字节循环左移3</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v2; ++i )<br>   v4-&gt;m128i_i8[i] = __ROL1__(v4-&gt;m128i_i8[i], <span class="hljs-number">3</span>);<br></code></pre></td></tr></tbody></table></figure><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220321234846646.png" alt="image-20220321234846646"></p><p>xxTea将明文前一项右移5改为了右移6。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ut32 unsigned int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> delta 0x9e3779b9</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">XXTea_Decrypt</span><span class="hljs-params">(ut32* enc, ut32 n, ut32* key)</span> </span>{<br>ut32 y, z, sum;<br>ut32 e, rounds;<br><span class="hljs-keyword">int</span> p;<br>rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>sum = delta * rounds;<br><br><span class="hljs-keyword">do</span> {<br>e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span> (p = n - <span class="hljs-number">1</span>; p &gt; <span class="hljs-number">0</span>; p--) {<br>y = enc[(p + <span class="hljs-number">1</span>) % n];<br>z = enc[(p - <span class="hljs-number">1</span>)];<br>enc[p] -= (((z &gt;&gt; <span class="hljs-number">6</span> ^ y &lt;&lt; <span class="hljs-number">2</span>) + (y &gt;&gt; <span class="hljs-number">3</span> ^ z &lt;&lt; <span class="hljs-number">4</span>)) ^ ((sum ^ y) + (key[(p &amp; <span class="hljs-number">3</span>) ^ e] ^ z)));<br>}<br>y = enc[<span class="hljs-number">1</span>];<br>z = enc[n - <span class="hljs-number">1</span>];<br>enc[<span class="hljs-number">0</span>] -= (((z &gt;&gt; <span class="hljs-number">6</span> ^ y &lt;&lt; <span class="hljs-number">2</span>) + (y &gt;&gt; <span class="hljs-number">3</span> ^ z &lt;&lt; <span class="hljs-number">4</span>)) ^ ((sum ^ y) + (key[(<span class="hljs-number">0</span> &amp; <span class="hljs-number">3</span>) ^ e] ^ z)));<br>sum -= delta;<br>} <span class="hljs-keyword">while</span> (--rounds);<br><br>}<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>ut32 m[<span class="hljs-number">66</span>] = { <span class="hljs-number">0x4B6B89A1</span>, <span class="hljs-number">0x74C15453</span>, <span class="hljs-number">0x4092A06E</span>, <span class="hljs-number">0x429B0C07</span>, <span class="hljs-number">0x40281E84</span>, <span class="hljs-number">0x8B5B44C9</span>, <span class="hljs-number">0x66FEB37B</span>, <span class="hljs-number">0x3C77A603</span>,<br><span class="hljs-number">0x79C5892D</span>, <span class="hljs-number">0x0D7ADA97</span>, <span class="hljs-number">0x1D51AA56</span>, <span class="hljs-number">0x02D4D703</span>, <span class="hljs-number">0x4FA526BA</span>, <span class="hljs-number">0x32FAD64A</span>, <span class="hljs-number">0x0C0F6091</span>, <span class="hljs-number">0x562B7593</span>,<br><span class="hljs-number">0xDB9ADD67</span>, <span class="hljs-number">0x76165563</span>, <span class="hljs-number">0xA5F79315</span>, <span class="hljs-number">0x3AEB991D</span>, <span class="hljs-number">0x1AB721D4</span>, <span class="hljs-number">0xAACD9D2C</span>, <span class="hljs-number">0x825C2B27</span>, <span class="hljs-number">0x76A7761A</span>,<br><span class="hljs-number">0xB4005F18</span>, <span class="hljs-number">0x117F3763</span>, <span class="hljs-number">0x512CC540</span>, <span class="hljs-number">0xC594A16F</span>, <span class="hljs-number">0xD0E24F8C</span>, <span class="hljs-number">0x9CA3E2E9</span>, <span class="hljs-number">0x0A9CC2D5</span>, <span class="hljs-number">0x4629E61D</span>,<br><span class="hljs-number">0x637129E3</span>, <span class="hljs-number">0xCA4E8AD7</span>, <span class="hljs-number">0xF5DFAF71</span>, <span class="hljs-number">0x474E68AB</span>, <span class="hljs-number">0x542FBC3A</span>, <span class="hljs-number">0xD6741617</span>, <span class="hljs-number">0xAD0DBBE5</span>, <span class="hljs-number">0x62F7BBE3</span>,<br><span class="hljs-number">0xC8D68C07</span>, <span class="hljs-number">0x880E950E</span>, <span class="hljs-number">0xF80F25BA</span>, <span class="hljs-number">0x767A264C</span>, <span class="hljs-number">0x9A7CE014</span>, <span class="hljs-number">0x5C8BC9EE</span>, <span class="hljs-number">0x5D9EF7D4</span>, <span class="hljs-number">0xB999ACDE</span>,<br><span class="hljs-number">0xB2EC8E13</span>, <span class="hljs-number">0xEE68232D</span>, <span class="hljs-number">0x927C5FCE</span>, <span class="hljs-number">0xC9E3A85D</span>, <span class="hljs-number">0xAC74B56B</span>, <span class="hljs-number">0x42B6E712</span>, <span class="hljs-number">0xCD2898DA</span>, <span class="hljs-number">0xFCF11C58</span>,<br><span class="hljs-number">0xF57075EE</span>, <span class="hljs-number">0x5076E678</span>, <span class="hljs-number">0xD4D66A35</span>, <span class="hljs-number">0x95105AB9</span>, <span class="hljs-number">0x1BB04403</span>, <span class="hljs-number">0xB240B959</span>, <span class="hljs-number">0x7B4E261A</span>, <span class="hljs-number">0x23D129D8</span>,<br><span class="hljs-number">0xF5E752CD</span>, <span class="hljs-number">0x4EA78F70</span> };<br>ut32 k[<span class="hljs-number">4</span>] = { <span class="hljs-number">0x74</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x61</span> };<br>XXTea_Decrypt(m, <span class="hljs-number">66</span>, k);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span> * <span class="hljs-number">66</span>; i++) {<br><span class="hljs-keyword">uint8_t</span> tmp = *((<span class="hljs-keyword">uint8_t</span>*)m + i);<br>*((<span class="hljs-keyword">uint8_t</span>*)m + i) = ((tmp &gt;&gt; <span class="hljs-number">3</span>) | (tmp &lt;&lt; <span class="hljs-number">5</span>)) &amp; <span class="hljs-number">0xff</span>;<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span> * <span class="hljs-number">66</span>; i++) {<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"0x%x,"</span>, *((<span class="hljs-keyword">uint8_t</span>*)m + i));<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br>from base64 <span class="hljs-keyword">import</span> b64encode<br>code=[<span class="hljs-number">0x60</span>,<span class="hljs-number">0xfc</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x7</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0xc</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0xf</span>,<span class="hljs-number">0xb7</span>,<span class="hljs-number">0x4a</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xc0</span>,<span class="hljs-number">0xac</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-number">0xe2</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xc2</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x85</span>,<span class="hljs-number">0xc0</span>,<span class="hljs-number">0xf</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0xbe</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xc2</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xda</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0xf9</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xf</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0xa9</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xf2</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xc0</span>,<span class="hljs-number">0xac</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-number">0xc4</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0xf4</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x3b</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0xc</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0xd9</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xc9</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0xc2</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0xf</span>,<span class="hljs-number">0xb6</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0xa</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0xf9</span>,<span class="hljs-number">0xe</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0xf1</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xc9</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0xf</span>,<span class="hljs-number">0xb6</span>,<span class="hljs-number">0x1c</span>,<span class="hljs-number">0xe</span>,<span class="hljs-number">0xb8</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0xf7</span>,<span class="hljs-number">0xeb</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xfa</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0xc2</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xe8</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xc2</span>,<span class="hljs-number">0x8d</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x2b</span>,<span class="hljs-number">0xd8</span>,<span class="hljs-number">0x5a</span>,<span class="hljs-number">0xf</span>,<span class="hljs-number">0xb6</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0xa</span>,<span class="hljs-number">0x2b</span>,<span class="hljs-number">0xc3</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0xf9</span>,<span class="hljs-number">0xe</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0xd4</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">0x3b</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x16</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0xc4</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x5c</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xeb</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0xc4</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x5c</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0xc3</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x5a</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0xe9</span>,<span class="hljs-number">0xb</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0xff</span>]<br>print(b64encode(bytes(code)))<br><span class="hljs-string">""</span><span class="hljs-string">"shellcode</span><br><span class="hljs-string">YPxoTHcmBzPSZItSMItSDItSFItyKA+3SiYz/zPArDxhfAIsIMHPDQP44vBSV4tSEItCPAPCi0B4hcAPhL4AAAADwlCLSBiLWCAD2oP5AA+EqQAAAEmLNIsD8jP/M8Cswc8NA/g6xHX0A3wkBDt8JAx12TP/M8mDwlAPtgQKwc8NA/hBg/kOdfHBzw1XM/8zyYtUJDxSD7YcDrhnZmZm9+vR+ovCwegfA8KNBIAr2FoPtgQKK8PBzw0D+EGD+Q511MHPDTs8JHQWaCVzAACLxGhubwAAVFCLXCRI/9PrFGglcwAAi8RoeWVzAFRQi1wkSP/TWFhYWFhYWFhYYcNYX1qLEukL////    </span><br><span class="hljs-string">"</span><span class="hljs-string">""</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220322001247766.png" alt="image-20220322001247766"></p><p>shellcode check成功，之后就是执行shellcode来解密flag。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220323171640667.png" alt="image-20220323171640667"></p><p>用函数指针来调用解密的shellcode，以便进一步调试。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*func)</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>(_cdecl*)(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>), <span class="hljs-keyword">char</span>*, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> a[<span class="hljs-number">264</span>] = { <span class="hljs-number">0x60</span>,<span class="hljs-number">0xfc</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x7</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0xc</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0xf</span>,<span class="hljs-number">0xb7</span>,<span class="hljs-number">0x4a</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xc0</span>,<span class="hljs-number">0xac</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-number">0xe2</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xc2</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x85</span>,<span class="hljs-number">0xc0</span>,<span class="hljs-number">0xf</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0xbe</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xc2</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xda</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0xf9</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xf</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0xa9</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xf2</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xc0</span>,<span class="hljs-number">0xac</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-number">0xc4</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0xf4</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x3b</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0xc</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0xd9</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xc9</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0xc2</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0xf</span>,<span class="hljs-number">0xb6</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0xa</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0xf9</span>,<span class="hljs-number">0xe</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0xf1</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xc9</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0xf</span>,<span class="hljs-number">0xb6</span>,<span class="hljs-number">0x1c</span>,<span class="hljs-number">0xe</span>,<span class="hljs-number">0xb8</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0xf7</span>,<span class="hljs-number">0xeb</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xfa</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0xc2</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xe8</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xc2</span>,<span class="hljs-number">0x8d</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x2b</span>,<span class="hljs-number">0xd8</span>,<span class="hljs-number">0x5a</span>,<span class="hljs-number">0xf</span>,<span class="hljs-number">0xb6</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0xa</span>,<span class="hljs-number">0x2b</span>,<span class="hljs-number">0xc3</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0xf9</span>,<span class="hljs-number">0xe</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0xd4</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">0x3b</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x16</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0xc4</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x5c</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xeb</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0xc4</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x5c</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0xc3</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x5a</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0xe9</span>,<span class="hljs-number">0xb</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0xff</span> };<br><span class="hljs-keyword">void</span>* data = VirtualAlloc(<span class="hljs-number">0</span>, <span class="hljs-number">264</span>, <span class="hljs-number">0x00001000</span>, <span class="hljs-number">0x40</span>);<br><span class="hljs-built_in">memcpy</span>(data, a, <span class="hljs-number">264</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>));<br>func test = (func)data;<br><span class="hljs-keyword">char</span> str[<span class="hljs-number">15</span>] = <span class="hljs-string">"aaaaaaaaaaaaaa"</span>;<br>test((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>(_cdecl*)(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>))<span class="hljs-built_in">printf</span>,str,<span class="hljs-number">0</span>,<span class="hljs-number">264</span>,<span class="hljs-number">4096</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>编译成<code>32位</code>可执行文件，调试定位到flag的check点。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220323221616553.png" alt="image-20220323221616553"></p><p>察check_num和v23的变化，发现基本结构一致，故只要让v22[i]=flag[i]-v17[i]%5，那么v23最终结果一定和check num相同，所有数据均可通过调试获得。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> m<br>v17=<span class="hljs-string">'LoadLibraryExA'</span><br>v22=[<span class="hljs-number">0x69</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x6E</span>]<br>flag=<span class="hljs-string">''</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>):<br>       flag+=<span class="hljs-built_in">chr</span>(v22[i]+<span class="hljs-built_in">ord</span>(v17[i])%<span class="hljs-number">5</span>)<br></code></pre></td></tr></tbody></table></figure><p>当然github上也能找到针对<a href="https://github.com/ergrelet/unlicense">WinLicense/Themida 2.x 和 3.x脱壳</a>的工具，不过attach这种方法更趋向于通解，即可能适用于多种壳型。</p><h2 id="foreign-challenges">foreign challenges</h2><blockquote><p>浅浅记录一下近期国际比赛上的一些题目，容易踩坑或者考点比较新颖。</p></blockquote><h3 id="OFPPT-CTF-unicode">OFPPT-CTF . unicode</h3><p><code>unicode2utf-8</code></p><p>题目给了一个<code>flag.jpg.utf8</code>的文件，将图片存为了utf-8编码的格式。<a href="https://www.utf8-chartable.de/unicode-utf8-table.pl?utf8=dec">unicode-utf-8对照表</a></p><p>只需要将utf-8读入转为unicode编码，python3的chr和ord函数默认是以unicode编码来处理字符的，所以只需以utf-8编码格式读取数据，再用ord遍历就拿到了对应的unicode值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> codecs<br>f=codecs.<span class="hljs-built_in">open</span>(<span class="hljs-string">r'flag.jpg.utf8'</span>,<span class="hljs-string">'r'</span>,encoding=<span class="hljs-string">'utf-8'</span>).read()<br><span class="hljs-comment"># print(f)</span><br>s=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>    s.append(<span class="hljs-built_in">ord</span>(i))<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">r'flag.jpg'</span>,<span class="hljs-string">'wb'</span>).write(<span class="hljs-built_in">bytes</span>(s))<br></code></pre></td></tr></tbody></table></figure><blockquote><p>codecs是python用于处理文本编码的包，支持多种编码。…其实这题挺坑的…</p></blockquote><h3 id="xxx-game">xxx_game</h3><p><code>python打包的elf files</code></p><blockquote><p>python打包的elf文件，之前多是打包exe，并且pyinstaller打包的exe图标很容易识别。还有一种是py2exe打包，较前者出现频率较少，并且打包exe文件查看strings窗口会有PY2EXE的字符。</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220327210353884.png" alt="image-20220327210353884"></p><p>根据strings窗口下很多py命名的函数，所以认为是经过了pyc文件经过打包生成的exe，直接用pyinstxtractor解包会出错，正确步骤如下。</p><p>参考<a href="https://github.com/extremecoders-re/pyinstxtractor/wiki/Extracting-Linux-ELF-binaries">Extracting Linux ELF binaries</a>第一种简单的方法。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apl">#Using objcopy dump the section named pydata to a file.<br>objcopy --dump-section pydata=pydata.dump testfile.elf<br><br>#Now you can run pyinstxtractor on the dumped file.<br>python2 pyinstxtractor.py pydata.dump<br></code></pre></td></tr></tbody></table></figure><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220327211244130.png" alt="image-20220327211244130"></p><p>之后顺序同打包exe的解法一致。</p><h3 id="picoCTF-game2">picoCTF_game2</h3><p><code>hide and exec code</code></p><blockquote><p>通过对称加密算法来解码code并执行，当然可以通过给出高版本的pyc文件来让这个问题更有趣。</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> cryptography.fernet <span class="hljs-keyword">import</span> Fernet<br><br>payload = <span class="hljs-string">b'gAAAAABiMD1Dt87s50caSunQlHoZqPOwtGNaQXexN-gjKwZeuLEN_-v6UcFJHVXOT4B6DcD1SB7cnd6yTcHg9e9LZCAeJY2cJ0r0sfyGPRiH60F-WbkyUjlAdDywI8RPdTpDYLuBmpZ_Kun-kHyTzMjeKR6R26Z4JITUS8n7Dj9X--9eNLajH6UuYD4GkjRACpsidl_8z33DlB86u_xDCMMm7HFK2oJTs8HG1fBex6enQsu0frUAJbx56DxhRvWawAysDMtLE50vaohrzkVV7Yaz4ClilwgfjQ=='</span><br><br>key_str = <span class="hljs-string">'correctstaplecorrectstaplecorrec'</span><br>key_base64 = base64.b64encode(key_str.encode())<br>f = Fernet(key_base64)<br>plain = f.decrypt(payload)<br><span class="hljs-built_in">print</span>(plain)<br><br><span class="hljs-comment"># exec(plain.decode())</span><br><span class="hljs-comment">#b"\npw = input('What\\'s the password? ')\n\nif pw == 'batteryhorse':\n  print('picoCTF{175_chr157m45_8aef58d2}')\nelse:\n  print('That password is incorrect.')\n\n"</span><br></code></pre></td></tr></tbody></table></figure><h3 id="Gandalf-Baba">Gandalf Baba</h3><p><code>apk-webview-js</code></p><p><code>webview</code>封装的apk程序,主要通过调用js来进行交互，需要进行get传参，并且请求头满足要求才能getflag。</p><p><strong>js代码在assets文件下，内容如下。</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>User=MyInterface.GetUser();<br>Serial=MyInterface.GetSerial();<br>Model=MyInterface.GetModel();<br>Product=MyInterface.GetProduct();<br>Auth=MyInterface.GetAuth();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">var</span> x = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"myTable"</span>).rows[<span class="hljs-number">1</span>].cells;<br>  x[<span class="hljs-number">0</span>].innerHTML =User ;<br><br>   <span class="hljs-keyword">var</span> y = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"myTable"</span>).rows[<span class="hljs-number">1</span>].cells;<br>  x[<span class="hljs-number">1</span>].innerHTML =Serial;<br><br>   <span class="hljs-keyword">var</span> z = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"myTable"</span>).rows[<span class="hljs-number">1</span>].cells;<br>  x[<span class="hljs-number">2</span>].innerHTML =Model ;<br>   <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"myTable"</span>).rows[<span class="hljs-number">1</span>].cells;<br>  x[<span class="hljs-number">3</span>].innerHTML =Product ;<br><br>     <span class="hljs-keyword">var</span> b = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"myTable"</span>).rows[<span class="hljs-number">1</span>].cells;<br>  x[<span class="hljs-number">4</span>].innerHTML =Auth ;<br>}<br>&lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure><p>其中并没有调用关键的flag函数，故可以添加该函数并重新打包签名，当然也可以直接逆向关键函数的逻辑，这里我采用后者。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220327213347459.png" alt="image-20220327213347459"></p><p>对题目给出的网站get传入参数，满足其请求头的内容要求即可绕过Gandalf Baba成功拿到flag。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">'RheO5PB6mfL5N3YBH45e5XuCEaWpvWUFESqTYnZk'</span><br>c=[<span class="hljs-number">38</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">60</span>, <span class="hljs-number">93</span>, <span class="hljs-number">49</span>, <span class="hljs-number">50</span>, <span class="hljs-number">95</span>, <span class="hljs-number">25</span>, <span class="hljs-number">22</span>, <span class="hljs-number">45</span>, <span class="hljs-number">71</span>, <span class="hljs-number">47</span>, <span class="hljs-number">94</span>, <span class="hljs-number">60</span>, <span class="hljs-number">54</span>, <span class="hljs-number">45</span>, <span class="hljs-number">70</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(c[i]^<span class="hljs-built_in">ord</span>(a[i])),end=<span class="hljs-string">''</span>)<br><span class="hljs-built_in">print</span>()<br>c=[<span class="hljs-number">80</span>, <span class="hljs-number">104</span>, <span class="hljs-number">97</span>, <span class="hljs-number">67</span>, <span class="hljs-number">36</span>, <span class="hljs-number">64</span>, <span class="hljs-number">66</span>, <span class="hljs-number">52</span>, <span class="hljs-number">97</span>, <span class="hljs-number">100</span>, <span class="hljs-number">64</span>, <span class="hljs-number">33</span>, <span class="hljs-number">70</span>, <span class="hljs-number">33</span>, <span class="hljs-number">72</span>, <span class="hljs-number">64</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(c))<br><br><span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> req<br>headers = {<span class="hljs-string">'user-agent'</span>: <span class="hljs-string">'PhaC$@B4ad@!F!H@'</span>,<br>           <span class="hljs-string">'Accept-Language'</span>:<span class="hljs-string">"From JavaScript Interface"</span><br>           }<br><br>resp = req.get(<span class="hljs-string">"https://teambounters.com/shapa.php?theshapitparameter=givemeflag"</span>,headers=headers)<br><span class="hljs-built_in">print</span>(resp.text)<br><span class="hljs-comment">#参考: https://geek-docs.com/python/python-tutorial/python-requests.html</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>虎符的Contra 2048也采用的webview封装，对js和消息处理目前还不是太了解，之后会给出复现。</p></blockquote><h3 id="amazing-code">amazing_code</h3><p><code>Evm Opcodes</code></p><p>打开附件，Evm Opcode，一般出现在智能合约的逆向，目前是有工具可以做到反编译的所以无需硬读。<a href="https://github.com/wolflo/evm-opcodes">github- Evm Opcode对照 HEX</a></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">PUSH1<span class="hljs-number">0x80</span><br>PUSH1<span class="hljs-number">0x40</span><br>MSTORE<br>PUSH1<span class="hljs-number">0x20</span><br>PUSH1<span class="hljs-number">0xf8</span><br>SHL<br>PUSH1<span class="hljs-number">0x00</span><br>DUP1<br>PUSH2<span class="hljs-number">0x0100</span><br>EXP<br>...<br></code></pre></td></tr></tbody></table></figure><p>先将opcode转为16进制数据。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pyevmasm <span class="hljs-keyword">import</span> assemble_hex<br><br>op=[<span class="hljs-string">'PUSH1'</span>, <span class="hljs-string">'MSTORE'</span>, <span class="hljs-string">'SHL'</span>, <span class="hljs-string">'DUP1'</span>, <span class="hljs-string">'PUSH2'</span>, <span class="hljs-string">'EXP'</span>, <span class="hljs-string">'DUP2'</span>, <span class="hljs-string">'SLOAD'</span>, <span class="hljs-string">'MUL'</span>, <span class="hljs-string">'NOT'</span>, <span class="hljs-string">'AND'</span>, <span class="hljs-string">'SWAP1'</span>, <span class="hljs-string">'DUP4'</span>, <span class="hljs-string">'SHR'</span>, <span class="hljs-string">'OR'</span>, <span class="hljs-string">'SSTORE'</span>, <span class="hljs-string">'POP'</span>, <span class="hljs-string">'DIV'</span>, <span class="hljs-string">'XOR'</span>, <span class="hljs-string">'CALLVALUE'</span>, <span class="hljs-string">'ISZERO'</span>, <span class="hljs-string">'JUMPI'</span>, <span class="hljs-string">'REVERT'</span>, <span class="hljs-string">'JUMPDEST'</span>, <span class="hljs-string">'CODECOPY'</span>, <span class="hljs-string">'RETURN'</span>, <span class="hljs-string">'INVALID'</span>, <span class="hljs-string">'CALLDATASIZE'</span>, <span class="hljs-string">'LT'</span>, <span class="hljs-string">'CALLDATALOAD'</span>, <span class="hljs-string">'PUSH4'</span>, <span class="hljs-string">'GT'</span>, <span class="hljs-string">'EQ'</span>, <span class="hljs-string">'JUMP'</span>, <span class="hljs-string">'MLOAD'</span>, <span class="hljs-string">'SWAP2'</span>, <span class="hljs-string">'SUB'</span>, <span class="hljs-string">'PUSH32'</span>, <span class="hljs-string">'DUP3'</span>, <span class="hljs-string">'ADD'</span>, <span class="hljs-string">'DUP5'</span>, <span class="hljs-string">'SWAP3'</span>, <span class="hljs-string">'LOG2'</span>, <span class="hljs-string">'PUSH5'</span>, <span class="hljs-string">'SLT'</span>, <span class="hljs-string">'SHA3'</span>, <span class="hljs-string">'PUSH19'</span>, <span class="hljs-string">'CALLER'</span>, <span class="hljs-string">'SDIV'</span>, <span class="hljs-string">'LOG4'</span>, <span class="hljs-string">'PUSH17'</span>]<br>tb=[<span class="hljs-number">0x60</span>+i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)]<br>k=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> op:<br>    <span class="hljs-keyword">try</span>:<br>        k.append(<span class="hljs-built_in">int</span>(assemble_hex(i),<span class="hljs-number">16</span>))<br>    <span class="hljs-keyword">except</span>:<br>        k.append(tb[<span class="hljs-built_in">int</span>(i[<span class="hljs-number">4</span>:])-<span class="hljs-number">1</span>])<br>table=<span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(op,k))<br><span class="hljs-built_in">print</span>(table) <span class="hljs-comment">#根据用到的op生成字典</span><br><br>table={<span class="hljs-string">'PUSH1'</span>: <span class="hljs-number">96</span>, <span class="hljs-string">'MSTORE'</span>: <span class="hljs-number">82</span>, <span class="hljs-string">'SHL'</span>: <span class="hljs-number">27</span>, <span class="hljs-string">'DUP1'</span>: <span class="hljs-number">128</span>, <span class="hljs-string">'PUSH2'</span>: <span class="hljs-number">97</span>, <span class="hljs-string">'EXP'</span>: <span class="hljs-number">10</span>, <span class="hljs-string">'DUP2'</span>: <span class="hljs-number">129</span>, <span class="hljs-string">'SLOAD'</span>: <span class="hljs-number">84</span>, <span class="hljs-string">'MUL'</span>: <span class="hljs-number">2</span>, <span class="hljs-string">'NOT'</span>: <span class="hljs-number">25</span>, <span class="hljs-string">'AND'</span>: <span class="hljs-number">22</span>, <span class="hljs-string">'SWAP1'</span>: <span class="hljs-number">144</span>, <span class="hljs-string">'DUP4'</span>: <span class="hljs-number">131</span>, <span class="hljs-string">'SHR'</span>: <span class="hljs-number">28</span>, <span class="hljs-string">'OR'</span>: <span class="hljs-number">23</span>, <span class="hljs-string">'SSTORE'</span>: <span class="hljs-number">85</span>, <span class="hljs-string">'POP'</span>: <span class="hljs-number">80</span>, <span class="hljs-string">'DIV'</span>: <span class="hljs-number">4</span>, <span class="hljs-string">'XOR'</span>: <span class="hljs-number">24</span>, <span class="hljs-string">'CALLVALUE'</span>: <span class="hljs-number">52</span>, <span class="hljs-string">'ISZERO'</span>: <span class="hljs-number">21</span>, <span class="hljs-string">'JUMPI'</span>: <span class="hljs-number">87</span>, <span class="hljs-string">'REVERT'</span>: <span class="hljs-number">253</span>, <span class="hljs-string">'JUMPDEST'</span>: <span class="hljs-number">91</span>, <span class="hljs-string">'CODECOPY'</span>: <span class="hljs-number">57</span>, <span class="hljs-string">'RETURN'</span>: <span class="hljs-number">243</span>, <span class="hljs-string">'INVALID'</span>: <span class="hljs-number">254</span>, <span class="hljs-string">'CALLDATASIZE'</span>: <span class="hljs-number">54</span>, <span class="hljs-string">'LT'</span>: <span class="hljs-number">16</span>, <span class="hljs-string">'CALLDATALOAD'</span>: <span class="hljs-number">53</span>, <span class="hljs-string">'PUSH4'</span>: <span class="hljs-number">99</span>, <span class="hljs-string">'GT'</span>: <span class="hljs-number">17</span>, <span class="hljs-string">'EQ'</span>: <span class="hljs-number">20</span>, <span class="hljs-string">'JUMP'</span>: <span class="hljs-number">86</span>, <span class="hljs-string">'MLOAD'</span>: <span class="hljs-number">81</span>, <span class="hljs-string">'SWAP2'</span>: <span class="hljs-number">145</span>, <span class="hljs-string">'SUB'</span>: <span class="hljs-number">3</span>, <span class="hljs-string">'PUSH32'</span>: <span class="hljs-number">127</span>, <span class="hljs-string">'DUP3'</span>: <span class="hljs-number">130</span>, <span class="hljs-string">'ADD'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'DUP5'</span>: <span class="hljs-number">132</span>, <span class="hljs-string">'SWAP3'</span>: <span class="hljs-number">146</span>, <span class="hljs-string">'LOG2'</span>: <span class="hljs-number">162</span>, <span class="hljs-string">'PUSH5'</span>: <span class="hljs-number">100</span>, <span class="hljs-string">'SLT'</span>: <span class="hljs-number">18</span>, <span class="hljs-string">'SHA3'</span>: <span class="hljs-number">32</span>, <span class="hljs-string">'PUSH19'</span>: <span class="hljs-number">114</span>, <span class="hljs-string">'CALLER'</span>: <span class="hljs-number">51</span>, <span class="hljs-string">'SDIV'</span>: <span class="hljs-number">5</span>, <span class="hljs-string">'LOG4'</span>: <span class="hljs-number">164</span>, <span class="hljs-string">'PUSH17'</span>: <span class="hljs-number">112</span>}<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">r'amazing_code'</span>,<span class="hljs-string">'r'</span>)<br>byt=<span class="hljs-string">''</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    buf=f.readline()<br>    <span class="hljs-keyword">if</span> buf:<br>        stu=buf.replace(<span class="hljs-string">'\n'</span>,<span class="hljs-string">''</span>).split(<span class="hljs-string">''</span>)<br>        <span class="hljs-keyword">try</span>:<br>            byt+=<span class="hljs-built_in">hex</span>(table[stu[<span class="hljs-number">0</span>]])[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">2</span>)+stu[<span class="hljs-number">1</span>].replace(<span class="hljs-string">'0x'</span>,<span class="hljs-string">''</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(byt)<br></code></pre></td></tr></tbody></table></figure><p>得到的16进制数据可以通过<a href="https://ethervm.io/decompile">Online Solidity Decompiler</a>在线反编译，结果可能有些偏差比较难读，关键部分还是要参考字节码文件。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract Contract {<br>    function main() {<br>        memory[0x40:0x60] = 0x80;<br>        storage[0x00] = (storage[0x00] &amp; ~0xff) | ((0x20 &lt;&lt; 0xf8) &gt;&gt; 0xf8);<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x01)) | ((0x53 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x01;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x02)) | ((0x6f &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x02;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x03)) | ((0x6c &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x03;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x04)) | ((0x69 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x04;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x05)) | ((0x64 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x05;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x06)) | ((0x60 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x06;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x07)) | ((0x74 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x07;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x08)) | ((0x79 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x08;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x09)) | ((0x5f &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x09;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x0a)) | ((0x42 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x0a;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x0b)) | ((0x69 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x0b;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x0c)) | ((0x74 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x0c;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x0d)) | ((0x77 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x0d;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x0e)) | ((0x69 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x0e;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x0f)) | ((0x73 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x0f;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x10)) | ((0x65 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x10;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x11)) | ((0x5f &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x11;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x12)) | ((0x4f &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x12;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x13)) | ((0x70 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x13;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x14)) | ((0x65 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x14;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x15)) | ((0x72 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x15;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x16)) | ((0x61 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x16;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x17)) | ((0x74 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x17;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x18)) | ((0x69 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x18;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x19)) | ((0x6f &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x19;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x1a)) | ((0x6e &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x1a;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x1b)) | 0x00;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x1c)) | 0x00;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x1d)) | 0x00;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x1e)) | 0x00;<br>        storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x1f)) | 0x00;<br>        storage[0x01] = (storage[0x01] &amp; ~0xff) | ((0x62 &lt;&lt; 0xf8) &gt;&gt; 0xf8);<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x01)) | ((0x10 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x01;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x02)) | ((0x3b &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x02;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x03)) | ((0x2a &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x03;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x04)) | ((0x12 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x04;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x05)) | ((0x26 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x05;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x06)) | ((0x09 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x06;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x07)) | 0x00;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x08)) | ((0x26 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x08;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x09)) | ((0x10 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x09;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x0a)) | ((0x32 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x0a;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x0b)) | ((0x0c &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x0b;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x0c)) | ((0x06 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x0c;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x0d)) | ((0x16 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x0d;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x0e)) | ((0x1d &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x0e;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x0f)) | ((0x1a &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x0f;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x10)) | ((0x0a &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x10;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x11)) | ((0x31 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x11;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x12)) | ((0x3c &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x12;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x13)) | ((0x2f &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x13;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x14)) | ((0x2c &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x14;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x15)) | ((0x1c &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x15;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x16)) | ((0x3e &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x16;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x17)) | ((0x27 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x17;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x18)) | ((0x06 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x18;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x19)) | ((0x03 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x19;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x1a)) | ((0x07 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x1a;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x1b)) | ((0x64 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x1b;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x1c)) | ((0x69 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x1c;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x1d)) | ((0x74 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x1d;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x1e)) | ((0x79 &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x1e;<br>        storage[0x01] = (storage[0x01] &amp; ~(0xff * 0x0100 ** 0x1f)) | ((0x7d &lt;&lt; 0xf8) &gt;&gt; 0xf8) * 0x0100 ** 0x1f;<br>        storage[0x02] = (((storage[0x00] &lt;&lt; 0xf8) ~ (storage[0x01] &lt;&lt; 0xf8)) &gt;&gt; 0xf8) | (storage[0x02] &amp; ~0xff);<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x01 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x01 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x01 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x01));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x02 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x02 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x02 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x02));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x03 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x03 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x03 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x03));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x04 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x04 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x04 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x04));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x05 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x05 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x05 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x05));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x06 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x06 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x06 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x06));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x07 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x07 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x07 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x07));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x08 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x08 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x08 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x08));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x09 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x09 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x09 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x09));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x0a &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x0a &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x0a | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x0a));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x0b &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x0b &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x0b | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x0b));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x0c &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x0c &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x0c | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x0c));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x0d &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x0d &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x0d | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x0d));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x0e &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x0e &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x0e | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x0e));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x0f &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x0f &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x0f | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x0f));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x10 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x10 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x10 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x10));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x11 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x11 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x11 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x11));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x12 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x12 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x12 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x12));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x13 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x13 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x13 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x13));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x14 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x14 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x14 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x14));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x15 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x15 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x15 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x15));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x16 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x16 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x16 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x16));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x17 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x17 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x17 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x17));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x18 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x18 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x18 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x18));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x19 &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x19 &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x19 | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x19));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x1a &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x1a &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x1a | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x1a));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x1b &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x1b &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x1b | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x1b));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x1c &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x1c &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x1c | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x1c));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x1d &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x1d &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x1d | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x1d));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x1e &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x1e &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x1e | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x1e));<br>        storage[0x02] = (((storage[0x00] / 0x0100 ** 0x1f &lt;&lt; 0xf8) ~ (storage[0x01] / 0x0100 ** 0x1f &lt;&lt; 0xf8)) &gt;&gt; 0xf8) * 0x0100 ** 0x1f | (storage[0x02] &amp; ~(0xff * 0x0100 ** 0x1f));<br>        var var0 = msg.value;<br>    <br>        if (var0) { revert(memory[0x00:0x00]); }<br>    <br>        memory[0x00:0x089f] = code[0x0f39:0x17d8];<br>        return memory[0x00:0x089f];<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p><code>analyse this code</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">storage=[<span class="hljs-number">0</span>]<br>storage[<span class="hljs-number">0x00</span>] = (storage[<span class="hljs-number">0x00</span>] &amp; ~<span class="hljs-number">0xff</span>) | ((<span class="hljs-number">0x20</span> &lt;&lt; <span class="hljs-number">0xf8</span>) &gt;&gt; <span class="hljs-number">0xf8</span>);<br>storage[<span class="hljs-number">0x00</span>] = (storage[<span class="hljs-number">0x00</span>] &amp; ~(<span class="hljs-number">0xff</span> * <span class="hljs-number">0x0100</span> ** <span class="hljs-number">0x01</span>)) | ((<span class="hljs-number">0x53</span> &lt;&lt; <span class="hljs-number">0xf8</span>) &gt;&gt; <span class="hljs-number">0xf8</span>) * <span class="hljs-number">0x0100</span> ** <span class="hljs-number">0x01</span>;<br>storage[<span class="hljs-number">0x00</span>] = (storage[<span class="hljs-number">0x00</span>] &amp; ~(<span class="hljs-number">0xff</span> * <span class="hljs-number">0x0100</span> ** <span class="hljs-number">0x02</span>)) | ((<span class="hljs-number">0x6f</span> &lt;&lt; <span class="hljs-number">0xf8</span>) &gt;&gt; <span class="hljs-number">0xf8</span>) * <span class="hljs-number">0x0100</span> ** <span class="hljs-number">0x02</span>;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(storage[<span class="hljs-number">0</span>]))<br><span class="hljs-comment">#0x6f5320</span><br><span class="hljs-comment">#此类代码是在赋值按照小端序 最后s[0]和s[1]都变成了32字节大小的变量</span><br><span class="hljs-comment">#之后对s[0]和s[1]结果进行异或操作，存在s[2]中</span><br>storage[<span class="hljs-number">0x02</span>] = (((storage[<span class="hljs-number">0x00</span>] &lt;&lt; <span class="hljs-number">0xf8</span>) ~ (storage[<span class="hljs-number">0x01</span>] &lt;&lt; <span class="hljs-number">0xf8</span>)) &gt;&gt; <span class="hljs-number">0xf8</span>) | (storage[<span class="hljs-number">0x02</span>] &amp; ~<span class="hljs-number">0xff</span>);<br><span class="hljs-comment">#其中~表示xor</span><br></code></pre></td></tr></tbody></table></figure><p>可以返回字节码查看 ~ 到底对应着什么操作 XOR 和 NOT的hex十分接近，可能反编译器内部出了点问题。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220327232655873.png" alt="image-20220327232655873"></p><p><code>exp</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0x20</span>,<span class="hljs-number">0x53</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x6c</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x4f</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>b=[<span class="hljs-number">0x62</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x3b</span>,<span class="hljs-number">0x2a</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x0c</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x16</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0x1a</span>,<span class="hljs-number">0x0a</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x2f</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x1c</span>,<span class="hljs-number">0x3e</span>,<span class="hljs-number">0x27</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x7d</span>]<br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a,b):<br>       <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i^j),end=<span class="hljs-string">''</span>)<br><span class="hljs-comment">#BCTF{Bit_Operations_In_Solidity}</span><br></code></pre></td></tr></tbody></table></figure><h2 id="The-End">The End</h2><p>还有一些题记不太清了，先暂时整理这些。最近还遇到许多遍历和搜索的算法题，如走图和dfs等，能还原正向算法，解不出就很难受并且无从下手，手撸党表示没机会。</p><p>摸的<code>Rust</code>和<code>IOT</code>之后也会整理一下，Rust就是硬调，IOT要熟悉信号用到的协议和一些分析工具等。</p><blockquote><p>博客由于大创(其实去是峡谷想当yewang)等原因好久没更了，最近许多硬核赛题还没有复现，真是长路漫漫，学无止境(越摆越烂)啊！</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/20220113025224690.gif" alt="20220113025224690"></p>]]></content>
    
    
    <categories>
      
      <category>CTF Memory</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VNCTF2022</title>
    <link href="/2022/02/12/VNCTF2022/"/>
    <url>/2022/02/12/VNCTF2022/</url>
    
    <content type="html"><![CDATA[<blockquote><p>中间有很多失误，没细心看算法直接猜了，还被符号数狠狠坑了一笔。</p></blockquote><h2 id="WEB">WEB</h2><h3 id="GameV4-0">GameV4.0</h3><blockquote><p>签到题，F12在datajs中发现flag的base64字符串</p></blockquote><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220212231433347.png" alt="image-20220212231433347"></p><p>base64+URL解码即可</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs c">VNCTF{Welcome_to_VNCTF2022}<br></code></pre></td></tr></tbody></table></figure><h2 id="Crypto-2">Crypto</h2><h3 id="ezmath">ezmath</h3><p>解决如下方程，提示知道第一个是15即n=4,可得如下等式<br>$$<br>2^n -1 mod 15==0 \quad ==&gt; \quad 2^n mod 15==1<br>$$</p><blockquote><p>n从4开始，左右两侧取多少次方都可以 故第k个 n就是4*k  k=1,2,3,4…</p></blockquote><p>exp如下，记得当时手动输入数据测试不行，用pwntool就可以了。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">from hashlib <span class="hljs-keyword">import</span> sha256</span><br><span class="hljs-function">from pwn <span class="hljs-keyword">import</span> *</span><br><span class="hljs-function"></span><br><span class="hljs-function">def <span class="hljs-title">check</span><span class="hljs-params">(s,enc)</span>:</span><br><span class="hljs-function">    table </span>= <span class="hljs-string">'0123456789abcdefghijklmnopqrstuvwxyz'</span> + <span class="hljs-string">'abcdefghijklmnopqrstuvwxyz'</span>.upper()<br>    ans=<span class="hljs-string">''</span><br><span class="hljs-string">    for i in table:</span><br><span class="hljs-string">        for j in table:</span><br><span class="hljs-string">            for k in table:</span><br><span class="hljs-string">                for l in table:</span><br><span class="hljs-string">                    a = i + j + k + l + s</span><br><span class="hljs-string">                    if sha256(a.encode()).hexdigest() == enc:</span><br><span class="hljs-string">                        ans+=a[:4]</span><br><span class="hljs-string">                        print(ans)</span><br><span class="hljs-string">                        return (ans)</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">r=remote('</span>node4.buuoj.cn<span class="hljs-number">'</span>,<span class="hljs-number">28687</span>)<br>p=r.recvuntil(<span class="hljs-string">':'</span>).decode()[<span class="hljs-number">3</span>:].replace(<span class="hljs-string">' == '</span>,<span class="hljs-string">'#'</span>)<br>s=p[p.index(<span class="hljs-string">'+'</span>)+<span class="hljs-number">1</span>:p.index(<span class="hljs-string">')'</span>)]<br>enc=p[p.index(<span class="hljs-string">'#'</span>)+<span class="hljs-number">1</span>:p.index(<span class="hljs-string">'\n'</span>)]<br>tmp=check(s,enc)<br>r.sendline(tmp)<br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">777</span>):<br>    a=r.recvline().decode().split(<span class="hljs-string">' '</span>)<br>    num=<span class="hljs-keyword">int</span>(a[<span class="hljs-number">4</span>][:a[<span class="hljs-number">4</span>].index(<span class="hljs-string">'t'</span>)])<br>    r.sendline(str(<span class="hljs-keyword">int</span>(num)*<span class="hljs-number">4</span>))<br>    r.recvline()<br>r.interactive()<br><span class="hljs-meta">#flag{7e625b4e-fdec-47aa-8808-c59157d0bb1d}</span><br></code></pre></td></tr></tbody></table></figure><h2 id="RE">RE</h2><blockquote><p>有点小遗憾，败在了C的符号数处理上 最后一题单单SM4秘钥扩就写了好久，赛后python写直接出了，百感交寄G_G</p></blockquote><h3 id="BabyMaze">BabyMaze</h3><blockquote><p>python3.8 不可直接uncompyle反编译  用py38的dis或decompy++都可以反汇编</p></blockquote><p>这里用decompy++  执行 .\pycdas BabyMaze.pyc &gt; code.txt</p><p><strong>部分代码如下</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs python">BabyMaze.pyc (Python <span class="hljs-number">3.8</span>)<br>[Code]<br>    File Name: .\BabyMaze.py<br>    Object Name: &lt;module&gt;<br>    Arg Count: <span class="hljs-number">0</span><br>    Pos Only Arg Count: <span class="hljs-number">0</span><br>    KW Only Arg Count: <span class="hljs-number">0</span><br>    Locals: <span class="hljs-number">0</span><br>    Stack Size: <span class="hljs-number">61</span><br>    Flags: <span class="hljs-number">0x00000040</span> (CO_NOFREE)<br>    [Names]<br>        <span class="hljs-string">'_map'</span><br>        <span class="hljs-string">'maze'</span><br>        <span class="hljs-string">'main'</span><br>        <span class="hljs-string">'__name__'</span><br>    [Var Names]<br>    [Free Vars]<br>    [Cell Vars]<br>    [Constants]<br>        <span class="hljs-number">1</span><br>        <span class="hljs-number">5</span><br>        <span class="hljs-number">0</span><br>        <span class="hljs-number">7</span><br>        [Code]<br>            File Name: .\BabyMaze.py<br>            Object Name: maze<br>            Arg Count: <span class="hljs-number">0</span><br>            Pos Only Arg Count: <span class="hljs-number">0</span><br>            KW Only Arg Count: <span class="hljs-number">0</span><br>            Locals: <span class="hljs-number">4</span><br>            Stack Size: <span class="hljs-number">3</span><br>            Flags: <span class="hljs-number">0x00000043</span> (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)<br>            [Names]<br>                <span class="hljs-string">'input'</span><br>                <span class="hljs-string">'range'</span><br>                <span class="hljs-string">'len'</span><br>                <span class="hljs-string">'_map'</span><br>            [Var Names]<br>                <span class="hljs-string">'x'</span><br>                <span class="hljs-string">'y'</span><br>                <span class="hljs-string">'step'</span><br>                <span class="hljs-string">'i'</span><br>            [Free Vars]<br>            [Cell Vars]<br>            [Constants]<br>                <span class="hljs-literal">None</span><br>                <span class="hljs-number">1</span><br>                <span class="hljs-string">'w'</span><br>                <span class="hljs-string">'s'</span><br>                <span class="hljs-string">'a'</span><br>                <span class="hljs-string">'d'</span><br>                <span class="hljs-literal">False</span><br>                <span class="hljs-number">29</span><br>                <span class="hljs-literal">True</span><br>            [Disassembly]<br>                <span class="hljs-number">0</span>       LOAD_CONST              <span class="hljs-number">1</span>: <span class="hljs-number">1</span><br>                <span class="hljs-number">2</span>       STORE_FAST              <span class="hljs-number">0</span>: x<br>                <span class="hljs-number">4</span>       LOAD_CONST              <span class="hljs-number">1</span>: <span class="hljs-number">1</span><br>                <span class="hljs-number">6</span>       STORE_FAST              <span class="hljs-number">1</span>: y<br>                <span class="hljs-number">8</span>       LOAD_GLOBAL             <span class="hljs-number">0</span>: <span class="hljs-built_in">input</span><br>                <span class="hljs-number">10</span>      CALL_FUNCTION           <span class="hljs-number">0</span><br>                <span class="hljs-number">12</span>      STORE_FAST              <span class="hljs-number">2</span>: step<br>                <span class="hljs-number">14</span>      LOAD_GLOBAL             <span class="hljs-number">1</span>: <span class="hljs-built_in">range</span><br>                <span class="hljs-number">16</span>      LOAD_GLOBAL             <span class="hljs-number">2</span>: <span class="hljs-built_in">len</span><br>                <span class="hljs-number">18</span>      LOAD_FAST               <span class="hljs-number">2</span>: step<br>                <span class="hljs-number">20</span>      CALL_FUNCTION           <span class="hljs-number">1</span><br>                <span class="hljs-number">22</span>      CALL_FUNCTION           <span class="hljs-number">1</span><br>                <span class="hljs-number">24</span>      GET_ITER                <br>                <span class="hljs-number">26</span>      FOR_ITER                <span class="hljs-number">142</span> (to <span class="hljs-number">170</span>)<br>                <span class="hljs-number">28</span>      STORE_FAST              <span class="hljs-number">3</span>: i<br>                <span class="hljs-number">30</span>      LOAD_FAST               <span class="hljs-number">2</span>: step<br>                <span class="hljs-number">32</span>      LOAD_FAST               <span class="hljs-number">3</span>: i<br>                <span class="hljs-number">34</span>      BINARY_SUBSCR           <br>                <span class="hljs-number">36</span>      LOAD_CONST              <span class="hljs-number">2</span>: <span class="hljs-string">'w'</span><br>                <span class="hljs-number">38</span>      COMPARE_OP              <span class="hljs-number">2</span> (==)<br>                <span class="hljs-number">40</span>      POP_JUMP_IF_FALSE       <span class="hljs-number">52</span><br>                <span class="hljs-number">42</span>      LOAD_FAST               <span class="hljs-number">0</span>: x<br>                <span class="hljs-number">44</span>      LOAD_CONST              <span class="hljs-number">1</span>: <span class="hljs-number">1</span><br>                <span class="hljs-number">46</span>      INPLACE_SUBTRACT        <br>                <span class="hljs-number">48</span>      STORE_FAST              <span class="hljs-number">0</span>: x<br>                <span class="hljs-number">50</span>      JUMP_FORWARD            <span class="hljs-number">72</span> (to <span class="hljs-number">124</span>)<br>                <span class="hljs-number">52</span>      LOAD_FAST               <span class="hljs-number">2</span>: step<br>                <span class="hljs-number">54</span>      LOAD_FAST               <span class="hljs-number">3</span>: i<br>                <span class="hljs-number">56</span>      BINARY_SUBSCR           <br>                <span class="hljs-number">58</span>      LOAD_CONST              <span class="hljs-number">3</span>: <span class="hljs-string">'s'</span><br>                <span class="hljs-number">60</span>      COMPARE_OP              <span class="hljs-number">2</span> (==)<br>                <span class="hljs-number">62</span>      POP_JUMP_IF_FALSE       <span class="hljs-number">74</span><br>                <span class="hljs-number">64</span>      LOAD_FAST               <span class="hljs-number">0</span>: x<br>                <span class="hljs-number">66</span>      LOAD_CONST              <span class="hljs-number">1</span>: <span class="hljs-number">1</span><br>                <span class="hljs-number">68</span>      INPLACE_ADD             <br>                <span class="hljs-number">70</span>      STORE_FAST              <span class="hljs-number">0</span>: x<br>                <span class="hljs-number">72</span>      JUMP_FORWARD            <span class="hljs-number">50</span> (to <span class="hljs-number">124</span>)<br>                <span class="hljs-number">74</span>      LOAD_FAST               <span class="hljs-number">2</span>: step<br>                <span class="hljs-number">76</span>      LOAD_FAST               <span class="hljs-number">3</span>: i<br>                <span class="hljs-number">78</span>      BINARY_SUBSCR           <br>                <span class="hljs-number">80</span>      LOAD_CONST              <span class="hljs-number">4</span>: <span class="hljs-string">'a'</span><br>                <span class="hljs-number">82</span>      COMPARE_OP              <span class="hljs-number">2</span> (==)<br>                <span class="hljs-number">84</span>      POP_JUMP_IF_FALSE       <span class="hljs-number">96</span><br>                <span class="hljs-number">86</span>      LOAD_FAST               <span class="hljs-number">1</span>: y<br>                <span class="hljs-number">88</span>      LOAD_CONST              <span class="hljs-number">1</span>: <span class="hljs-number">1</span><br>                <span class="hljs-number">90</span>      INPLACE_SUBTRACT        <br>                <span class="hljs-number">92</span>      STORE_FAST              <span class="hljs-number">1</span>: y<br>                <span class="hljs-number">94</span>      JUMP_FORWARD            <span class="hljs-number">28</span> (to <span class="hljs-number">124</span>)<br>                <span class="hljs-number">96</span>      LOAD_FAST               <span class="hljs-number">2</span>: step<br>                <span class="hljs-number">98</span>      LOAD_FAST               <span class="hljs-number">3</span>: i<br>                <span class="hljs-number">100</span>     BINARY_SUBSCR           <br>                <span class="hljs-number">102</span>     LOAD_CONST              <span class="hljs-number">5</span>: <span class="hljs-string">'d'</span><br>                <span class="hljs-number">104</span>     COMPARE_OP              <span class="hljs-number">2</span> (==)<br>                <span class="hljs-number">106</span>     POP_JUMP_IF_FALSE       <span class="hljs-number">118</span><br>                <span class="hljs-number">108</span>     LOAD_FAST               <span class="hljs-number">1</span>: y<br>                <span class="hljs-number">110</span>     LOAD_CONST              <span class="hljs-number">1</span>: <span class="hljs-number">1</span><br>                <span class="hljs-number">112</span>     INPLACE_ADD             <br>                <span class="hljs-number">114</span>     STORE_FAST              <span class="hljs-number">1</span>: y<br>                <span class="hljs-number">116</span>     JUMP_FORWARD            <span class="hljs-number">6</span> (to <span class="hljs-number">124</span>)<br>                <span class="hljs-number">118</span>     POP_TOP                 <br>                <span class="hljs-number">120</span>     LOAD_CONST              <span class="hljs-number">6</span>: <span class="hljs-literal">False</span><br>                <span class="hljs-number">122</span>     RETURN_VALUE            <br>                <span class="hljs-number">124</span>     LOAD_GLOBAL             <span class="hljs-number">3</span>: _<span class="hljs-built_in">map</span><br>                <span class="hljs-number">126</span>     LOAD_FAST               <span class="hljs-number">0</span>: x<br>                <span class="hljs-number">128</span>     BINARY_SUBSCR           <br>                <span class="hljs-number">130</span>     LOAD_FAST               <span class="hljs-number">1</span>: y<br>                <span class="hljs-number">132</span>     BINARY_SUBSCR           <br>                <span class="hljs-number">134</span>     LOAD_CONST              <span class="hljs-number">1</span>: <span class="hljs-number">1</span><br>                <span class="hljs-number">136</span>     COMPARE_OP              <span class="hljs-number">2</span> (==)<br>                <span class="hljs-number">138</span>     POP_JUMP_IF_FALSE       <span class="hljs-number">146</span><br>                <span class="hljs-number">140</span>     POP_TOP                 <br>                <span class="hljs-number">142</span>     LOAD_CONST              <span class="hljs-number">6</span>: <span class="hljs-literal">False</span><br>                <span class="hljs-number">144</span>     RETURN_VALUE            <br>                <span class="hljs-number">146</span>     LOAD_FAST               <span class="hljs-number">0</span>: x<br>                <span class="hljs-number">148</span>     LOAD_CONST              <span class="hljs-number">7</span>: <span class="hljs-number">29</span><br>                <span class="hljs-number">150</span>     COMPARE_OP              <span class="hljs-number">2</span> (==)<br>                <span class="hljs-number">152</span>     POP_JUMP_IF_FALSE       <span class="hljs-number">26</span><br>                <span class="hljs-number">154</span>     LOAD_FAST               <span class="hljs-number">1</span>: y<br>                <span class="hljs-number">156</span>     LOAD_CONST              <span class="hljs-number">7</span>: <span class="hljs-number">29</span><br>                <span class="hljs-number">158</span>     COMPARE_OP              <span class="hljs-number">2</span> (==)<br>                <span class="hljs-number">160</span>     POP_JUMP_IF_FALSE       <span class="hljs-number">26</span><br>                <span class="hljs-number">162</span>     POP_TOP                 <br>                <span class="hljs-number">164</span>     LOAD_CONST              <span class="hljs-number">8</span>: <span class="hljs-literal">True</span><br>                <span class="hljs-number">166</span>     RETURN_VALUE            <br>                <span class="hljs-number">168</span>     JUMP_ABSOLUTE           <span class="hljs-number">26</span><br>                <span class="hljs-number">170</span>     LOAD_CONST              <span class="hljs-number">0</span>: <span class="hljs-literal">None</span><br>                <span class="hljs-number">172</span>     RETURN_VALUE            <br></code></pre></td></tr></tbody></table></figure><p><strong>其余主要是map数组，参考py字节码官网写出伪码</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">x=<span class="hljs-number">1</span><br>y=<span class="hljs-number">1</span><br>step=<span class="hljs-built_in">input</span>()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(step)):<br>    <span class="hljs-keyword">if</span> step[i]==<span class="hljs-string">'w'</span>:<br>        x-=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> step[i]==<span class="hljs-string">'s'</span>:<br>        x+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> step[i]==<span class="hljs-string">'a'</span>:<br>        y-=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> step[i]==<span class="hljs-string">'d'</span>:<br>        y+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'noo'</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">31</span>*x+y]==<span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'noo'</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> x==<span class="hljs-number">29</span> <span class="hljs-keyword">and</span> y==<span class="hljs-number">29</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">'yes'</span>)<br></code></pre></td></tr></tbody></table></figure><p><code>solve maze problem</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">uint8_t</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">961</span>] = { <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>};<br><span class="hljs-keyword">uint8_t</span> ans[<span class="hljs-number">256</span>] = { <span class="hljs-number">0</span> };<br><span class="hljs-keyword">uint8_t</span> visit[<span class="hljs-number">961</span>] = { <span class="hljs-number">0</span> };<br><span class="hljs-keyword">uint8_t</span> next[<span class="hljs-number">4</span>] = { <span class="hljs-number">119</span>,<span class="hljs-number">115</span>,<span class="hljs-number">97</span>,<span class="hljs-number">100</span> };<br><span class="hljs-keyword">uint32_t</span> step = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">maze</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> x, <span class="hljs-keyword">uint32_t</span> y)</span> </span>{<br>visit[<span class="hljs-number">31</span> * x + y] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">uint32_t</span> tx, ty;<br><span class="hljs-keyword">if</span> (x == <span class="hljs-number">29</span> &amp;&amp; y == <span class="hljs-number">29</span>) {<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"yes\n"</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; step; i++)<br>{<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>, ans[i]);<br>}<br><br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) {<br><span class="hljs-keyword">switch</span> (next[i])<br>{<br><span class="hljs-keyword">case</span> <span class="hljs-number">119</span>:<br>tx = x - <span class="hljs-number">1</span>;<br>ty = y;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">115</span>:<br>tx = x + <span class="hljs-number">1</span>;<br>ty = y;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">97</span>:<br>ty = y - <span class="hljs-number">1</span>;<br>tx = x;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">100</span>:<br>ty = y + <span class="hljs-number">1</span>;<br>tx = x;<br><span class="hljs-keyword">break</span>;<br>}<br><br><span class="hljs-keyword">if</span> ((tx &gt;= <span class="hljs-number">0</span> &amp;&amp; tx &lt; <span class="hljs-number">31</span>) &amp;&amp; (ty &gt;= <span class="hljs-number">0</span> &amp;&amp; ty &lt; <span class="hljs-number">31</span>) &amp;&amp; <span class="hljs-built_in">map</span>[<span class="hljs-number">31</span> * tx + ty] != <span class="hljs-number">1</span> &amp;&amp; visit[<span class="hljs-number">31</span> * tx + ty] == <span class="hljs-number">0</span>) {<br>ans[step] = next[i];<br>step += <span class="hljs-number">1</span>;<br>maze(tx, ty);<br>step -= <span class="hljs-number">1</span>;<br>}<br>}<br><span class="hljs-keyword">return</span>;<br>}<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>maze(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span class="hljs-comment">//print('VNCTF{'+md5('ssssddssaassddddwwwwddwwddddddwwddddddssddwwddddddddssssaawwaassaassaassddssaassaawwwwwwaaaaaaaassaassddddwwddssddssssaassddssssaaaaaawwddwwaawwwwaassssssssssssddddssddssddddddddwwaaaaaawwwwddssddwwwwwwwwddssddssssssssddddss'.encode()).hexdigest()+'}')</span><br><span class="hljs-comment">//VNCTF{801f190737434100e7d2790bd5b0732e}</span><br></code></pre></td></tr></tbody></table></figure><h3 id="cm狗">cm狗</h3><blockquote><p>go的虚拟机 索性是模拟的汇编大致相同，硬静态分析还是可以出的</p></blockquote><p><code>VM_Init</code> 将一些函数地址存在某偏移处，V1结构体有点大，没去定义。</p><p><code>VM_run</code></p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220212233121694.png" alt="image-20220212233121694"></p><p><strong>根据VM_Run可知指令长度是3Byte，并且0xFF4偏移处是eip，0x1000偏移是opcode，接下来是对20个fun的分析</strong></p><blockquote><p>为了减少工作量可以提前对opcode的地址码进行遍历，只解释用到的指令即可</p></blockquote><p>部分函数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __usercall main___ptr_MzVm__init_func2@&lt;rax&gt;(__int64 a1)<br>{<span class="hljs-comment">//高32位为Rnum 低32位为Lnum</span><br>  __int64 v1; <span class="hljs-comment">// rdx</span><br>  __int64 v2; <span class="hljs-comment">// rdx</span><br>  __int64 result; <span class="hljs-comment">// rax</span><br>  __int64 v4; <span class="hljs-comment">// [rsp+0h] [rbp-18h]</span><br><br>  v2 = *(_QWORD *)(v1 + <span class="hljs-number">8</span>);                     <span class="hljs-comment">// mov r[Lnum],Rnum</span><br>  result = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)a1;<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)a1 &gt;= <span class="hljs-number">0x15</span>uLL )<br>    runtime_panicIndex(v4);<br>  *(_DWORD *)(v2 + <span class="hljs-number">4LL</span> * (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)a1) = HIDWORD(a1);<span class="hljs-comment">// 0x14个寄存器 Lnum,Rnum</span><br>  <span class="hljs-keyword">return</span> result;<br>}<br><br><span class="hljs-keyword">unsigned</span> __int64 __usercall main___ptr_MzVm__init_func6@&lt;rax&gt;(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a1)<br>{<br>  __int64 v1; <span class="hljs-comment">// rdx</span><br>  __int64 v2; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-keyword">unsigned</span> __int64 result; <span class="hljs-comment">// rax</span><br>  __int64 v4; <span class="hljs-comment">// [rsp+0h] [rbp-18h]</span><br><br>  v2 = *(_QWORD *)(v1 + <span class="hljs-number">8</span>);<br>  result = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(*(_DWORD *)(v2 + <span class="hljs-number">0xFF8</span>) - <span class="hljs-number">1</span>);<br>  *(_DWORD *)(v2 + <span class="hljs-number">0xFF8</span>) = result;<br>  <span class="hljs-keyword">if</span> ( a1 &gt;= <span class="hljs-number">0x15</span>uLL )<br>    runtime_panicIndex(v4);<br>  <span class="hljs-keyword">if</span> ( result &gt;= <span class="hljs-number">0x3E8</span> )<br>    runtime_panicIndex(v4);<br>  *(_DWORD *)(v2 + <span class="hljs-number">4</span> * result + <span class="hljs-number">84</span>) = *(_DWORD *)(v2 + <span class="hljs-number">4LL</span> * a1);<span class="hljs-comment">// push r[Lnum]</span><br>  <span class="hljs-keyword">return</span> result;<br>}<br><br>__int64 __usercall main___ptr_MzVm__init_func13@&lt;rax&gt;(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a1)<br>{<br>  __int64 v1; <span class="hljs-comment">// rdx</span><br>  __int64 v2; <span class="hljs-comment">// rdx</span><br>  __int64 result; <span class="hljs-comment">// rax</span><br>  __int64 v4; <span class="hljs-comment">// [rsp+0h] [rbp-18h]</span><br><br>  v2 = *(_QWORD *)(v1 + <span class="hljs-number">8</span>);<br>  <span class="hljs-keyword">if</span> ( a1 &gt;= <span class="hljs-number">0x15</span>uLL )<br>    runtime_panicIndex(v4);<br>  result = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(<span class="hljs-number">3</span> * *(_DWORD *)(v2 + <span class="hljs-number">4LL</span> * a1));<span class="hljs-comment">// jmp r[Lnum]</span><br>  *(_DWORD *)(v2 + <span class="hljs-number">0xFF4</span>) = result;<br>  <span class="hljs-keyword">return</span> result;<br>}<br></code></pre></td></tr></tbody></table></figure><blockquote><p>记住几个重要的偏移，剩下的猜结合调试很快就能了解函数功能</p></blockquote><p><code>parser</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python">op=[opcode...]<br>f=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(op),<span class="hljs-number">3</span>):<br>   <span class="hljs-keyword">if</span> op[i]+<span class="hljs-number">1</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> f:<br>       f.append(op[i]+<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">'61336366'</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(op),<span class="hljs-number">3</span>):<br><br>    adr=op[i]+<span class="hljs-number">1</span><br>    Lnum=op[i+<span class="hljs-number">1</span>]<br>    Rnum=op[i+<span class="hljs-number">2</span>]<br><br>    <span class="hljs-keyword">if</span> adr==<span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f"nop"</span>)<br>    <span class="hljs-keyword">elif</span> adr==<span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f"mov r[<span class="hljs-subst">{Lnum}</span>],<span class="hljs-subst">{<span class="hljs-built_in">hex</span>(Rnum)}</span>"</span>)<br>    <span class="hljs-keyword">elif</span> adr==<span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f"mov r[<span class="hljs-subst">{Lnum}</span>],r[<span class="hljs-subst">{Rnum}</span>]"</span>)<br>    <span class="hljs-keyword">elif</span> adr==<span class="hljs-number">6</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f"push r[<span class="hljs-subst">{Lnum}</span>]"</span>)<br>    <span class="hljs-keyword">elif</span> adr==<span class="hljs-number">7</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f"pop r[<span class="hljs-subst">{Lnum}</span>]"</span>)<br>    <span class="hljs-keyword">elif</span> adr==<span class="hljs-number">8</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f"add r[<span class="hljs-subst">{Lnum}</span>],r[<span class="hljs-subst">{Rnum}</span>]"</span>)<br>    <span class="hljs-keyword">elif</span> adr==<span class="hljs-number">9</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f"sub r[<span class="hljs-subst">{Lnum}</span>],r[<span class="hljs-subst">{Rnum}</span>]"</span>)<br>    <span class="hljs-keyword">elif</span> adr==<span class="hljs-number">10</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f"div r[<span class="hljs-subst">{Lnum}</span>],r[<span class="hljs-subst">{Rnum}</span>]"</span>)<br>    <span class="hljs-keyword">elif</span> adr==<span class="hljs-number">11</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f"mul r[<span class="hljs-subst">{Lnum}</span>],r[<span class="hljs-subst">{Rnum}</span>]"</span>)<br>    <span class="hljs-keyword">elif</span> adr==<span class="hljs-number">12</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f"xor r[<span class="hljs-subst">{Lnum}</span>],r[<span class="hljs-subst">{Rnum}</span>]"</span>)<br>    <span class="hljs-keyword">elif</span> adr==<span class="hljs-number">13</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f"jmp r[<span class="hljs-subst">{Lnum}</span>]"</span>)<br>    <span class="hljs-keyword">elif</span> adr==<span class="hljs-number">15</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f"cmp r[<span class="hljs-subst">{Lnum}</span>],r[<span class="hljs-subst">{Rnum}</span>] -- jnz r[19]"</span>)<br>    <span class="hljs-keyword">elif</span> adr==<span class="hljs-number">0x62</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f"getchar(r[<span class="hljs-subst">{Lnum}</span>])"</span>)<br>    <span class="hljs-keyword">elif</span> adr==<span class="hljs-number">0x63</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f'putchar(r[<span class="hljs-subst">{Lnum}</span>)]'</span>)<br>    <span class="hljs-keyword">elif</span> adr==<span class="hljs-number">0x64</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%s: "</span>%<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">f"exit()"</span>)<br></code></pre></td></tr></tbody></table></figure><p><code>伪码</code></p><blockquote><p>截取片段，前面的putchar 输出 VNCTF…啥的</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0xcc: mov r[19],0x49<br>0xcf: mov r[3],0x0<br>0xd2: mov r[1],0x2b     #长度0x2b<br>0xd5: mov r[2],0x1<br>0xd8: getchar(r[0])<br>0xdb: push r[0]         #输入进栈<br>0xde: sub r[1],r[2]<br>0xe1: cmp r[1],r[3] -- jnz r[19]<br></code></pre></td></tr></tbody></table></figure><p><code>arry2int</code></p><p>4个Byte转为 int</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0xe4</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x0</span><br><span class="hljs-number">0xe7</span>: push r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0xea</span>: nop<br><span class="hljs-number">0xed</span>: nop<br><span class="hljs-number">0xf0</span>: pop r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0xf3</span>: mov r[<span class="hljs-number">5</span>],<span class="hljs-number">0x100</span><br><span class="hljs-number">0xf6</span>: mul r[<span class="hljs-number">0</span>],r[<span class="hljs-number">5</span>]<br><span class="hljs-number">0xf9</span>: mov r[<span class="hljs-number">6</span>],r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0xfc</span>: pop r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0xff</span>: add r[<span class="hljs-number">6</span>],r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x102</span>: mov r[<span class="hljs-number">0</span>],r[<span class="hljs-number">6</span>]<br><span class="hljs-number">0x105</span>: mul r[<span class="hljs-number">0</span>],r[<span class="hljs-number">5</span>]<br><span class="hljs-number">0x108</span>: mov r[<span class="hljs-number">6</span>],r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x10b</span>: pop r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x10e</span>: add r[<span class="hljs-number">6</span>],r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x111</span>: mov r[<span class="hljs-number">0</span>],r[<span class="hljs-number">6</span>]<br><span class="hljs-number">0x114</span>: mul r[<span class="hljs-number">0</span>],r[<span class="hljs-number">5</span>]<br><span class="hljs-number">0x117</span>: mov r[<span class="hljs-number">6</span>],r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x11a</span>: pop r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x11d</span>: add r[<span class="hljs-number">6</span>],r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x120</span>: nop<br></code></pre></td></tr></tbody></table></figure><p><code>Tea</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x3f9: mov r[3],0x9e3779b9 ;delta<br>0x3fc: mov r[4],0x95c4c    ;key<br>0x3ff: mov r[5],0x871d<br>0x402: mov r[6],0x1a7b7<br>0x405: mov r[7],0x12c7c7<br>0x408: mov r[8],0x0<br>0x40b: mov r[17],0x10<br>0x40e: mov r[18],0x20<br>0x411: mov r[19],0x160<br>0x414: mov r[10],0x0<br>0x417: mov r[11],0x20<br>0x41a: mov r[12],0x1<br>0x41d: add r[8],r[3]<br>0x420: mov r[0],r[2]<br>0x423: mul r[0],r[17]<br>0x426: add r[0],r[4]<br>0x429: mov r[14],r[0]<br>0x42c: mov r[0],r[2]<br>0x42f: add r[0],r[8]<br>0x432: mov r[15],r[0]<br>0x435: mov r[0],r[2]<br>0x438: div r[0],r[18]<br>0x43b: add r[0],r[5]<br>0x43e: mov r[16],r[0]<br>0x441: mov r[0],r[14]<br>0x444: xor r[0],r[15]<br>0x447: xor r[0],r[16]<br>0x44a: add r[1],r[0]<br>0x44d: mov r[0],r[1]<br>0x450: mul r[0],r[17]<br>0x453: add r[0],r[6]<br>0x456: mov r[14],r[0]<br>0x459: mov r[0],r[1]<br>0x45c: add r[0],r[8]<br>0x45f: mov r[15],r[0]<br>0x462: mov r[0],r[1]<br>0x465: div r[0],r[18]<br>0x468: add r[0],r[7]<br>0x46b: mov r[16],r[0]<br>0x46e: mov r[0],r[14]<br>0x471: xor r[0],r[15]<br>0x474: xor r[0],r[16]<br>0x477: add r[2],r[0]<br>0x47a: sub r[11],r[12]<br>0x47d: cmp r[11],r[10] -- jnz r[19]<br>0x480: jmp r[20]<br>0x483: nop<br></code></pre></td></tr></tbody></table></figure><p>感谢作者Tea不魔改之恩</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x348</span>: mov r[<span class="hljs-number">20</span>],<span class="hljs-number">0x11c</span><br><span class="hljs-number">0x34b</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x154</span><br><span class="hljs-number">0x34e</span>: jmp r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x351</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0xe8d1d5df</span><br><span class="hljs-number">0x354</span>: mov r[<span class="hljs-number">19</span>],<span class="hljs-number">0x183</span><br><span class="hljs-number">0x357</span>: mov r[<span class="hljs-number">20</span>],<span class="hljs-number">0x153</span><br><span class="hljs-number">0x35a</span>: cmp r[<span class="hljs-number">1</span>],r[<span class="hljs-number">0</span>] -- jnz r[<span class="hljs-number">19</span>]<br><span class="hljs-number">0x35d</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0xf5e3c114</span><br><span class="hljs-number">0x360</span>: cmp r[<span class="hljs-number">2</span>],r[<span class="hljs-number">0</span>] -- jnz r[<span class="hljs-number">19</span>]<br><span class="hljs-number">0x363</span>: pop r[<span class="hljs-number">1</span>]<br><span class="hljs-number">0x366</span>: pop r[<span class="hljs-number">2</span>]<br><span class="hljs-number">0x369</span>: mov r[<span class="hljs-number">20</span>],<span class="hljs-number">0x127</span><br><span class="hljs-number">0x36c</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x154</span><br><span class="hljs-number">0x36f</span>: jmp r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x372</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x228ec216</span><br><span class="hljs-number">0x375</span>: mov r[<span class="hljs-number">19</span>],<span class="hljs-number">0x183</span><br><span class="hljs-number">0x378</span>: mov r[<span class="hljs-number">20</span>],<span class="hljs-number">0x153</span><br><span class="hljs-number">0x37b</span>: cmp r[<span class="hljs-number">1</span>],r[<span class="hljs-number">0</span>] -- jnz r[<span class="hljs-number">19</span>]<br><span class="hljs-number">0x37e</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x89d45a61</span><br><span class="hljs-number">0x381</span>: cmp r[<span class="hljs-number">2</span>],r[<span class="hljs-number">0</span>] -- jnz r[<span class="hljs-number">19</span>]<br><span class="hljs-number">0x384</span>: pop r[<span class="hljs-number">1</span>]<br><span class="hljs-number">0x387</span>: pop r[<span class="hljs-number">2</span>]<br><span class="hljs-number">0x38a</span>: mov r[<span class="hljs-number">20</span>],<span class="hljs-number">0x132</span><br><span class="hljs-number">0x38d</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x154</span><br><span class="hljs-number">0x390</span>: jmp r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x393</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x655b8f69</span><br><span class="hljs-number">0x396</span>: mov r[<span class="hljs-number">19</span>],<span class="hljs-number">0x183</span><br><span class="hljs-number">0x399</span>: mov r[<span class="hljs-number">20</span>],<span class="hljs-number">0x153</span><br><span class="hljs-number">0x39c</span>: cmp r[<span class="hljs-number">1</span>],r[<span class="hljs-number">0</span>] -- jnz r[<span class="hljs-number">19</span>]<br><span class="hljs-number">0x39f</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x2484a07a</span><br><span class="hljs-number">0x3a2</span>: cmp r[<span class="hljs-number">2</span>],r[<span class="hljs-number">0</span>] -- jnz r[<span class="hljs-number">19</span>]<br><span class="hljs-number">0x3a5</span>: pop r[<span class="hljs-number">1</span>]<br><span class="hljs-number">0x3a8</span>: pop r[<span class="hljs-number">2</span>]<br><span class="hljs-number">0x3ab</span>: mov r[<span class="hljs-number">20</span>],<span class="hljs-number">0x13d</span><br><span class="hljs-number">0x3ae</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x154</span><br><span class="hljs-number">0x3b1</span>: jmp r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x3b4</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0xd9e5e7f8</span><br><span class="hljs-number">0x3b7</span>: mov r[<span class="hljs-number">19</span>],<span class="hljs-number">0x183</span><br><span class="hljs-number">0x3ba</span>: mov r[<span class="hljs-number">20</span>],<span class="hljs-number">0x153</span><br><span class="hljs-number">0x3bd</span>: cmp r[<span class="hljs-number">1</span>],r[<span class="hljs-number">0</span>] -- jnz r[<span class="hljs-number">19</span>]<br><span class="hljs-number">0x3c0</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x3a441532</span><br><span class="hljs-number">0x3c3</span>: cmp r[<span class="hljs-number">2</span>],r[<span class="hljs-number">0</span>] -- jnz r[<span class="hljs-number">19</span>]<br><span class="hljs-number">0x3c6</span>: pop r[<span class="hljs-number">1</span>]<br><span class="hljs-number">0x3c9</span>: pop r[<span class="hljs-number">2</span>]<br><span class="hljs-number">0x3cc</span>: mov r[<span class="hljs-number">20</span>],<span class="hljs-number">0x148</span><br><span class="hljs-number">0x3cf</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x154</span><br><span class="hljs-number">0x3d2</span>: jmp r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x3d5</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x91ab7e88</span><br><span class="hljs-number">0x3d8</span>: mov r[<span class="hljs-number">19</span>],<span class="hljs-number">0x183</span><br><span class="hljs-number">0x3db</span>: mov r[<span class="hljs-number">20</span>],<span class="hljs-number">0x153</span><br><span class="hljs-number">0x3de</span>: cmp r[<span class="hljs-number">1</span>],r[<span class="hljs-number">0</span>] -- jnz r[<span class="hljs-number">19</span>]<br><span class="hljs-number">0x3e1</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x69fc64bc</span><br><span class="hljs-number">0x3e4</span>: cmp r[<span class="hljs-number">2</span>],r[<span class="hljs-number">0</span>] -- jnz r[<span class="hljs-number">19</span>]<br><span class="hljs-number">0x3e7</span>: pop r[<span class="hljs-number">1</span>]<br><span class="hljs-number">0x3ea</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x7d3765</span><br><span class="hljs-number">0x3ed</span>: cmp r[<span class="hljs-number">1</span>],r[<span class="hljs-number">0</span>] -- jnz r[<span class="hljs-number">19</span>]<br><span class="hljs-number">0x3f0</span>: mov r[<span class="hljs-number">0</span>],<span class="hljs-number">0x189</span><br><span class="hljs-number">0x3f3</span>: jmp r[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x3f6</span>: <span class="hljs-built_in">exit</span>()<br></code></pre></td></tr></tbody></table></figure><p>长度44，转为int是11个，前10个两两一组Tea，最后一个不处理，解密即可。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ut32 unsigned int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> delta 0x9E3779B9</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Tea_Decrypt</span><span class="hljs-params">(ut32* enc, ut32* k)</span> </span>{<br>ut32 sum = delta * <span class="hljs-number">0x20</span>;<br>ut32 v0 = enc[<span class="hljs-number">0</span>];<br>ut32 v1 = enc[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x20</span>; i++) {<br>v1 -= ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">3</span>]);<br>v0 -= ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k[<span class="hljs-number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k[<span class="hljs-number">1</span>]);<br>sum -= delta;<br>}<br>enc[<span class="hljs-number">0</span>] = v0;<br>enc[<span class="hljs-number">1</span>] = v1;<br>}<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>ut32 m[<span class="hljs-number">2</span>] = { <span class="hljs-number">0xe8d1d5df</span>,<span class="hljs-number">0xf5e3c114</span> }; <span class="hljs-comment">//依次密文</span><br>ut32 k[<span class="hljs-number">4</span>] = { <span class="hljs-number">0x95c4c</span>,<span class="hljs-number">0x871d</span>,<span class="hljs-number">0x1a7b7</span>,<span class="hljs-number">0x12c7c7</span>};<br>Tea_Decrypt(m, k);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%x %x"</span>, m[<span class="hljs-number">0</span>], m[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span class="hljs-comment">//常规Tea解密</span><br><span class="hljs-comment">//VNCTF{ecd63ae5-8945-4ac4-b5a5-34fc3ade81e7}</span><br></code></pre></td></tr></tbody></table></figure><h3 id="cm1">cm1</h3><blockquote><p>Android题主要逻辑在隐藏的一个dex文件中</p></blockquote><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220212234819160.png" alt="image-20220212234819160" style="zoom:80%;"><p>主要是copyfile这个函数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyFiles</span><span class="hljs-params">(android.content.Context r6, java.lang.String r7, java.io.File r8)</span> </span>{<br><br>        java.lang.String r0 = <span class="hljs-string">"vn2022"</span><br>        <span class="hljs-keyword">byte</span>[] r0 = r0.getBytes()<br>        r1 = <span class="hljs-number">0</span><br>        android.content.Context r6 = r6.getApplicationContext()     <span class="hljs-comment">// Catch: IOException -&gt; 0x005a, all -&gt; 0x0056</span><br>        android.content.res.AssetManager r6 = r6.getAssets()     <span class="hljs-comment">// Catch: IOException -&gt; 0x005a, all -&gt; 0x0056</span><br>        java.io.InputStream r6 = r6.open(r7)     <span class="hljs-comment">// Catch: IOException -&gt; 0x005a, all -&gt; 0x0056</span><br>        java.io.FileOutputStream r7 = <span class="hljs-keyword">new</span> java.io.FileOutputStream     <span class="hljs-comment">// Catch: IOException -&gt; 0x0052, all -&gt; 0x004f</span><br>        java.lang.String r8 = r8.getAbsolutePath()     <span class="hljs-comment">// Catch: IOException -&gt; 0x0052, all -&gt; 0x004f</span><br>        r7.&lt;init&gt;(r8)     <span class="hljs-comment">// Catch: IOException -&gt; 0x0052, all -&gt; 0x004f</span><br>        r8 = <span class="hljs-number">1024</span>(<span class="hljs-number">0x400</span>, <span class="hljs-keyword">float</span>:<span class="hljs-number">1.435E-42</span>)<br>        <span class="hljs-keyword">byte</span>[] r8 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[r8]     <span class="hljs-comment">// Catch: IOException -&gt; 0x004d, all -&gt; 0x004b</span><br>    L_0x0020:<br>        <span class="hljs-keyword">int</span> r1 = r6.read(r8)     <span class="hljs-comment">// Catch: IOException -&gt; 0x004d, all -&gt; 0x004b</span><br>        r2 = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> (r1 == r2) goto L_0x003f<br>        r2 = <span class="hljs-number">0</span><br>        r3 = <span class="hljs-number">0</span><br>    L_0x0029:<br>        <span class="hljs-keyword">if</span> (r3 &gt;= r1) goto L_0x003b<br>        <span class="hljs-keyword">byte</span> r4 = r8[r3]     <span class="hljs-comment">// Catch: IOException -&gt; 0x004d, all -&gt; 0x004b</span><br>        <span class="hljs-keyword">int</span> r5 = r0.length     <span class="hljs-comment">// Catch: IOException -&gt; 0x004d, all -&gt; 0x004b</span><br>        <span class="hljs-keyword">int</span> r5 = r3 % r5<br>        <span class="hljs-keyword">byte</span> r5 = r0[r5]     <span class="hljs-comment">// Catch: IOException -&gt; 0x004d, all -&gt; 0x004b</span><br>        r4 = r4 ^ r5<br>        r4 = r4 &amp; <span class="hljs-number">255</span>(<span class="hljs-number">0xff</span>, <span class="hljs-keyword">float</span>:<span class="hljs-number">3.57E-43</span>)<br>        <span class="hljs-keyword">byte</span> r4 = (<span class="hljs-keyword">byte</span>) r4     <span class="hljs-comment">// Catch: IOException -&gt; 0x004d, all -&gt; 0x004b</span><br>        r8[r3] = r4     <span class="hljs-comment">// Catch: IOException -&gt; 0x004d, all -&gt; 0x004b</span><br>        <span class="hljs-keyword">int</span> r3 = r3 + <span class="hljs-number">1</span><br>        goto L_0x0029<br>    L_0x003b:<br>        r7.write(r8, r2, r1)     <span class="hljs-comment">// Catch: IOException -&gt; 0x004d, all -&gt; 0x004b</span><br>        goto L_0x0020<br><br></code></pre></td></tr></tbody></table></figure><blockquote><p>有点小坑，这里是1024byte读取一次，每次重新开始与vn2022异或，不是直接异或 (坑死了,粗心)</p></blockquote><p><code>re dex</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">key=<span class="hljs-string">b'vn2022'</span><br>f1=<span class="hljs-built_in">open</span>(<span class="hljs-string">r'ooo'</span>,<span class="hljs-string">'rb+'</span>)<br>f2=<span class="hljs-built_in">open</span>(<span class="hljs-string">r'111'</span>,<span class="hljs-string">'wb+'</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    t=[]<br>    s=f1.read(<span class="hljs-number">1024</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s)==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>       t.append(s[i]^key[i%<span class="hljs-built_in">len</span>(key)])<br>    f2.write(<span class="hljs-built_in">bytes</span>(t))<br></code></pre></td></tr></tbody></table></figure><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220212235258147.png" alt="image-20220212235258147"></p><blockquote><p>主体是XXtea，其余就是一些 arry2int 小端序变化 ，请出祖传的XXTea脚本即可，delta没魔改(-法转为+法补码是一样的)</p></blockquote><p>获取key和enc,其实就是小端序转int</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>a=<span class="hljs-string">b'H4pPY_VNCTF!!OvO'</span><br>r=[<span class="hljs-number">0</span>]*<span class="hljs-number">4</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    i2 = i &gt;&gt; <span class="hljs-number">2</span><br>    r[i2] = r[i2] | ((a[i] &amp; <span class="hljs-number">255</span>) &lt;&lt; ((i &amp; <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">3</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i),end=<span class="hljs-string">','</span>)<br><br><span class="hljs-built_in">print</span>()<br>enc=[<span class="hljs-number">0</span>]*<span class="hljs-number">11</span><br>c=[<span class="hljs-number">0x44</span> ,<span class="hljs-number">0x27</span> ,<span class="hljs-number">0xffffffa4</span> ,<span class="hljs-number">0x6c</span> ,<span class="hljs-number">0xffffffae</span> ,<span class="hljs-number">0xffffffee</span> ,<span class="hljs-number">0x48</span> ,<span class="hljs-number">0xffffffc9</span> ,<span class="hljs-number">0x4a</span> ,<span class="hljs-number">0xffffffc8</span> ,<span class="hljs-number">0x26</span> ,<span class="hljs-number">0x0b</span> ,<span class="hljs-number">0x3c</span> ,<span class="hljs-number">0x54</span> ,<span class="hljs-number">0x61</span> ,<span class="hljs-number">0xffffffd8</span> ,<span class="hljs-number">0x57</span> ,<span class="hljs-number">0x47</span> ,<span class="hljs-number">0x63</span> ,<span class="hljs-number">0xffffffae</span> ,<span class="hljs-number">0x78</span> ,<span class="hljs-number">0x68</span> ,<span class="hljs-number">0x2f</span> ,<span class="hljs-number">0xffffffb9</span> ,<span class="hljs-number">0xffffffc6</span> ,<span class="hljs-number">0xffffffc7</span> ,<span class="hljs-number">0x00</span> ,<span class="hljs-number">0x21</span> ,<span class="hljs-number">0x2a</span> ,<span class="hljs-number">0x26</span> ,<span class="hljs-number">0xffffffd4</span> ,<span class="hljs-number">0xffffffd9</span> ,<span class="hljs-number">0xffffffc4</span> ,<span class="hljs-number">0x71</span> ,<span class="hljs-number">0xfffffffe</span> ,<span class="hljs-number">0x5c</span> ,<span class="hljs-number">0xffffffb5</span> ,<span class="hljs-number">0x76</span> ,<span class="hljs-number">0xffffffb3</span> ,<span class="hljs-number">0x32</span> ,<span class="hljs-number">0xffffff87</span> ,<span class="hljs-number">0x2b</span> ,<span class="hljs-number">0x20</span> ,<span class="hljs-number">0xffffff96</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>    i2 = i &gt;&gt; <span class="hljs-number">2</span><br>    enc[i2] = enc[i2] | ((c[i] &amp; <span class="hljs-number">255</span>) &lt;&lt; ((i &amp; <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">3</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i),end=<span class="hljs-string">','</span>)<br><span class="hljs-built_in">print</span>()<br>key=[<span class="hljs-number">0x50703448</span>,<span class="hljs-number">0x4e565f59</span>,<span class="hljs-number">0x21465443</span>,<span class="hljs-number">0x4f764f21</span>]<br>enc=[<span class="hljs-number">0x6ca42744</span>,<span class="hljs-number">0xc948eeae</span>,<span class="hljs-number">0xb26c84a</span>,<span class="hljs-number">0xd861543c</span>,<span class="hljs-number">0xae634757</span>,<span class="hljs-number">0xb92f6878</span>,<span class="hljs-number">0x2100c7c6</span>,<span class="hljs-number">0xd9d4262a</span>,<span class="hljs-number">0x5cfe71c4</span>,<span class="hljs-number">0x32b376b5</span>,<span class="hljs-number">0x96202b87</span>]<br></code></pre></td></tr></tbody></table></figure><p><code>XXtea</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DELTA 0x9e3779b9</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MX (((z&gt;&gt;5^y<span class="hljs-meta-string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">btea</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span>* v, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">uint32_t</span> <span class="hljs-keyword">const</span> key[<span class="hljs-number">4</span>])</span> </span>{<br>    <span class="hljs-keyword">uint32_t</span> y, z, sum;<br>    <span class="hljs-keyword">unsigned</span> p, rounds, e;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) {          <span class="hljs-comment">/* Coding Part */</span><br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n; <span class="hljs-comment">//加密轮数</span><br>        sum = <span class="hljs-number">0</span>;<br>        z = v[n - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">do</span> {<br>            sum += DELTA;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; n - <span class="hljs-number">1</span>; p++) {<br>                y = v[p + <span class="hljs-number">1</span>];<br>                z = v[p] += MX;<br>            }<br>            y = v[<span class="hljs-number">0</span>];<br>            z = v[n - <span class="hljs-number">1</span>] += MX;<br>        } <span class="hljs-keyword">while</span> (--rounds);<br>    }<br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">-1</span>) {  <span class="hljs-comment">/* Decoding Part */</span><br>        n = -n;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = rounds * DELTA;<br>        y = v[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">do</span> {<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = n - <span class="hljs-number">1</span>; p &gt; <span class="hljs-number">0</span>; p--) {<br>                z = v[p - <span class="hljs-number">1</span>];<br>                y = v[p] -= MX;<br>            }<br>            z = v[n - <span class="hljs-number">1</span>];<br>            y = v[<span class="hljs-number">0</span>] -= MX;<br>            sum -= DELTA;<br>        } <span class="hljs-keyword">while</span> (--rounds);<br>    }<br>}<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> m[<span class="hljs-number">11</span>] = { <span class="hljs-number">0x6ca42744</span>,<span class="hljs-number">0xc948eeae</span>,<span class="hljs-number">0xb26c84a</span>,<span class="hljs-number">0xd861543c</span>,<span class="hljs-number">0xae634757</span>,<span class="hljs-number">0xb92f6878</span>,<span class="hljs-number">0x2100c7c6</span>,<span class="hljs-number">0xd9d4262a</span>,<span class="hljs-number">0x5cfe71c4</span>,<span class="hljs-number">0x32b376b5</span>,<span class="hljs-number">0x96202b87</span> };<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> k[<span class="hljs-number">4</span>] = { <span class="hljs-number">0x50703448</span>,<span class="hljs-number">0x4e565f59</span>,<span class="hljs-number">0x21465443</span>,<span class="hljs-number">0x4f764f21</span> };<br>    btea(m, <span class="hljs-number">-11</span>, k);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) {<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"0x%x ,"</span>,m[i]);<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-comment">//VNCTF{93ee7688-f216-42cb-a5c2-191ff4e412ba} </span><br></code></pre></td></tr></tbody></table></figure><h3 id="时空飞行">时空飞行</h3><blockquote><p>太遗憾了，被C++的符号搞懵逼了</p></blockquote><p>首先是求日期,处理函数类似SM4的秘钥扩展，不过L函数魔改了</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> __fastcall <span class="hljs-title">SM4_keyInit</span><span class="hljs-params">(_DWORD *a1, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *a2)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-keyword">int</span> v2; <span class="hljs-comment">// esi</span><br>  <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-keyword">int</span> v4[<span class="hljs-number">36</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-B0h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v5; <span class="hljs-comment">// [rsp+B0h] [rbp-20h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// [rsp+B4h] [rbp-1Ch]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v7; <span class="hljs-comment">// [rsp+B8h] [rbp-18h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v8; <span class="hljs-comment">// [rsp+BCh] [rbp-14h]</span><br>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+CCh] [rbp-4h]</span><br><br>  v5 = _byteswap_ulong(*a2);<br>  v6 = _byteswap_ulong(a2[<span class="hljs-number">1</span>]);<br>  v7 = _byteswap_ulong(a2[<span class="hljs-number">2</span>]);<br>  v8 = _byteswap_ulong(a2[<span class="hljs-number">3</span>]);<br>  v4[<span class="hljs-number">0</span>] = v5 ^ <span class="hljs-number">0xA3B1BAC6</span>;<br>  v4[<span class="hljs-number">1</span>] = v6 ^ <span class="hljs-number">0x56AA3350</span>;<br>  v4[<span class="hljs-number">2</span>] = v7 ^ <span class="hljs-number">0x677D9197</span>;<br>  v4[<span class="hljs-number">3</span>] = v8 ^ <span class="hljs-number">0xB27022DC</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">31</span>; ++i )<br>  {<br>    v2 = i + <span class="hljs-number">4</span>;<br>    v3 = v4[i];<br>    v4[v2] = sub_401A3B(v4[i + <span class="hljs-number">3</span>] ^ v4[i + <span class="hljs-number">2</span>] ^ (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)v4[i + <span class="hljs-number">1</span>] ^ CK[i]) ^ v3;<br>    a1[i] = v4[i + <span class="hljs-number">4</span>];<br>  }<br>}<br><br><span class="hljs-function">__int64 __fastcall <span class="hljs-title">sub_401A3B</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-keyword">return</span> a1 ^ (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(__ROL4__(a1, <span class="hljs-number">13</span>) ^ __ROR4__(a1, <span class="hljs-number">9</span>));<br>}<br></code></pre></td></tr></tbody></table></figure><p>给出了Rkey的后4位，直接逆序往前推即可，主要加密是异或，具有对称性。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">L</span>(<span class="hljs-params">a</span>):</span><br>    x=((a&lt;&lt;<span class="hljs-number">13</span>)|(a&gt;&gt;(<span class="hljs-number">32</span>-<span class="hljs-number">13</span>)))&amp;<span class="hljs-number">0xffffffff</span><br>    y=((a&gt;&gt;<span class="hljs-number">9</span>)|(a&lt;&lt;(<span class="hljs-number">32</span>-<span class="hljs-number">9</span>)))&amp;<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> x^y^a<br>FK=[<span class="hljs-number">0xa3b1bac6</span>, <span class="hljs-number">0x56aa3350</span>, <span class="hljs-number">0x677d9197</span>, <span class="hljs-number">0xb27022dc</span>]<br>CK=[<span class="hljs-number">0x00070E15</span>, <span class="hljs-number">0x1C232A31</span>, <span class="hljs-number">0x383F464D</span>, <span class="hljs-number">0x545B6269</span>, <span class="hljs-number">0x70777E85</span>, <span class="hljs-number">0x8C939AA1</span>, <span class="hljs-number">0xA8AFB6BD</span>, <span class="hljs-number">0xC4CBD2D9</span>,<br>    <span class="hljs-number">0xE0E7EEF5</span>, <span class="hljs-number">0xFC030A11</span>, <span class="hljs-number">0x181F262D</span>, <span class="hljs-number">0x343B4249</span>, <span class="hljs-number">0x50575E65</span>, <span class="hljs-number">0x6C737A81</span>, <span class="hljs-number">0x888F969D</span>, <span class="hljs-number">0xA4ABB2B9</span>,<br>    <span class="hljs-number">0xC0C7CED5</span>, <span class="hljs-number">0xDCE3EAF1</span>, <span class="hljs-number">0xF8FF060D</span>, <span class="hljs-number">0x141B2229</span>, <span class="hljs-number">0x30373E45</span>, <span class="hljs-number">0x4C535A61</span>, <span class="hljs-number">0x686F767D</span>, <span class="hljs-number">0x848B9299</span>,<br>    <span class="hljs-number">0xA0A7AEB5</span>, <span class="hljs-number">0xBCC3CAD1</span>, <span class="hljs-number">0xD8DFE6ED</span>, <span class="hljs-number">0xF4FB0209</span>, <span class="hljs-number">0x10171E25</span>, <span class="hljs-number">0x2C333A41</span>, <span class="hljs-number">0x484F565D</span>, <span class="hljs-number">0x646B7279</span>]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change</span>(<span class="hljs-params">k</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        k[i]^=FK[i]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        tmp=L(k[i+<span class="hljs-number">1</span>]^k[i+<span class="hljs-number">2</span>]^k[i+<span class="hljs-number">3</span>]^CK[i])<br>        k.append(tmp^k[i])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>,<span class="hljs-number">36</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(k[i]),end=<span class="hljs-string">','</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse</span>():</span><br>    k=[<span class="hljs-number">0</span>]*<span class="hljs-number">36</span><br>    k[<span class="hljs-number">32</span>] = <span class="hljs-number">0xFD07C452</span><br>    k[<span class="hljs-number">33</span>] = <span class="hljs-number">0xEC90A488</span><br>    k[<span class="hljs-number">34</span>] = <span class="hljs-number">0x68D33CD1</span><br>    k[<span class="hljs-number">35</span>] = <span class="hljs-number">0x96F64587</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        tmp=L(k[i+<span class="hljs-number">1</span>]^k[i+<span class="hljs-number">2</span>]^k[i+<span class="hljs-number">3</span>]^CK[i])<br>        k[i]=tmp^k[i+<span class="hljs-number">4</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        k[i] ^= FK[i]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>.to_bytes(k[i],<span class="hljs-number">4</span>,<span class="hljs-string">'big'</span>).decode(),end=<span class="hljs-string">''</span>)<br><br>reverse()<br><span class="hljs-comment">#20211205</span><br></code></pre></td></tr></tbody></table></figure><p>之后又进行输入，第一次处理函数类似AES秘钥扩展</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">5</span>; ++i )<br>    a1[i] = sub_401E21((<span class="hljs-keyword">char</span> *)(<span class="hljs-number">4</span> * i + a2));   <span class="hljs-comment">// 大端序</span><br>  v5 = <span class="hljs-number">6</span>;<br>  v3 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( v5 &lt;= <span class="hljs-number">65</span> )<br>  {<br>    <span class="hljs-keyword">if</span> ( v5 % <span class="hljs-number">6</span> )<br>    {<br>      a1[v5] = a1[v5 - <span class="hljs-number">6</span>] ^ a1[v5 - <span class="hljs-number">1</span>];<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>      v2 = a1[v5 - <span class="hljs-number">6</span>];<br>      a1[v5] = v2 ^ sub_401FFB(a1[v5 - <span class="hljs-number">1</span>], v3++);<br>    }<br>    ++v5;<br>  }<br>}<br><br><span class="hljs-function">__int64 __fastcall <span class="hljs-title">sub_401FFB</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a1, <span class="hljs-keyword">int</span> a2)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-keyword">char</span> v3[<span class="hljs-number">28</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-20h] BYREF</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// [rsp+3Ch] [rbp-4h]</span><br><br>  int_to_array(a1, v3);                         <span class="hljs-comment">// 大端</span><br>  shift_left1(v3, <span class="hljs-number">1</span>i64);<span class="hljs-comment">//左移一</span><br>  v4 = array_to_int(v3);<span class="hljs-comment">// 大端</span><br>  <span class="hljs-keyword">return</span> v4 ^ round_key[a2];<span class="hljs-comment">//异或轮秘钥</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>之后转为小端序进行一个不可逆的异或处理。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">5</span>; ++i )                    <span class="hljs-comment">// 扩展为66 v5是24个字节</span><br>{<br>  v4[<span class="hljs-number">4</span> * i] = (<span class="hljs-keyword">unsigned</span> __int8)ext_key[i + <span class="hljs-number">60</span>];<br>  v4[<span class="hljs-number">4</span> * i + <span class="hljs-number">1</span>] = (<span class="hljs-keyword">unsigned</span> __int8)BYTE1(ext_key[i + <span class="hljs-number">60</span>]);<br>  v4[<span class="hljs-number">4</span> * i + <span class="hljs-number">2</span>] = (<span class="hljs-keyword">unsigned</span> __int8)BYTE2(ext_key[i + <span class="hljs-number">60</span>]);<br>  v4[<span class="hljs-number">4</span> * i + <span class="hljs-number">3</span>] = HIBYTE(ext_key[i + <span class="hljs-number">60</span>]);<br>}                                             <span class="hljs-comment">// v4是最后一轮key</span><br><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">23</span>; ++i )<br>  v4[i - <span class="hljs-number">1</span>] ^= (v4[i - <span class="hljs-number">1</span>] % <span class="hljs-number">0x12</span>u + v4[i] + <span class="hljs-number">5</span>) ^ <span class="hljs-number">0x41</span>;<br></code></pre></td></tr></tbody></table></figure><p><strong>之前遇到过类似不可逆的处理，可以用dfs爆破所有结果。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct, copy<br><span class="hljs-comment">#key1='20211205'</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">arr2int</span>(<span class="hljs-params">k</span>):</span>      <span class="hljs-comment">#小端</span><br>    m=[<span class="hljs-number">0</span>]*(<span class="hljs-built_in">len</span>(k)//<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(k)):<br>        m[i//<span class="hljs-number">4</span>]|=k[i]&lt;&lt;((i&amp;<span class="hljs-number">3</span>)*<span class="hljs-number">8</span>)<br>    <span class="hljs-keyword">return</span> m<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">F</span>(<span class="hljs-params">a,<span class="hljs-built_in">round</span></span>):</span><br>    s=<span class="hljs-built_in">hex</span>(a)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)<br>    k=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>): <span class="hljs-comment">#大端序</span><br>       k.append(<span class="hljs-built_in">int</span>(s[i:i+<span class="hljs-number">2</span>],<span class="hljs-number">16</span>))<br>    m=[<span class="hljs-number">0</span>]*<span class="hljs-number">4</span><br>    m[<span class="hljs-number">0</span>]=k[<span class="hljs-number">1</span>]<br>    m[<span class="hljs-number">1</span>]=k[<span class="hljs-number">2</span>]<br>    m[<span class="hljs-number">2</span>]=k[<span class="hljs-number">3</span>]<br>    m[<span class="hljs-number">3</span>]=k[<span class="hljs-number">0</span>]<br><br>    ans=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        ans|=m[i]&lt;&lt;((<span class="hljs-number">3</span>-i)*<span class="hljs-number">8</span>)<br><br>    <span class="hljs-keyword">return</span> ans^rk[<span class="hljs-built_in">round</span>]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs_get_cipher2</span>(<span class="hljs-params">k</span>):</span>                                 <span class="hljs-comment"># 递归枚举所可能的密文</span><br>    <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>:<br>        cipher_list.append(copy.deepcopy(c))<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x100</span>):<br>        <span class="hljs-keyword">if</span> final[k-<span class="hljs-number">1</span>] ==  j^(j%<span class="hljs-number">0x12</span>+c[k] + <span class="hljs-number">5</span>)^<span class="hljs-number">0x41</span> :<br>            c[k-<span class="hljs-number">1</span>] = j<br>            dfs_get_cipher2(k-<span class="hljs-number">1</span>)<br><br>final = <span class="hljs-string">b'%\x15\xdf\xa2\xc0\x93\xad\x14F\xc5\x0f.\x9a\xeb0\xf8 \xe9\xcb\x88\xc6\xbe\x8d\xe3'</span><br>c = [-<span class="hljs-number">1</span>] * <span class="hljs-number">24</span><br>c[<span class="hljs-number">23</span>] = final[<span class="hljs-number">23</span>]<br>cipher_list = []<br>dfs_get_cipher2(<span class="hljs-number">23</span>)<br>k=cipher_list[<span class="hljs-number">0</span>]<br><br>rk=[<span class="hljs-number">0x01000000</span>, <span class="hljs-number">0x02000000</span>, <span class="hljs-number">0x04000000</span>, <span class="hljs-number">0x08000000</span>, <span class="hljs-number">0x10000000</span>, <span class="hljs-number">0x20000000</span>, <span class="hljs-number">0x40000000</span>, <span class="hljs-number">0x80000000</span>, <span class="hljs-number">0x1B000000</span>, <span class="hljs-number">0x36000000</span>]<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> cipher_list:    <br>    m=arr2int(k)<br>    ff=[<span class="hljs-number">0</span>]*<span class="hljs-number">60</span><br>    ff.extend(m)<br><br>    v3=<span class="hljs-number">9</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">59</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i%<span class="hljs-number">6</span>!=<span class="hljs-number">0</span>:<br>            ff[i]=ff[i+<span class="hljs-number">6</span>]^ff[i+<span class="hljs-number">5</span>]<br>        <span class="hljs-keyword">else</span>:<br>            ff[i]=ff[i+<span class="hljs-number">6</span>]^F(ff[i+<span class="hljs-number">5</span>],v3)<br>            v3-=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>       <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>.to_bytes(ff[i],<span class="hljs-number">4</span>,<span class="hljs-string">'big'</span>).decode(),end=<span class="hljs-string">''</span>)<br>       <span class="hljs-keyword">except</span>:<br>           <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>()<br><span class="hljs-comment">#VNCTF{TimeFlightMachine}  爆破筛选结果</span><br><br><span class="hljs-comment">#VNCTF{TimeFl20211205ightMachine}</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>加密都是异或，第一步AES秘钥扩展也比较容易</p></blockquote><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220213000738274.png" alt="image-20220213000738274" style="zoom:80%;"><p>不虚此行，别等叶枯萎。</p><blockquote><p>长路漫漫，再回首，依旧是昔日零解少年，当与君共勉，继续寻找新的答案。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CTF-WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RE-VM技术入门</title>
    <link href="/2022/01/29/RE-VM%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8/"/>
    <url>/2022/01/29/RE-VM%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="VM技术的原理">VM技术的原理</h2><p><strong>虚拟机保护是通过开发者自定的一套opcode，由虚拟机的dispatcher解释执行，从而起到代码混淆、增加逆向难度的技术。</strong></p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/2055422-20200604223943869-170147777.png" alt="img"></p><p><strong>VM_start:是对虚拟机的初始化。</strong></p><p><strong>VM_dispatcher: 调度器，解释op_code,并选择相应的函数执行,一般为switch语句，根据地址码判断。</strong></p><p><strong>VM_code:程序可执行代码形成的操作码。</strong></p><blockquote><p>通过对HWS-2022的babyVM来初涉VM保护的逆向分析。</p></blockquote><h2 id="BabyVM">BabyVM</h2><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220128224102355.png" alt="image-20220128224102355"></p><p>首先花指令，通过jz 和 jnz 连用实现jmp的功能，本题多次运用该花指令。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idautils<br>adr=<span class="hljs-number">0x00412CC0</span><br>end=<span class="hljs-number">0x00413991</span> <br>tmp=get_bytes(adr,end-adr)<br>tmp=tmp.replace(<span class="hljs-string">b'\x74\x03\x75\x01\xE8'</span>,<span class="hljs-string">b'\x90'</span>*<span class="hljs-number">5</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tmp)):<br>    PatchByte(adr+i,tmp[i])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'ok'</span>)    <br></code></pre></td></tr></tbody></table></figure><h3 id="VM-Dispatcher">VM_Dispatcher</h3><p>修复好后可以直接看到VM_Dispatcher函数内容，根据opcode中的地址码以switch和case语句来执行。</p><p>通过分析代码来确定变量的特殊用途，并且定义相应结构体。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> __cdecl <span class="hljs-title">VM_Dispatch</span><span class="hljs-params">(_DWORD *a1)</span></span><br><span class="hljs-function"></span>{<br>  __int64 *v1; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v2; <span class="hljs-comment">// kr00_8</span><br>  <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-keyword">int</span> v5; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// esi</span><br>  <span class="hljs-keyword">int</span> v7; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v8; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-keyword">int</span> v9; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v10; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-keyword">int</span> v11; <span class="hljs-comment">// esi</span><br>  <span class="hljs-keyword">int</span> v12; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-keyword">int</span> v13; <span class="hljs-comment">// esi</span><br>  <span class="hljs-keyword">int</span> v14; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v15; <span class="hljs-comment">// edx</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v16; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-keyword">int</span> v17; <span class="hljs-comment">// edx</span><br>  __int64 v18; <span class="hljs-comment">// kr08_8</span><br>  <span class="hljs-keyword">int</span> v19; <span class="hljs-comment">// eax</span><br>  __int64 v20; <span class="hljs-comment">// rdi</span><br>  __int64 v21; <span class="hljs-comment">// rdi</span><br>  <span class="hljs-keyword">int</span> v22; <span class="hljs-comment">// eax</span><br>  __int64 v23; <span class="hljs-comment">// kr10_8</span><br>  <span class="hljs-keyword">int</span> v24; <span class="hljs-comment">// eax</span><br>  __int64 v25; <span class="hljs-comment">// rdi</span><br>  __int64 v26; <span class="hljs-comment">// rdi</span><br>  <span class="hljs-keyword">int</span> v27; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v28; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v29; <span class="hljs-comment">// eax</span><br>  __int64 v30; <span class="hljs-comment">// rax</span><br>  __int64 v31; <span class="hljs-comment">// rax</span><br>  <span class="hljs-keyword">int</span> v32; <span class="hljs-comment">// esi</span><br>  __int64 v33; <span class="hljs-comment">// rax</span><br>  __int64 v34; <span class="hljs-comment">// rax</span><br>  <span class="hljs-keyword">int</span> v35; <span class="hljs-comment">// esi</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v36; <span class="hljs-comment">// rax</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v37; <span class="hljs-comment">// rax</span><br>  <span class="hljs-keyword">int</span> v38; <span class="hljs-comment">// esi</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v39; <span class="hljs-comment">// rax</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v40; <span class="hljs-comment">// rax</span><br>  <span class="hljs-keyword">int</span> v41; <span class="hljs-comment">// esi</span><br>  <span class="hljs-keyword">int</span> v42; <span class="hljs-comment">// edi</span><br>  <span class="hljs-keyword">int</span> v43; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v44; <span class="hljs-comment">// esi</span><br>  <span class="hljs-keyword">int</span> v45; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v46; <span class="hljs-comment">// edi</span><br>  <span class="hljs-keyword">int</span> v47; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v48; <span class="hljs-comment">// esi</span><br>  <span class="hljs-keyword">int</span> v49; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v50; <span class="hljs-comment">// edi</span><br>  <span class="hljs-keyword">int</span> v51; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v52; <span class="hljs-comment">// esi</span><br>  <span class="hljs-keyword">int</span> v53; <span class="hljs-comment">// eax</span><br>  __int64 v54; <span class="hljs-comment">// kr18_8</span><br>  <span class="hljs-keyword">int</span> v55; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v56; <span class="hljs-comment">// eax</span><br>  __int64 v57; <span class="hljs-comment">// [esp-10h] [ebp-134h]</span><br>  __int64 v58; <span class="hljs-comment">// [esp-10h] [ebp-134h]</span><br>  __int64 v59; <span class="hljs-comment">// [esp-8h] [ebp-12Ch]</span><br>  <span class="hljs-keyword">int</span> v60; <span class="hljs-comment">// [esp+10h] [ebp-114h]</span><br>  __int64 Inst_op; <span class="hljs-comment">// [esp+108h] [ebp-1Ch]</span><br>  __int64 Lnum; <span class="hljs-comment">// [esp+110h] [ebp-14h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 Rnum; <span class="hljs-comment">// [esp+118h] [ebp-Ch]</span><br><br>  LODWORD(Reg.RIP) = <span class="hljs-number">0</span>;<br>  HIDWORD(Reg.RIP) = <span class="hljs-number">0</span>;<br>LABEL_2:<br>  <span class="hljs-keyword">while</span> ( a1[<span class="hljs-number">6</span> * LODWORD(Reg.RIP)] != <span class="hljs-number">0x19</span> )    <span class="hljs-comment">// REG15 是EIP</span><br>  {<br>    v1 = (__int64 *)&amp;a1[<span class="hljs-number">6</span> * LODWORD(Reg.RIP)];  <span class="hljs-comment">// 4x6=24字节 指令长度 低16字节分为两个操作数</span><br>    Inst_op = *v1;<br>    Lnum = v1[<span class="hljs-number">1</span>];<br>    Rnum = v1[<span class="hljs-number">2</span>];<br>    v2 = __PAIR64__(HIDWORD(Reg.RIP), LODWORD(Reg.RIP)++) + <span class="hljs-number">1</span>;<span class="hljs-comment">// 修改PC 即EIP</span><br>    HIDWORD(Reg.RIP) = HIDWORD(v2);<br>    <span class="hljs-keyword">switch</span> ( (<span class="hljs-keyword">int</span>)Inst_op )<br>    {<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        *(_QWORD *)(Mem + <span class="hljs-number">8</span> * LODWORD(Reg.R[Lnum])) = Rnum;<span class="hljs-comment">// mov Mem[Reg[Lnum]],Rnum</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        v5 = Lnum;<br>        LODWORD(Reg.R[v5]) = Rnum;<br>        HIDWORD(Reg.R[v5]) = HIDWORD(Rnum);     <span class="hljs-comment">// mov Reg[Lnum],Rnum</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        v9 = Lnum;                              <span class="hljs-comment">// mov Reg[Lnum],Reg[Rnum]</span><br>        LODWORD(Reg.R[v9]) = Reg.R[Rnum];<br>        HIDWORD(Reg.R[v9]) = HIDWORD(Reg.R[Rnum]);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        v6 = <span class="hljs-number">8</span> * LODWORD(Reg.R[Rnum]);          <span class="hljs-comment">// mov Reg[Lnum],Mem[Reg[Rnum]]</span><br>        v7 = Lnum;<br>        v8 = Mem;<br>        LODWORD(Reg.R[v7]) = *(_DWORD *)(Mem + v6);<br>        HIDWORD(Reg.R[v7]) = *(_DWORD *)(v8 + v6 + <span class="hljs-number">4</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        v3 = <span class="hljs-number">8</span> * LODWORD(Reg.R[Lnum]);<br>        v4 = Mem;<br>        *(_DWORD *)(Mem + v3) = Reg.R[Rnum];<br>        *(_DWORD *)(v4 + v3 + <span class="hljs-number">4</span>) = HIDWORD(Reg.R[Rnum]);<span class="hljs-comment">// mov Mem[Reg[Lnum]],Reg[Rnum]</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        v10 = Reg.R[<span class="hljs-number">4</span>];                         <span class="hljs-comment">// Reg[4]初始化时为0x100 类似ESP</span><br>        v60 = __CFADD__(v10, <span class="hljs-number">1</span>) + HIDWORD(Reg.R[<span class="hljs-number">4</span>]);<span class="hljs-comment">// push Reg[Lnum]</span><br>        LODWORD(Reg.R[<span class="hljs-number">4</span>]) = v10 + <span class="hljs-number">1</span>;<br>        HIDWORD(Reg.R[<span class="hljs-number">4</span>]) = v60;<br>        v11 = <span class="hljs-number">8</span> * (v10 + <span class="hljs-number">1</span>);<br>        v12 = Buffer;<br>        *(_DWORD *)(Buffer + v11) = Reg.R[Lnum];<br>        *(_DWORD *)(v12 + v11 + <span class="hljs-number">4</span>) = HIDWORD(Reg.R[Lnum]);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        v13 = <span class="hljs-number">8</span> * LODWORD(Reg.R[<span class="hljs-number">4</span>]);<br>        v14 = Lnum;<br>        v15 = Buffer;<br>        LODWORD(Reg.R[v14]) = *(_DWORD *)(Buffer + v13);<span class="hljs-comment">// pop Reg[Lnum]</span><br>        HIDWORD(Reg.R[v14]) = *(_DWORD *)(v15 + v13 + <span class="hljs-number">4</span>);<br>        v16 = Reg.R[<span class="hljs-number">4</span>];<br>        v17 = (__PAIR64__(HIDWORD(Reg.R[<span class="hljs-number">4</span>]), v16) - <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">32</span>;<br>        LODWORD(Reg.R[<span class="hljs-number">4</span>]) = v16 - <span class="hljs-number">1</span>;<br>        HIDWORD(Reg.R[<span class="hljs-number">4</span>]) = v17;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        v18 = Rnum + __PAIR64__(HIDWORD(Reg.R[Lnum]), Reg.R[Lnum]);<span class="hljs-comment">// add Reg[Lnum],Rnum</span><br>        v19 = Lnum;<br>        LODWORD(Reg.R[v19]) = Rnum + LODWORD(Reg.R[Lnum]);<br>        HIDWORD(Reg.R[v19]) = HIDWORD(v18);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:                                   <span class="hljs-comment">// add Reg[Lnum],Reg[Rnum]</span><br>        LODWORD(v20) = Reg.R[Lnum];<br>        HIDWORD(v20) = HIDWORD(Reg.R[Lnum]);<br>        v21 = __PAIR64__(HIDWORD(Reg.R[Rnum]), Reg.R[Rnum]) + v20;<br>        v22 = Lnum;<br>        LODWORD(Reg.R[v22]) = v21;<br>        HIDWORD(Reg.R[v22]) = HIDWORD(v21);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>        v23 = __PAIR64__(HIDWORD(Reg.R[Lnum]), Reg.R[Lnum]) - Rnum;<span class="hljs-comment">// sub Reg[Lnum],Rnum</span><br>        v24 = Lnum;<br>        LODWORD(Reg.R[v24]) = LODWORD(Reg.R[Lnum]) - Rnum;<br>        HIDWORD(Reg.R[v24]) = HIDWORD(v23);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0xA</span>:<br>        LODWORD(v25) = Reg.R[Lnum];<br>        HIDWORD(v25) = HIDWORD(Reg.R[Lnum]);<br>        v26 = v25 - __PAIR64__(HIDWORD(Reg.R[Rnum]), Reg.R[Rnum]);<span class="hljs-comment">// sub Reg[Lnum],Reg[Rnum]</span><br>        v27 = Lnum;<br>        LODWORD(Reg.R[v27]) = v26;<br>        HIDWORD(Reg.R[v27]) = HIDWORD(v26);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0xB</span>:<br>        HIDWORD(v57) = HIDWORD(Reg.R[Lnum]);    <span class="hljs-comment">// mul Reg[Lnum],Rnum</span><br>        LODWORD(v57) = Reg.R[Lnum];<br>        v28 = Lnum;<br>        LODWORD(Reg.R[v28]) = v57 * Rnum;<br>        HIDWORD(Reg.R[v28]) = (v57 * Rnum) &gt;&gt; <span class="hljs-number">32</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0xC</span>:<br>        HIDWORD(v59) = HIDWORD(Reg.R[Rnum]);<br>        LODWORD(v59) = Reg.R[Rnum];<br>        HIDWORD(v58) = HIDWORD(Reg.R[Lnum]);<br>        LODWORD(v58) = Reg.R[Lnum];<br>        v29 = Lnum;<br>        LODWORD(Reg.R[v29]) = v58 * v59;<br>        HIDWORD(Reg.R[v29]) = (<span class="hljs-keyword">unsigned</span> __int64)(v58 * v59) &gt;&gt; <span class="hljs-number">32</span>;<span class="hljs-comment">// mul Reg[Lnum],Reg[Rnum]</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0xD</span>:<br>        LODWORD(v30) = Reg.R[Lnum];<br>        HIDWORD(v30) = HIDWORD(Reg.R[Lnum]);<br>        v31 = v30 &lt;&lt; Rnum;<br>        v32 = v31;<br>        LODWORD(v31) = <span class="hljs-number">8</span> * Lnum;<br>        *(_DWORD *)((<span class="hljs-keyword">char</span> *)Reg.R + v31) = v32;<br>        *(_DWORD *)((<span class="hljs-keyword">char</span> *)Reg.R + v31 + <span class="hljs-number">4</span>) = HIDWORD(v31);<span class="hljs-comment">// shl Reg[Lnum],Rnum</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0xE</span>:<br>        LODWORD(v33) = Reg.R[Lnum];<br>        HIDWORD(v33) = HIDWORD(Reg.R[Lnum]);<br>        v34 = v33 &lt;&lt; LODWORD(Reg.R[Rnum]);<br>        v35 = v34;<br>        LODWORD(v34) = <span class="hljs-number">8</span> * Lnum;<br>        *(_DWORD *)((<span class="hljs-keyword">char</span> *)Reg.R + v34) = v35;<br>        *(_DWORD *)((<span class="hljs-keyword">char</span> *)Reg.R + v34 + <span class="hljs-number">4</span>) = HIDWORD(v34);<span class="hljs-comment">// shl Reg[Lnum],Reg[Rnum]</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0xF</span>:<br>        LODWORD(v36) = Reg.R[Lnum];             <span class="hljs-comment">// shr Reg[Lnum],Rnum</span><br>        HIDWORD(v36) = HIDWORD(Reg.R[Lnum]);<br>        v37 = v36 &gt;&gt; Rnum;<br>        v38 = v37;<br>        LODWORD(v37) = <span class="hljs-number">8</span> * Lnum;<br>        *(_DWORD *)((<span class="hljs-keyword">char</span> *)Reg.R + v37) = v38;<br>        *(_DWORD *)((<span class="hljs-keyword">char</span> *)Reg.R + v37 + <span class="hljs-number">4</span>) = HIDWORD(v37);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x10</span>:                                <span class="hljs-comment">// shr Reg[Lnum],Reg[Rnum]</span><br>        LODWORD(v39) = Reg.R[Lnum];<br>        HIDWORD(v39) = HIDWORD(Reg.R[Lnum]);<br>        v40 = v39 &gt;&gt; LODWORD(Reg.R[Rnum]);<br>        v41 = v40;<br>        LODWORD(v40) = <span class="hljs-number">8</span> * Lnum;<br>        *(_DWORD *)((<span class="hljs-keyword">char</span> *)Reg.R + v40) = v41;<br>        *(_DWORD *)((<span class="hljs-keyword">char</span> *)Reg.R + v40 + <span class="hljs-number">4</span>) = HIDWORD(v40);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x11</span>:<br>        v42 = HIDWORD(Rnum) ^ HIDWORD(Reg.R[Lnum]);<br>        v43 = Lnum;<br>        LODWORD(Reg.R[v43]) = Rnum ^ LODWORD(Reg.R[Lnum]);<span class="hljs-comment">// xor Reg[Lnum],Rnum</span><br>        HIDWORD(Reg.R[v43]) = v42;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x12</span>:<br>        v44 = HIDWORD(Reg.R[Rnum]) ^ HIDWORD(Reg.R[Lnum]);<span class="hljs-comment">// xor Reg[Lnum],Reg[Rnum]</span><br>        v45 = Lnum;<br>        LODWORD(Reg.R[v45]) = LODWORD(Reg.R[Rnum]) ^ LODWORD(Reg.R[Lnum]);<br>        HIDWORD(Reg.R[v45]) = v44;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x13</span>:<br>        v46 = HIDWORD(Rnum) | HIDWORD(Reg.R[Lnum]);<span class="hljs-comment">// or Reg[Lnum],Rnum</span><br>        v47 = Lnum;<br>        LODWORD(Reg.R[v47]) = Rnum | LODWORD(Reg.R[Lnum]);<br>        HIDWORD(Reg.R[v47]) = v46;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x14</span>:<br>        v48 = HIDWORD(Reg.R[Rnum]) | HIDWORD(Reg.R[Lnum]);<span class="hljs-comment">// or Reg[Lnum],Reg[Rnum]</span><br>        v49 = Lnum;<br>        LODWORD(Reg.R[v49]) = LODWORD(Reg.R[Rnum]) | LODWORD(Reg.R[Lnum]);<br>        HIDWORD(Reg.R[v49]) = v48;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x15</span>:<br>        v50 = HIDWORD(Rnum) &amp; HIDWORD(Reg.R[Lnum]);<span class="hljs-comment">// and Reg[Lnum],Rnum</span><br>        v51 = Lnum;<br>        LODWORD(Reg.R[v51]) = Rnum &amp; LODWORD(Reg.R[Lnum]);<br>        HIDWORD(Reg.R[v51]) = v50;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x16</span>:<br>        v52 = HIDWORD(Reg.R[Rnum]) &amp; HIDWORD(Reg.R[Lnum]);<span class="hljs-comment">// and Reg[Lnum],Reg[Rnum]</span><br>        v53 = Lnum;<br>        LODWORD(Reg.R[v53]) = Reg.R[Rnum] &amp; LODWORD(Reg.R[Lnum]);<br>        HIDWORD(Reg.R[v53]) = v52;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x17</span>:<br>        v54 = getchar();                        <span class="hljs-comment">// Reg[Lnum]=getchar()</span><br>        v55 = Lnum;<br>        LODWORD(Reg.R[v55]) = v54;<br>        HIDWORD(Reg.R[v55]) = HIDWORD(v54);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x18</span>:<br>        <span class="hljs-built_in">putchar</span>(Reg.R[Lnum]);                   <span class="hljs-comment">// putchar(Reg[Lnum])</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x1A</span>:<br>        LOBYTE(cmp_bool) = __PAIR64__(HIDWORD(Reg.R[Lnum]), Reg.R[Lnum]) == Rnum;<span class="hljs-comment">// cmp Reg[Lnum],Rnum</span><br>        BYTE1(cmp_bool) = __PAIR64__(HIDWORD(Reg.R[Lnum]), Reg.R[Lnum]) &lt; Rnum;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x1B</span>:<br>        LOBYTE(cmp_bool) = LODWORD(Reg.R[Lnum]) == LODWORD(Reg.R[Rnum]) &amp;&amp; HIDWORD(Reg.R[Lnum]) == HIDWORD(Reg.R[Rnum]);<span class="hljs-comment">// cmp Reg[Lnum],Reg[Rnum]</span><br>        v56 = HIDWORD(Reg.R[Lnum]);<br>        BYTE1(cmp_bool) = v56 &lt;= HIDWORD(Reg.R[Rnum])<br>                       &amp;&amp; (v56 &lt; HIDWORD(Reg.R[Rnum]) || LODWORD(Reg.R[Lnum]) &lt; LODWORD(Reg.R[Rnum]));<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x1C</span>:<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> __int8)cmp_bool == <span class="hljs-number">1</span> )   <span class="hljs-comment">// je Lnum</span><br>        {<br>          LODWORD(Reg.RIP) = Lnum;<br>          HIDWORD(Reg.RIP) = HIDWORD(Lnum);<br>        }<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x1D</span>:<br>        LODWORD(Reg.RIP) = Lnum;                <span class="hljs-comment">// jmp Lnum</span><br>        HIDWORD(Reg.RIP) = HIDWORD(Lnum);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x1E</span>:<br>        <span class="hljs-keyword">if</span> ( BYTE1(cmp_bool) == <span class="hljs-number">1</span> )             <span class="hljs-comment">// jb Lnum</span><br>        {<br>          LODWORD(Reg.RIP) = Lnum;<br>          HIDWORD(Reg.RIP) = HIDWORD(Lnum);<br>        }<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x1F</span>:<br>        <span class="hljs-keyword">if</span> ( !(_BYTE)cmp_bool )                 <span class="hljs-comment">// jne Lnum</span><br>        {<br>          LODWORD(Reg.RIP) = Lnum;<br>          HIDWORD(Reg.RIP) = HIDWORD(Lnum);<br>        }<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">goto</span> LABEL_2;<br>    }<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="IDA定义结构体">IDA定义结构体</h3><p>观察各case块用到的变量和动作，因为opcode也是解释为x86的指令执行，故要熟悉常用的汇编指令。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">v1 = (__int64 *)&amp;a1[<span class="hljs-number">6</span> * LODWORD(Reg.RIP)]; <br>Inst_op = *v1;<br>Lnum = v1[<span class="hljs-number">1</span>];<br>Rnum = v1[<span class="hljs-number">2</span>];<br>v2 = __PAIR64__(HIDWORD(Reg.RIP), LODWORD(Reg.RIP)++) + <span class="hljs-number">1</span>;<br></code></pre></td></tr></tbody></table></figure><p>结合指令格式，地址码和操作数，在switch开始前的初始动作便能确定指令长度为24Byte并且了解数组的哪个值为IP。</p><blockquote><p>结合分析结果定义如下结构体</p></blockquote><p>VM中的寄存器，未定义前IDA识别为了大小为32的int数组。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VM_REG</span>{</span><br>_QWORD REG[<span class="hljs-number">15</span>];<span class="hljs-comment">//也可以修改的更详细，比如有控制堆栈的寄存器</span><br>_QWORD RIP;<br>}<br></code></pre></td></tr></tbody></table></figure><p>opcode指令格式,指令长度为24字节。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Inst</span>{</span><br>_QWORD adr;<br>    _QWORD Lnum;<br>    _QWORD Rnum;<br>}    <br></code></pre></td></tr></tbody></table></figure><h4 id="way-1">way-1</h4><p><strong>IDA 具体操作，shift+F9 进入struct窗口，按Insert插入结构体，在自己定义结构体的end处按d就能增加元素，通过Y键可以修改数据的类型，例如数组，_DWORD,_QWORD等,最后将想定义为结构体的一片空间的首地址改为自己定义的结构体类型即可。</strong></p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220128232054510.png" alt="image-20220128232054510"></p><h4 id="way-2">way-2</h4><p><strong>另:导入自己定义好的结构体，shift + F1 ，之后insert，把写好的c语言的结构体复制进去即可。</strong></p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220130212048340.png" alt="image-20220130212048340"></p><h3 id="VM-Start">VM_Start</h3><p>根据对VM_Dispatcher的交叉引用发现有四组调用，并且在追溯中发现VM初始化的函数。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sub_412BB0</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  __CheckForDebuggerJustMyCode(&amp;unk_421002);<br>  Buffer = (<span class="hljs-keyword">int</span>)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x8000</span>u);<br>  Mem = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x800000</span>u);<br>  j_memset(&amp;Reg, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(Reg));<br>  j_memset(&amp;cmp_bool, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(cmp_bool));<br>  LODWORD(Reg.R[<span class="hljs-number">4</span>]) = <span class="hljs-number">256</span>;<br>  HIDWORD(Reg.R[<span class="hljs-number">4</span>]) = <span class="hljs-number">0</span>;<br>  j_VM_Dispatch((<span class="hljs-keyword">int</span>)&amp;code_3);<br>  j_VM_Dispatch((<span class="hljs-keyword">int</span>)&amp;code_4);<br>}<br></code></pre></td></tr></tbody></table></figure><p>开辟了缓冲区和内存空间，返回了空间的指针，并且对特殊寄存器赋值，比如Reg.R[4]，之后在操控动态空间中用到，类似esp。</p><h3 id="VM-Parser">VM_Parser</h3><p>该题目的opcode比较多，并且有4个分支调用Dispatch，opcode被拆分成四组依次执行，在对每条虚拟机解释指令分析后便可编写parser还原为x86的混编代码，进而分析出伪代码。</p><p>IDAPYTHON dump出opcode，简易脚本如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idautils<br>adr=<span class="hljs-number">0x0041E000</span><br>end=<span class="hljs-number">0x0041E378</span><br>op=[]<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>    op.append([Qword(adr),Qword(adr+<span class="hljs-number">8</span>),Qword(adr+<span class="hljs-number">16</span>)])<br>    <span class="hljs-keyword">if</span>(adr==end):<br>        <span class="hljs-built_in">print</span>(op)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'yes'</span>)<br>        <span class="hljs-keyword">break</span><br>    adr+=<span class="hljs-number">24</span> <br></code></pre></td></tr></tbody></table></figure><p>根据VM_Dispatch写还原parser</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python">code_1=[[<span class="hljs-number">18</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">18</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">18</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">18</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">18</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">18</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">105</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">110</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">112</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">117</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">116</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">32</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">1</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">2</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">3</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">6</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">7</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">102</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">108</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">97</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">103</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">58</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">32</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">1</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">2</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">3</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">6</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">7</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">18</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">23</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">26</span>, <span class="hljs-number">1</span>, <span class="hljs-number">38</span>], [<span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">25</span>, <span class="hljs-number">18446744073709551615</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">18</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>]]<br><span class="hljs-comment">#输入并check长度</span><br>code_2=[[<span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">26</span>, <span class="hljs-number">0</span>, <span class="hljs-number">125</span>], [<span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">119</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">114</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">111</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">110</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">103</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">33</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">1</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">2</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">3</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">6</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">7</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">25</span>, <span class="hljs-number">18446744073709551615</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">256</span>], [<span class="hljs-number">26</span>, <span class="hljs-number">8</span>, <span class="hljs-number">225</span>], [<span class="hljs-number">30</span>, <span class="hljs-number">25</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">29</span>, <span class="hljs-number">19</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">26</span>, <span class="hljs-number">0</span>, <span class="hljs-number">123</span>], [<span class="hljs-number">31</span>, <span class="hljs-number">3</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">26</span>, <span class="hljs-number">0</span>, <span class="hljs-number">103</span>], [<span class="hljs-number">31</span>, <span class="hljs-number">3</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">26</span>, <span class="hljs-number">0</span>, <span class="hljs-number">97</span>], [<span class="hljs-number">31</span>, <span class="hljs-number">3</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">26</span>, <span class="hljs-number">0</span>, <span class="hljs-number">108</span>], [<span class="hljs-number">31</span>, <span class="hljs-number">3</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">26</span>, <span class="hljs-number">0</span>, <span class="hljs-number">102</span>], [<span class="hljs-number">31</span>, <span class="hljs-number">3</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">18</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">225</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">17</span>, <span class="hljs-number">6</span>, <span class="hljs-number">66</span>], [<span class="hljs-number">13</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">27</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>], [<span class="hljs-number">31</span>, <span class="hljs-number">3</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">26</span>, <span class="hljs-number">9</span>, <span class="hljs-number">32</span>], [<span class="hljs-number">30</span>, <span class="hljs-number">42</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">99</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">111</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">114</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">114</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">101</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">99</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">1</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">2</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">3</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">6</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">7</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">116</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">108</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">121</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">33</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">1</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">2</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">3</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">24</span>, <span class="hljs-number">6</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">25</span>, <span class="hljs-number">18446744073709551615</span>, <span class="hljs-number">18446744073709551615</span>]]<br><span class="hljs-comment">#对输入字符串进行处理</span><br>code_3=[[<span class="hljs-number">18</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">255</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">547</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">571</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">567</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">567</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">587</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">555</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">251</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">555</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">547</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">591</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">239</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">567</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">239</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">591</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">591</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">547</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">547</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">571</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">567</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">255</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">563</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">563</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">563</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">567</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">587</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">563</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">591</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">555</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">555</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">587</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">239</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">25</span>, <span class="hljs-number">18446744073709551615</span>, <span class="hljs-number">18446744073709551615</span>]]<br><span class="hljs-comment">#比对的密文</span><br>code_4=[[<span class="hljs-number">18</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">99</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">26</span>, <span class="hljs-number">2</span>, <span class="hljs-number">32</span>], [<span class="hljs-number">30</span>, <span class="hljs-number">1</span>, <span class="hljs-number">18446744073709551615</span>], [<span class="hljs-number">25</span>, <span class="hljs-number">18446744073709551615</span>, <span class="hljs-number">18446744073709551615</span>]]<br><span class="hljs-comment">#对密文处理</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">VM_Parser</span>(<span class="hljs-params">op</span>):</span><br>    VM_Inst={<br>        <span class="hljs-number">0</span>:<span class="hljs-string">"mov Mem[Reg[{Lnum}]] , {Rnum}"</span>,<br>        <span class="hljs-number">1</span>:<span class="hljs-string">"mov Reg[{Lnum}] , {Rnum}"</span> ,<br>        <span class="hljs-number">2</span>:<span class="hljs-string">"mov Reg[{Lnum}] , Reg[{Rnum}]"</span> ,<br>        <span class="hljs-number">3</span>:<span class="hljs-string">"mov Reg[{Lnum}] , Mem[Reg[{Rnum}]]"</span>,<br>        <span class="hljs-number">4</span>:<span class="hljs-string">"mov Mem[Reg[{Lnum}]] , Reg[{Rnum}]"</span>,<br>        <span class="hljs-number">5</span>:<span class="hljs-string">"push Reg[{Lnum}]"</span>,<br>        <span class="hljs-number">6</span>:<span class="hljs-string">"pop  Reg[{Lnum}]"</span>,<br>        <span class="hljs-number">7</span>:<span class="hljs-string">"add Reg[{Lnum}] , {Rnum}"</span>,<br>        <span class="hljs-number">8</span>:<span class="hljs-string">"add Reg[{Lnum}] , Reg[{Rnum}]"</span>,<br>        <span class="hljs-number">9</span>:<span class="hljs-string">"sub Reg[{Lnum}] , {Rnum}"</span>,<br>        <span class="hljs-number">0xA</span>:<span class="hljs-string">"sub Reg[{Lnum}] , Reg[{Rnum}]"</span>,<br>        <span class="hljs-number">0xB</span>:<span class="hljs-string">"mul Reg[{Lnum}] , {Rnum}"</span>,<br>        <span class="hljs-number">0xC</span>:<span class="hljs-string">"mul Reg[{Lnum}] , Reg[{Rnum}]"</span>,<br>        <span class="hljs-number">0xD</span>:<span class="hljs-string">"shl Reg[{Lnum}] , {Rnum}"</span>,<br>        <span class="hljs-number">0xE</span>:<span class="hljs-string">"shl Reg[{Lnum}] , Reg[{Rnum}]"</span>,<br>        <span class="hljs-number">0xF</span>:<span class="hljs-string">"shr Reg[{Lnum}] , {Rnum}"</span>,<br>        <span class="hljs-number">0x11</span>:<span class="hljs-string">"xor Reg[{Lnum}] , {Rnum}"</span>,<br>        <span class="hljs-number">0x12</span>:<span class="hljs-string">"xor Reg[{Lnum}] , Reg[{Rnum}]"</span>,<br>        <span class="hljs-number">0x13</span>:<span class="hljs-string">"or  Reg[{Lnum}] , {Rnum}"</span>,<br>        <span class="hljs-number">0x14</span>:<span class="hljs-string">"or  Reg[{Lnum}] , Reg[{Rnum}]"</span>,<br>        <span class="hljs-number">0x15</span>:<span class="hljs-string">"and Reg[{Lnum}] , {Rnum}"</span>,<br>        <span class="hljs-number">0x16</span>:<span class="hljs-string">"and Reg[{Lnum}] , Reg[{Rnum}]"</span>,<br>        <span class="hljs-number">0x17</span>:<span class="hljs-string">"Reg[{Lnum}] = getchar()"</span>,<br>        <span class="hljs-number">0x18</span>:<span class="hljs-string">"putchar() = Reg[{Lnum}]"</span>,<br>        <span class="hljs-number">0x19</span>:<span class="hljs-string">"exit()"</span>,<br>        <span class="hljs-number">0x1A</span>:<span class="hljs-string">"cmp Reg[{Lnum}] , {Rnum}"</span>,<br>        <span class="hljs-number">0x1B</span>:<span class="hljs-string">"cmp Reg[{Lnum}] , Reg[{Rnum}]"</span>,<br>        <span class="hljs-number">0x1C</span>:<span class="hljs-string">"je  {Lnum}"</span>,<br>        <span class="hljs-number">0x1D</span>:<span class="hljs-string">"jmp {Lnum}"</span>,<br>        <span class="hljs-number">0x1E</span>: <span class="hljs-string">"jb  {Lnum}"</span>,<br>        <span class="hljs-number">0x1F</span>:<span class="hljs-string">"jne {Lnum}"</span><br><br>    }<br>    tmp = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(op)):<br>         Inst=op[i]<br>         adr=Inst[<span class="hljs-number">0</span>]<br>         Lnum=Inst[<span class="hljs-number">1</span>]<br>         Rnum=Inst[<span class="hljs-number">2</span>]<br>         <span class="hljs-comment">#if(adr==0): #dump比对密文</span><br>         <span class="hljs-comment">#   tmp.append(Rnum)</span><br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">'%s: '</span>%<span class="hljs-built_in">hex</span>(i)+VM_Inst[adr].<span class="hljs-built_in">format</span>(Lnum=<span class="hljs-built_in">hex</span>(Lnum),Rnum=<span class="hljs-built_in">hex</span>(Rnum)).replace(<span class="hljs-string">'[0x'</span>,<span class="hljs-string">'['</span>))<br>    <span class="hljs-comment">#print(tmp)</span><br>VM_Parser(code_1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'------code_end------'</span>)<br>VM_Parser(code_2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'------code_end------'</span>)<br>VM_Parser(code_3)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'------code_end------'</span>)<br>VM_Parser(code_4)<br></code></pre></td></tr></tbody></table></figure><h3 id="分析算法">分析算法</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x0</span>: <span class="hljs-keyword">xor</span> Reg[<span class="hljs-number">0</span>] , Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x1</span>: <span class="hljs-keyword">xor</span> Reg[<span class="hljs-number">1</span>] , Reg[<span class="hljs-number">1</span>]<br><span class="hljs-number">0x2</span>: <span class="hljs-keyword">xor</span> Reg[<span class="hljs-number">2</span>] , Reg[<span class="hljs-number">2</span>]<br><span class="hljs-number">0x3</span>: <span class="hljs-keyword">xor</span> Reg[<span class="hljs-number">3</span>] , Reg[<span class="hljs-number">3</span>]<br><span class="hljs-number">0x4</span>: <span class="hljs-keyword">xor</span> Reg[<span class="hljs-number">6</span>] , Reg[<span class="hljs-number">6</span>]<br><span class="hljs-number">0x5</span>: <span class="hljs-keyword">xor</span> Reg[<span class="hljs-number">7</span>] , Reg[<span class="hljs-number">7</span>]<br><span class="hljs-number">0x6</span>: mov Reg[<span class="hljs-number">0</span>] , <span class="hljs-number">0x69</span><br><span class="hljs-number">0x7</span>: mov Reg[<span class="hljs-number">1</span>] , <span class="hljs-number">0x6e</span><br><span class="hljs-number">0x8</span>: mov Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x70</span><br><span class="hljs-number">0x9</span>: mov Reg[<span class="hljs-number">3</span>] , <span class="hljs-number">0x75</span><br><span class="hljs-number">0xa</span>: mov Reg[<span class="hljs-number">6</span>] , <span class="hljs-number">0x74</span><br><span class="hljs-number">0xb</span>: mov Reg[<span class="hljs-number">7</span>] , <span class="hljs-number">0x20</span><br><span class="hljs-number">0xc</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0xd</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">1</span>]<br><span class="hljs-number">0xe</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">2</span>]<br><span class="hljs-number">0xf</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">3</span>]<br><span class="hljs-number">0x10</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">6</span>]<br><span class="hljs-number">0x11</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">7</span>]<br><span class="hljs-number">0x12</span>: mov Reg[<span class="hljs-number">0</span>] , <span class="hljs-number">0x66</span><br><span class="hljs-number">0x13</span>: mov Reg[<span class="hljs-number">1</span>] , <span class="hljs-number">0x6c</span><br><span class="hljs-number">0x14</span>: mov Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x61</span><br><span class="hljs-number">0x15</span>: mov Reg[<span class="hljs-number">3</span>] , <span class="hljs-number">0x67</span><br><span class="hljs-number">0x16</span>: mov Reg[<span class="hljs-number">6</span>] , <span class="hljs-number">0x3a</span><br><span class="hljs-number">0x17</span>: mov Reg[<span class="hljs-number">7</span>] , <span class="hljs-number">0x20</span><br><span class="hljs-number">0x18</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x19</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">1</span>]<br><span class="hljs-number">0x1a</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">2</span>]<br><span class="hljs-number">0x1b</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">3</span>]<br><span class="hljs-number">0x1c</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">6</span>]<br><span class="hljs-number">0x1d</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">7</span>]<br><span class="hljs-number">0x1e</span>: <span class="hljs-keyword">xor</span> Reg[<span class="hljs-number">1</span>] , Reg[<span class="hljs-number">1</span>]<br><span class="hljs-number">0x1f</span>: Reg[<span class="hljs-number">0</span>] = getchar()<br><span class="hljs-number">0x20</span>: push Reg[<span class="hljs-number">0</span>]           <span class="hljs-comment">//flag入栈</span><br><span class="hljs-number">0x21</span>: add Reg[<span class="hljs-number">1</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x22</span>: cmp Reg[<span class="hljs-number">1</span>] , <span class="hljs-number">0x26</span>     <span class="hljs-comment">//check长度</span><br><span class="hljs-number">0x23</span>: jb  <span class="hljs-number">0x1f</span><br><span class="hljs-number">0x24</span>: <span class="hljs-built_in">exit</span>()<br><span class="hljs-number">0x25</span>: <span class="hljs-keyword">xor</span> Reg[<span class="hljs-number">2</span>] , Reg[<span class="hljs-number">2</span>]<br>------code_end------<br><span class="hljs-number">0x0</span>: pop  Reg[<span class="hljs-number">0</span>]             <span class="hljs-comment">//检测flag尾部是否为}</span><br><span class="hljs-number">0x1</span>: cmp Reg[<span class="hljs-number">0</span>] , <span class="hljs-number">0x7d</span> <br><span class="hljs-number">0x2</span>: je  <span class="hljs-number">0x12</span><br><span class="hljs-number">0x3</span>: mov Reg[<span class="hljs-number">0</span>] , <span class="hljs-number">0x77</span> <br><span class="hljs-number">0x4</span>: mov Reg[<span class="hljs-number">1</span>] , <span class="hljs-number">0x72</span><br><span class="hljs-number">0x5</span>: mov Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x6f</span><br><span class="hljs-number">0x6</span>: mov Reg[<span class="hljs-number">3</span>] , <span class="hljs-number">0x6e</span><br><span class="hljs-number">0x7</span>: mov Reg[<span class="hljs-number">6</span>] , <span class="hljs-number">0x67</span><br><span class="hljs-number">0x8</span>: mov Reg[<span class="hljs-number">7</span>] , <span class="hljs-number">0x21</span><br><span class="hljs-number">0x9</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0xa</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">1</span>]<br><span class="hljs-number">0xb</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">2</span>]<br><span class="hljs-number">0xc</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">3</span>]<br><span class="hljs-number">0xd</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">6</span>]<br><span class="hljs-number">0xe</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">7</span>]<br><span class="hljs-number">0xf</span>: mov Reg[<span class="hljs-number">0</span>] , <span class="hljs-number">0xa</span><br><span class="hljs-number">0x10</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x11</span>: <span class="hljs-built_in">exit</span>()<br><span class="hljs-number">0x12</span>: mov Reg[<span class="hljs-number">8</span>] , <span class="hljs-number">0x100</span><br><span class="hljs-number">0x13</span>: cmp Reg[<span class="hljs-number">8</span>] , <span class="hljs-number">0xe1</span><br><span class="hljs-number">0x14</span>: jb  <span class="hljs-number">0x19</span><br><span class="hljs-number">0x15</span>: pop  Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x16</span>: mov Mem[Reg[<span class="hljs-number">8</span>]] , Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x17</span>: sub Reg[<span class="hljs-number">8</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x18</span>: jmp <span class="hljs-number">0x13</span><br><span class="hljs-number">0x19</span>: pop  Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x1a</span>: cmp Reg[<span class="hljs-number">0</span>] , <span class="hljs-number">0x7b</span><br><span class="hljs-number">0x1b</span>: jne <span class="hljs-number">0x3</span><br><span class="hljs-number">0x1c</span>: pop  Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x1d</span>: cmp Reg[<span class="hljs-number">0</span>] , <span class="hljs-number">0x67</span><br><span class="hljs-number">0x1e</span>: jne <span class="hljs-number">0x3</span><br><span class="hljs-number">0x1f</span>: pop  Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x20</span>: cmp Reg[<span class="hljs-number">0</span>] , <span class="hljs-number">0x61</span><br><span class="hljs-number">0x21</span>: jne <span class="hljs-number">0x3</span><br><span class="hljs-number">0x22</span>: pop  Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x23</span>: cmp Reg[<span class="hljs-number">0</span>] , <span class="hljs-number">0x6c</span><br><span class="hljs-number">0x24</span>: jne <span class="hljs-number">0x3</span><br><span class="hljs-number">0x25</span>: pop  Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x26</span>: cmp Reg[<span class="hljs-number">0</span>] , <span class="hljs-number">0x66</span>   <span class="hljs-comment">//检测flag头</span><br><span class="hljs-number">0x27</span>: jne <span class="hljs-number">0x3</span><br><span class="hljs-number">0x28</span>: <span class="hljs-keyword">xor</span> Reg[<span class="hljs-number">9</span>] , Reg[<span class="hljs-number">9</span>]<br><span class="hljs-number">0x29</span>: mov Reg[a] , <span class="hljs-number">0xe1</span><br><span class="hljs-number">0x2a</span>: mov Reg[<span class="hljs-number">7</span>] , Mem[Reg[<span class="hljs-number">9</span>]]<br><span class="hljs-number">0x2b</span>: mov Reg[<span class="hljs-number">6</span>] , Mem[Reg[a]]<br><span class="hljs-number">0x2c</span>: <span class="hljs-keyword">xor</span> Reg[<span class="hljs-number">6</span>] , <span class="hljs-number">0x42</span>            <span class="hljs-comment">//a[i]^=0x42 之后 a[i]&lt;&lt;=2</span><br><span class="hljs-number">0x2d</span>: shl Reg[<span class="hljs-number">6</span>] , <span class="hljs-number">0x2</span><br><span class="hljs-number">0x2e</span>: cmp Reg[<span class="hljs-number">6</span>] , Reg[<span class="hljs-number">7</span>]<br><span class="hljs-number">0x2f</span>: jne <span class="hljs-number">0x3</span><br><span class="hljs-number">0x30</span>: add Reg[<span class="hljs-number">9</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x31</span>: add Reg[a] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x32</span>: cmp Reg[<span class="hljs-number">9</span>] , <span class="hljs-number">0x20</span>   <span class="hljs-comment">//flag的内容进行变换</span><br><span class="hljs-number">0x33</span>: jb  <span class="hljs-number">0x2a</span><br><span class="hljs-number">0x34</span>: mov Reg[<span class="hljs-number">0</span>] , <span class="hljs-number">0x63</span><br><span class="hljs-number">0x35</span>: mov Reg[<span class="hljs-number">1</span>] , <span class="hljs-number">0x6f</span><br><span class="hljs-number">0x36</span>: mov Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x72</span><br><span class="hljs-number">0x37</span>: mov Reg[<span class="hljs-number">3</span>] , <span class="hljs-number">0x72</span><br><span class="hljs-number">0x38</span>: mov Reg[<span class="hljs-number">6</span>] , <span class="hljs-number">0x65</span><br><span class="hljs-number">0x39</span>: mov Reg[<span class="hljs-number">7</span>] , <span class="hljs-number">0x63</span><br><span class="hljs-number">0x3a</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x3b</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">1</span>]<br><span class="hljs-number">0x3c</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">2</span>]<br><span class="hljs-number">0x3d</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">3</span>]<br><span class="hljs-number">0x3e</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">6</span>]<br><span class="hljs-number">0x3f</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">7</span>]<br><span class="hljs-number">0x40</span>: mov Reg[<span class="hljs-number">0</span>] , <span class="hljs-number">0x74</span><br><span class="hljs-number">0x41</span>: mov Reg[<span class="hljs-number">1</span>] , <span class="hljs-number">0x6c</span><br><span class="hljs-number">0x42</span>: mov Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x79</span><br><span class="hljs-number">0x43</span>: mov Reg[<span class="hljs-number">3</span>] , <span class="hljs-number">0x21</span><br><span class="hljs-number">0x44</span>: mov Reg[<span class="hljs-number">6</span>] , <span class="hljs-number">0xa</span><br><span class="hljs-number">0x45</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x46</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">1</span>]<br><span class="hljs-number">0x47</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">2</span>]<br><span class="hljs-number">0x48</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">3</span>]<br><span class="hljs-number">0x49</span>: <span class="hljs-built_in">putchar</span>() = Reg[<span class="hljs-number">6</span>]<br><span class="hljs-number">0x4a</span>: <span class="hljs-built_in">exit</span>()<br>------code_end------<br><span class="hljs-number">0x0</span>: <span class="hljs-keyword">xor</span> Reg[<span class="hljs-number">2</span>] , Reg[<span class="hljs-number">2</span>]          <span class="hljs-comment">//比对密文存入内存</span><br><span class="hljs-number">0x1</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0xff</span><br><span class="hljs-number">0x2</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x3</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x223</span><br><span class="hljs-number">0x4</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x5</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x23b</span><br><span class="hljs-number">0x6</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x7</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x237</span><br><span class="hljs-number">0x8</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x9</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x237</span><br><span class="hljs-number">0xa</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0xb</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x24b</span><br><span class="hljs-number">0xc</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0xd</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x22b</span><br><span class="hljs-number">0xe</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0xf</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0xfb</span><br><span class="hljs-number">0x10</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x11</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x22b</span><br><span class="hljs-number">0x12</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x13</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x223</span><br><span class="hljs-number">0x14</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x15</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x24f</span><br><span class="hljs-number">0x16</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x17</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0xef</span><br><span class="hljs-number">0x18</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x19</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x237</span><br><span class="hljs-number">0x1a</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x1b</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0xef</span><br><span class="hljs-number">0x1c</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x1d</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x24f</span><br><span class="hljs-number">0x1e</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x1f</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x24f</span><br><span class="hljs-number">0x20</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x21</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x223</span><br><span class="hljs-number">0x22</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x23</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x223</span><br><span class="hljs-number">0x24</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x25</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x23b</span><br><span class="hljs-number">0x26</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x27</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x237</span><br><span class="hljs-number">0x28</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x29</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0xff</span><br><span class="hljs-number">0x2a</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x2b</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x233</span><br><span class="hljs-number">0x2c</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x2d</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x233</span><br><span class="hljs-number">0x2e</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x2f</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x233</span><br><span class="hljs-number">0x30</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x31</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x237</span><br><span class="hljs-number">0x32</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x33</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x24b</span><br><span class="hljs-number">0x34</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x35</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x233</span><br><span class="hljs-number">0x36</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x37</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x24f</span><br><span class="hljs-number">0x38</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x39</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x22b</span><br><span class="hljs-number">0x3a</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x3b</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x22b</span><br><span class="hljs-number">0x3c</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x3d</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0x24b</span><br><span class="hljs-number">0x3e</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x3f</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , <span class="hljs-number">0xef</span><br><span class="hljs-number">0x40</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x41</span>: <span class="hljs-built_in">exit</span>()<br>------code_end------<br><span class="hljs-number">0x0</span>: <span class="hljs-keyword">xor</span> Reg[<span class="hljs-number">2</span>] , Reg[<span class="hljs-number">2</span>]        <span class="hljs-comment">//将密文a[i]-=0x63</span><br><span class="hljs-number">0x1</span>: mov Reg[<span class="hljs-number">0</span>] , Mem[Reg[<span class="hljs-number">2</span>]]<br><span class="hljs-number">0x2</span>: sub Reg[<span class="hljs-number">0</span>] , <span class="hljs-number">0x63</span><br><span class="hljs-number">0x3</span>: mov Mem[Reg[<span class="hljs-number">2</span>]] , Reg[<span class="hljs-number">0</span>]<br><span class="hljs-number">0x4</span>: add Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x1</span><br><span class="hljs-number">0x5</span>: cmp Reg[<span class="hljs-number">2</span>] , <span class="hljs-number">0x20</span><br><span class="hljs-number">0x6</span>: jb  <span class="hljs-number">0x1</span><br><span class="hljs-number">0x7</span>: <span class="hljs-built_in">exit</span>()<br></code></pre></td></tr></tbody></table></figure><p>实际执行时先存入密文并且处理，再输入flag经过处理后比对，逻辑如上，简单逆向算法即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">enc=[<span class="hljs-number">255</span>, <span class="hljs-number">547</span>, <span class="hljs-number">571</span>, <span class="hljs-number">567</span>, <span class="hljs-number">567</span>, <span class="hljs-number">587</span>, <span class="hljs-number">555</span>, <span class="hljs-number">251</span>, <span class="hljs-number">555</span>, <span class="hljs-number">547</span>, <span class="hljs-number">591</span>, <span class="hljs-number">239</span>, <span class="hljs-number">567</span>, <span class="hljs-number">239</span>, <span class="hljs-number">591</span>, <span class="hljs-number">591</span>, <span class="hljs-number">547</span>, <span class="hljs-number">547</span>, <span class="hljs-number">571</span>, <span class="hljs-number">567</span>, <span class="hljs-number">255</span>, <span class="hljs-number">563</span>, <span class="hljs-number">563</span>, <span class="hljs-number">563</span>, <span class="hljs-number">567</span>, <span class="hljs-number">587</span>, <span class="hljs-number">563</span>, <span class="hljs-number">591</span>, <span class="hljs-number">555</span>, <span class="hljs-number">555</span>, <span class="hljs-number">587</span>, <span class="hljs-number">239</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    tmp=enc[i]-<span class="hljs-number">0x63</span><br>    tmp&gt;&gt;=<span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(tmp^<span class="hljs-number">0x42</span>),end=<span class="hljs-string">''</span>)<br><span class="hljs-comment">#flag{e247780d029a7a992247e6667869008a}</span><br></code></pre></td></tr></tbody></table></figure><h2 id="总结-2">总结</h2><p>​<strong>在进行VM逆向分析时，首先要了解VM保护的运行流程，关键点在于Dispatcher中的指令解读和程序流程的分析，这其中的工作量一般是比较大的，并且比较吃汇编，同时要注意VM中指令格式，寄存器的结构体定义，这样可以优化伪码，加速分析。</strong></p><p>​   <strong>Parser的编写就是用python将op译码为x86的汇编，再进行算法分析，这个过程应该需要刷题来练的，不过该题的parser比较简单。</strong></p><blockquote><p><strong>IDA的宏定义 和 IDAPYTHON的使用还要进一步加深，分析VM耐心十分重要，虚拟化层度高时动调和静态结合效率会更高。</strong></p></blockquote><p>参考:</p><p><a href="https://www.cnblogs.com/0xHack/p/9399321.html">IDAPYTHON常用命令</a></p><p><a href="https://blog.shi1011.cn/ctf/2077">https://blog.shi1011.cn/ctf/2077</a></p><p><a href="https://www.cnblogs.com/nigacat/p/13039289.html">https://www.cnblogs.com/nigacat/p/13039289.html</a></p>]]></content>
    
    
    <categories>
      
      <category>RE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022HWS冬令营-Wp</title>
    <link href="/2022/01/26/2022HWS%E5%86%AC%E4%BB%A4%E8%90%A5-Wp/"/>
    <url>/2022/01/26/2022HWS%E5%86%AC%E4%BB%A4%E8%90%A5-Wp/</url>
    
    <content type="html"><![CDATA[<blockquote><p>题目质量蛮不错的，学到了很多东西，RE是2道VM的题，一道花指令+ollvm混淆，也有两道Android题在Misc和Crypto中，最刺激的是距比赛结束还有两分钟时解出了RE3。</p></blockquote><h1>一、Misc</h1><h2 id="badPDF">badPDF</h2><p>拿到文件拖入010editor中，发现是4c 00开头，是win下快捷方式的标志，并且本身后缀为.link文件。</p><p>通过搜索找到一篇文章https://www.sohu.com/a/387683719_476857</p><p>得知是2020年一个病毒的弱化样本，利用LNK快捷方式伪装nCov-19疫情的恶意攻击。</p><p>大致流程是运行时会在AppData/Local/Temp目录下加载js、exe文件等用于下一次攻击。该附件的执行流程与所述病毒样本类似，关键点在于拿到WsmPty.xsl文件，查看js可知他写在了\AppData\Local\Temp\cscript.exe目录下，运行fakepdf，在xsl加载到目录下时用notepad打开，内容如下。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version='1.0'?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">stylesheet</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.w3.org/1999/XSL/Transform"</span> <span class="hljs-attr">xmlns:ms</span>=<span class="hljs-string">"urn:schemas-microsoft-com:xslt"</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:user</span>=<span class="hljs-string">"placeholder"</span></span><br><span class="hljs-tag"><span class="hljs-attr">version</span>=<span class="hljs-string">"1.0"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">output</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"text"</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">ms:script</span> <span class="hljs-attr">implements-prefix</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"VBScript"</span>&gt;</span><br> &lt;![CDATA[<br> rBOH7OLTCVxzkH=HrtvBsRh3gNUbe("676d60667a64333665326564333665326564333665326536653265643336656564333665327c"):execute(rBOH7OLTCVxzkH):function HrtvBsRh3gNUbe(bhhz6HalbOkrki):for rBOH7OLTCVxzkH=1 to len(bhhz6HalbOkrki)step 2:HrtvBsRh3gNUbe=HrtvBsRh3gNUbe&amp;chr(asc(chr("&amp;h"&amp;mid(bhhz6HalbOkrki,rBOH7OLTCVxzkH,2)))xor 1):next:end function:<br> ]]&gt; <span class="hljs-tag">&lt;/<span class="hljs-name">ms:script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">stylesheet</span>&gt;</span><br><br></code></pre></td></tr></tbody></table></figure><p>可见按照VBS脚本正常执行就能拿到flag串，加密很容易hex_to_str后与1异或即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">'676d60667a64333665326564333665326564333665326536653265643336656564333665327c'</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(a[i]^<span class="hljs-number">1</span>),end=<span class="hljs-string">''</span>)<br><span class="hljs-comment">#flag{e27d3de27d3de27d3d7d3de27dde27d3}</span><br></code></pre></td></tr></tbody></table></figure><h2 id="gogogo">gogogo</h2><p>考点是拼图、取证和Aztec</p><p>首先是puzzle，一共有256个分辨率为160x100，如果用gaps的话需要是正方形，所以先用convert强行转分辨率为160x160。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">find ./ -name '*.png'  -exec convert -resize 160x160! {} {} \; <br></code></pre></td></tr></tbody></table></figure><p>之后montage指令将图片拼接</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">montage *png -tile 16x16 -geometry +0+0 out.png<br></code></pre></td></tr></tbody></table></figure><p>之后直接gaps自动化拼即可 size参数选160</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">gaps --image=out.png --generations=20 --population=256 --size=160<br></code></pre></td></tr></tbody></table></figure><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220123203055938.png" alt="image-20220123203055938"></p><p>拿到passwd: 3e8f092d4d7b80ce338d6e238efb01</p><p>之后还有2.raw文件，因为我们有个passwd所以猜测有zip文件，直接filescan找zip</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apl">volatility -f 2.raw imageinfo #WinXPSP2x86<br>volatility -f 2.raw --profile=WinXPSP2x86 filescan | grep "zip"<br>volatility -f 2.raw --profile=WinXPSP2x86  dumpfiles -Q [csgo.zip偏移] -D .<br></code></pre></td></tr></tbody></table></figure><p>能导出一个csgo.zip，并且能用puzzle得到的passwd解压，拿到二张图片(foremost分离csgo.png得到)</p><p>一个是阿兹特克的图片，一个是没有定位符的图片码，百度能确定是Aztec，那个枪名的谐音是提示，啊这。</p><p>网上生成一个标准的Aztec码，修复定位符即可，御用PDF修复，不会PS :)。</p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220123204323061.png" alt="image-20220123204323061" style="zoom:80%;"><h1>二、Crypto</h1><h2 id="babyrsa">babyrsa</h2><p>签到题，n能在线分解，正常rsa解密即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br>n=<span class="hljs-number">13123058934861171416713230498081453101147538789122070079961388806126697916963123413431108069961369055630747412550900239402710827847917960870358653962948282381351741121884528399369764530446509936240262290248305226552117100584726616255292963971141510518678552679033220315246377746270515853987903184512948801397452104554589803725619076066339968999308910127885089547678968793196148780382182445270838659078189316664538631875879022325427220682805580410213245364855569367702919157881367085677283124732874621569379901272662162025780608669577546548333274766058755786449491277002349918598971841605936268030140638579388226573929</span><br>e=<span class="hljs-number">2199344405076718723439776106818391416986774637417452818162477025957976213477191723664184407417234793814926418366905751689789699138123658292718951547073938244835923378103264574262319868072792187129755570696127796856136279813658923777933069924139862221947627969330450735758091555899551587605175567882253565613163972396640663959048311077691045791516671857020379334217141651855658795614761069687029140601439597978203375244243343052687488606544856116827681065414187957956049947143017305483200122033343857370223678236469887421261592930549136708160041001438350227594265714800753072939126464647703962260358930477570798420877</span><br>c=<span class="hljs-number">1492164290534197296766878830710549288168716657792979479408332026408553210558539364503279432780006256047888761718878241924947937039103166564146378209168719163067531460700424309878383312837345239570897122826051628153030129647363574035072755426112229160684859510640271933580581310029921376842631120847546030843821787623965614564745724229763999106839802052036834811357341644073138100679508864747009014415530176077648226083725813290110828240582884113726976794751006967153951269748482024859714451264220728184903144004573228365893961477199925864862018084224563883101101842275596219857205470076943493098825250412323522013524</span><br>p=<span class="hljs-number">98197216341757567488149177586991336976901080454854408243068885480633972200382596026756300968618883148721598031574296054706280190113587145906781375704611841087782526897314537785060868780928063942914187241017272444601926795083433477673935377466676026146695321415853502288291409333200661670651818749836420808033</span><br>q=<span class="hljs-number">133639826298015917901017908376475546339925646165363264658181838203059432536492968144231040597990919971381628901127402671873954769629458944972912180415794436700950304720548263026421362847590283353425105178540468631051824814390421486132775876582962969734956410033443729557703719598998956317920674659744121941513</span><br>d=gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br><span class="hljs-comment">#hwctf{01d_Curs3_c4Me_Again}</span><br></code></pre></td></tr></tbody></table></figure><h2 id="crypto-Elgamal">crypto_Elgamal</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">assert</span> ( A * s0 + B ) % q == s1<br><span class="hljs-keyword">assert</span> ( A * s1 + B ) % q == s2<br><span class="hljs-keyword">assert</span> ( A * s2 + B ) % q == s3<br><span class="hljs-keyword">assert</span> ( A * s3 + B ) % q == s4<br></code></pre></td></tr></tbody></table></figure><p>第一段是LCG，未知参数是A、B、q</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">s0 = <span class="hljs-number">543263588863771657634119</span><br>s1 = <span class="hljs-number">628899245716105951093835</span><br>s2 = <span class="hljs-number">78708024695487418261582</span><br>s3 = <span class="hljs-number">598971435111109998816796</span><br>s4 = <span class="hljs-number">789474285039501272453373</span><br>s=[s0,s1,s2,s3,s4]<br>t=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>):<br>    t.append(s[i+<span class="hljs-number">1</span>]-s[i])<br><span class="hljs-built_in">print</span>(t)<br><br>nn=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>):<br>    nn.append(<span class="hljs-built_in">abs</span>(t[i+<span class="hljs-number">1</span>]*t[i-<span class="hljs-number">1</span>]-t[i]*t[i]))<br><span class="hljs-built_in">print</span>(nn)<br>q=gmpy2.gcd(nn[<span class="hljs-number">0</span>],nn[<span class="hljs-number">1</span>])<br><span class="hljs-comment">#791763770658839585424113</span><br></code></pre></td></tr></tbody></table></figure><p>现在我们拿到(g, h, A, B, p, q),之后是ElGamal解密，可知他在生成r时也是线性同余，并且参数我们已知。</p><p>参考:2018 Code Blue lagalem</p><p><a href="https://ctf-wiki.org/crypto/asymmetric/discrete-log/elgamal/#2018-code-blue-lagalem">https://ctf-wiki.org/crypto/asymmetric/discrete-log/elgamal/#2018-code-blue-lagalem</a></p><p>即</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">tmp = gmpy2.powmod(c2, A, p) * gmpy2.powmod(h, B, p) * gmpy2.invert(c2_, p)<br>tmp = tmp % p<br>gg, x, y = gmpy2.gcdext(A - <span class="hljs-number">1</span>, p - <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(gg)<br>m = gmpy2.powmod(tmp, x, p)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></tbody></table></figure><p>如果是直接解出的q这里的gg则是7438，即我们求出的m 是 pow(m,7438,p)而7438是p-1的因数，所以rsa也不可解，可知在推导中如果我们取q`=k*q，那么A和B的值会变大，但是LCG的结果不会改变，而我们推导中用到了A和B的值来求t和gg，当我们改变q时，gg的值也在改变，故当gg足够小，为1时，则pow(tmp,x,p) = flag。</p><p>综上exp为:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><br>s0 = <span class="hljs-number">543263588863771657634119</span><br>s1 = <span class="hljs-number">628899245716105951093835</span><br>s2 = <span class="hljs-number">78708024695487418261582</span><br>s3 = <span class="hljs-number">598971435111109998816796</span><br>s4 = <span class="hljs-number">789474285039501272453373</span><br><br>s=[s0,s1,s2,s3,s4]<br>t=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>):<br>    t.append(s[i+<span class="hljs-number">1</span>]-s[i])<br><span class="hljs-built_in">print</span>(t)<br><br>nn=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>):<br>    nn.append(<span class="hljs-built_in">abs</span>(t[i+<span class="hljs-number">1</span>]*t[i-<span class="hljs-number">1</span>]-t[i]*t[i]))<br><span class="hljs-built_in">print</span>(nn)<br><span class="hljs-comment">#[258157280800981693845036338952604472521614296785, 375487011827303788911792498742822292475328703777]</span><br><span class="hljs-comment">#q=gmpy2.gcd(nn[0],nn[1])</span><br>q=<span class="hljs-number">375487011827303788911792498742822292475328703777</span>*<span class="hljs-number">3</span> <span class="hljs-comment">#从nn的元素中取再数乘即可，但要保证求A时逆元存在。</span><br><br>A=gmpy2.invert(s1-s0,q)*(s2-s1) %q<br>B=(s1-A*s[<span class="hljs-number">0</span>])%q<br><br><br>p = <span class="hljs-number">65211247300401312530078141569304950676358489059623557848188896752173856845051471066071652073612337629832155846984721797768267868868902023383604553319793550396610085424563231688918357710337401138108050205457200940158475922063279384491022916790549837379548978141370347556053597178221402425212594060342213485311</span><br>g = <span class="hljs-number">27642593390439430783453736408814717946185190497201679721975757020767271070510268596627490205095779429964809833535285315202625851326460572368018875381603399143376574281200028337681552876140857556460885848491160812604549770668188783258592940823128376128198726254875984002214053523752696104568469730021811399216</span><br>h = <span class="hljs-number">54585833166051670245656045196940486576634589000609010947618047461787934106392112227019662788387352615714332234871251868259282522817042504587428441746855906297390193418159792477477443129333707197013251839952389651332058368911829464978546505729530760951698134101053626585254469108630886768357270544236516534904</span><br><br><br>c1 = <span class="hljs-number">60724920570148295800083597588524297283595971970237964464679084640302395172192639331196385150232229004030419122038089044697951208850497923486467859070476427472465291810423905736825272208842988090394035980454248119048131354993356125895595138979611664707727518852984351599604226889848831071126576874892808080133</span><br>c2 = <span class="hljs-number">48616294792900599931167965577794374684760165574922600262773518630884983374432147726140430372696876107933565006549344582099592376234783044818320678499613925823621554608542446585829308488452057340023780821973913517239972817669309837103043456714481646128392677624092659929248296869048674230341175765084122344264</span><br>c1_ = <span class="hljs-number">42875731538109170678735196002365281622531058597803022779529275736483962610547258618168523955709341579773947887175626960699426438456382655370090748369934296474999389316334717699127421889816721511602392591677377678759026657582648354688447456509292302633971842316239774410380221303269351351929586256938787054867</span><br>c2_ = <span class="hljs-number">64829024929257668640929285124747107162970460545535885047576569803424908055130477684809317765011143527867645692710091307694839524199204611328374569742391489915929451079830143261799375621377093290249652912850024319433129432676683899459510155157108727860920017105870104383111111395351496171846620163716404148070</span><br><br>tmp = gmpy2.powmod(c2, A, p) * gmpy2.powmod(h, B, p) * gmpy2.invert(c2_, p)<br>tmp = tmp % p<br>gg, x, y = gmpy2.gcdext(A - <span class="hljs-number">1</span>, p - <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(gg)<br>m = gmpy2.powmod(tmp, x, p)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br><span class="hljs-comment">#19e9f185e6a680324cedd6e6d9382743</span><br></code></pre></td></tr></tbody></table></figure><h1>三、REVERSE</h1><h2 id="EasyVM">EasyVM</h2><p>修复花指令，patch call的第一个字节，之后观察控制流，尝试后在except异常处理块发现关键函数sub_4012F0</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sub_4012F0</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  _DWORD *v0; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> (__thiscall ***v1)(_DWORD, <span class="hljs-keyword">void</span> *, <span class="hljs-keyword">void</span> *, _DWORD, _BYTE *); <span class="hljs-comment">// ebx</span><br>  _BYTE *v2; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">char</span> flag[<span class="hljs-number">256</span>]; <span class="hljs-comment">// [esp+8h] [ebp-100h] BYREF</span><br><br>  v0 = (_DWORD *)sub_401889(<span class="hljs-number">0x24</span>u);<br>  <span class="hljs-keyword">if</span> ( v0 )<br>  {<br>    *v0 = &amp;off_40A0D0;<br>    v0[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    v0[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>    v0[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>    v0[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>;<br>    v0[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>;<br>    v0[<span class="hljs-number">6</span>] = <span class="hljs-number">0</span>;<br>    v0[<span class="hljs-number">7</span>] = <span class="hljs-number">0</span>;<br>    v0[<span class="hljs-number">8</span>] = <span class="hljs-number">0</span>;<br>    v1 = (<span class="hljs-keyword">int</span> (__thiscall ***)(_DWORD, <span class="hljs-keyword">void</span> *, <span class="hljs-keyword">void</span> *, _DWORD, _BYTE *))v0;<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    v1 = <span class="hljs-number">0</span>;<br>  }<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, flag);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(flag) == <span class="hljs-number">42</span> )<br>  {<br>    v2 = sub_4011E0(flag);<br>    <span class="hljs-keyword">if</span> ( (**v1)(v1, &amp;unk_40B030, &amp;unk_40B050, <span class="hljs-number">0</span>, v2) )<br>      sub_4016F9((<span class="hljs-keyword">int</span>)aCongratulation);<br>    <span class="hljs-keyword">else</span><br>      sub_4016F9((<span class="hljs-keyword">int</span>)aUnfortunatelyI);<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    sub_4016F9((<span class="hljs-keyword">int</span>)aVerificationFa);<br>  }<br>  system(Command);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>可知flag长度为42位，加密流程是sub_4011E0 和 v1指向的函数。</p><p>sub_4011E0是个魔改的base64，修改了表的值通过异或。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">{<br>  v6 += <span class="hljs-number">4</span>;<br>  v8 = *((<span class="hljs-keyword">unsigned</span> __int8 *)v7 - <span class="hljs-number">1</span>);<br>  v7 += <span class="hljs-number">3</span>;<br>  v4[v6 - <span class="hljs-number">4</span>] = aAbcdefghijklmn[v8 &gt;&gt; <span class="hljs-number">2</span>] ^ <span class="hljs-number">0xA</span>;<br>  v4[v6 - <span class="hljs-number">3</span>] = aAbcdefghijklmn[(*((<span class="hljs-keyword">unsigned</span> __int8 *)v7 - <span class="hljs-number">3</span>) &gt;&gt; <span class="hljs-number">4</span>) | (<span class="hljs-number">16</span> * (*(v7 - <span class="hljs-number">4</span>) &amp; <span class="hljs-number">3</span>))] ^ <span class="hljs-number">0xB</span>;/<br>  v4[v6 - <span class="hljs-number">2</span>] = aAbcdefghijklmn[(*((<span class="hljs-keyword">unsigned</span> __int8 *)v7 - <span class="hljs-number">2</span>) &gt;&gt; <span class="hljs-number">6</span>) | (<span class="hljs-number">4</span> * (*(v7 - <span class="hljs-number">3</span>) &amp; <span class="hljs-number">0xF</span>))] ^ <span class="hljs-number">0xC</span>;<br>  v4[v6 - <span class="hljs-number">1</span>] = aAbcdefghijklmn[*(v7 - <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0x3F</span>] ^ <span class="hljs-number">0xD</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>v1指向的函数是虚拟机处理函数，传入的参数依次为opcode，密文和经过base64处理后的密文。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220123205320141.png" alt="image-20220123205320141"></p><p>结合动态调试可知是按字节处理第三个参数，当前直接与前一个处理后的字节异或后在异或0xee在和密文比较(第一个字节异或0异或0xee)</p><p>综上编写exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>enc=[<span class="hljs-number">0</span>,<span class="hljs-number">0xBE</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xE3</span>]<br>m=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">56</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>    m.append(enc[i]^enc[i-<span class="hljs-number">1</span>]^<span class="hljs-number">0xee</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(m)[::-<span class="hljs-number">1</span>])<br><br>a=<span class="hljs-built_in">bytes</span>(m)[::-<span class="hljs-number">1</span>]<br>s=<span class="hljs-string">''</span><br>key=[<span class="hljs-number">0xa</span>,<span class="hljs-number">0xb</span>,<span class="hljs-number">0xc</span>,<span class="hljs-number">0xd</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    s+=<span class="hljs-built_in">chr</span>(a[i]^key[i%<span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span>(base64.b64decode(s.encode()))<br><span class="hljs-comment">#flag{2586dc76-98d5-44e2-ad58-d06e6559d82a}</span><br></code></pre></td></tr></tbody></table></figure><h2 id="babyre-2">babyre</h2><p>开局多种花指令，简单的跳转直接nop即可，有两种会影响反编译并且比较有趣。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">00401838</span>                 push    eax<br>.text:<span class="hljs-number">00401839</span>                 mov     eax, <span class="hljs-number">7F</span>h<br>.text:<span class="hljs-number">0040183</span>E                 test    eax, eax<br>.text:<span class="hljs-number">00401840</span>                 jz      <span class="hljs-keyword">short</span> loc_401847<br>.text:<span class="hljs-number">00401842</span>                 call    near ptr loc_401847+<span class="hljs-number">1</span><br>.text:<span class="hljs-number">00401847</span><br>.text:<span class="hljs-number">00401847</span> loc_401847:                             ; CODE XREF: .text:<span class="hljs-number">00401840</span>↑j<br>.text:<span class="hljs-number">00401847</span>                                         ; .text:<span class="hljs-number">00401842</span>↑p<br>.text:<span class="hljs-number">00401847</span>                 call    fword ptr [eax+<span class="hljs-number">58</span>h]<br> <span class="hljs-comment">//nop一个字节后</span><br>.text:<span class="hljs-number">00401848</span> loc_401848:                             ; CODE XREF: .text:<span class="hljs-number">00401842</span>↑p<br>.text:<span class="hljs-number">00401848</span>                 pop     eax<br>.text:<span class="hljs-number">00401849</span>                 pop     eax<br></code></pre></td></tr></tbody></table></figure><p>第一种分析知eax被赋0x7f后jz跳转恒不成立，故通过call来跳转，会压入地址进栈，nop下面call的第一个字节后出现pop，其实是恢复eax值，所以从push eax 到pop eax全nop掉即可。</p><p>第二种更复杂一点，不过也有push和pop恢复现场，全nop掉即可。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">00401</span>A28                 push    eax<br>.text:<span class="hljs-number">00401</span>A29                 push    ecx<br>.text:<span class="hljs-number">00401</span>A2A                 call    sub_4010A0<br>.text:<span class="hljs-number">00401</span>A2F                 add     eax, <span class="hljs-number">15</span>h<br>.text:<span class="hljs-number">00401</span>A32                 push    eax<br>.text:<span class="hljs-number">00401</span>A33                 pop     eax<br>.text:<span class="hljs-number">00401</span>A34                 mov     ecx, <span class="hljs-number">0F</span>FFFFFFFh<br>.text:<span class="hljs-number">00401</span>A39                 <span class="hljs-keyword">xor</span>     eax, ecx<br>.text:<span class="hljs-number">00401</span>A3B                 push    eax<br>.text:<span class="hljs-number">00401</span>A3C                 pop     ecx<br>.text:<span class="hljs-number">00401</span>A3D                 <span class="hljs-keyword">not</span>     ecx<br>.text:<span class="hljs-number">00401</span>A3F                 push    ecx<br>.text:<span class="hljs-number">00401</span>A40                 retn<br>.text:<span class="hljs-number">00401</span>A40 ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00401</span>A41                 db <span class="hljs-number">7</span>Eh, <span class="hljs-number">0F</span>Fh, <span class="hljs-number">15</span>h<br>.text:<span class="hljs-number">00401</span>A44 ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00401</span>A44                 pop     ecx<br>.text:<span class="hljs-number">00401</span>A45                 pop     eax<br></code></pre></td></tr></tbody></table></figure><p>简易版IPYTHON脚本手动去除，生成patch文件。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">adr1=<span class="hljs-number">0x00401A28</span><br>adr2=<span class="hljs-number">0x00401A46</span><br><span class="hljs-keyword">for</span> ad <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(adr1,adr2):<br>    PatchByte(ad,<span class="hljs-number">0x90</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'yes'</span>)<br></code></pre></td></tr></tbody></table></figure><p>之后查看控制流，发现ollvm混淆的特征，起初想找个自动化的脚本，可惜没找到!</p><p><a href="https://www.52pojie.cn/thread-1488350-1-1.html">https://www.52pojie.cn/thread-1488350-1-1.html</a></p><p>基本思路是，每个真实块的首地址下断点，运行并记录来还原，因为我们主要关注输入的变化所以，在所有输入的地方下断点，之后调试，多次尝试后执行如下。</p><p><strong>第一块</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//v31的初值为0</span><br>v31 = ~*(_DWORD *)&amp;input_str[<span class="hljs-number">4</span> * v30] &amp; v31 | ~v31 &amp; *(_DWORD *)&amp;input_str[<span class="hljs-number">4</span> * v30];<br>v32 = ~*(_DWORD *)&amp;input_str[<span class="hljs-number">4</span> * v30];  <span class="hljs-comment">// v30表示下标</span><br></code></pre></td></tr></tbody></table></figure><p>该块为与或非来实现异或，v31依次与所有输入异或(4byte一组)。</p><p><strong>第二块</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">*(_DWORD *)&amp;input_str[<span class="hljs-number">4</span> * v29] = ~*(_DWORD *)&amp;input_str[<span class="hljs-number">4</span> * v29] &amp; v31 | ~v31 &amp; *(_DWORD *)&amp;input_str[<span class="hljs-number">4</span> * v29];<br>v32 = v29;<span class="hljs-comment">//下标</span><br></code></pre></td></tr></tbody></table></figure><p>该块为输入4byte一组依次与v31异或。</p><p><strong>第三块</strong></p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">input_str</span>[<span class="hljs-number">32</span>] = (input_str[v<span class="hljs-number">28</span>] &amp; <span class="hljs-number">0</span>x<span class="hljs-number">98</span> | ~input_str[v<span class="hljs-number">28</span>] &amp; <span class="hljs-number">0</span>x<span class="hljs-number">67</span>) ^ (input_str[<span class="hljs-number">32</span>] &amp; <span class="hljs-number">0</span>x<span class="hljs-number">98</span> | ~input_str[<span class="hljs-number">32</span>] &amp; <span class="hljs-number">0</span>x<span class="hljs-number">67</span>);<br></code></pre></td></tr></tbody></table></figure><p>把进过异或后的所有字节异或到一起填充为33位，用于接下来的base64运算。</p><p><strong>第四块</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">v15 = v24 &amp; <span class="hljs-number">0xF4</span> | ~v24 &amp; <span class="hljs-number">0xF0C4020B</span>;<br>input_str[v20] = v15 ^ (input_str[v20] &amp; <span class="hljs-number">0xF4</span> | ~input_str[v20] &amp; <span class="hljs-number">0xB</span>);<br>input_str[v20 + <span class="hljs-number">1</span>] = ~v23 &amp; input_str[v20 + <span class="hljs-number">1</span>] | ~input_str[v20 + <span class="hljs-number">1</span>] &amp; v23;<br>LOBYTE(v15) = ~v22 &amp; *(_BYTE *)(v20 + <span class="hljs-number">10825322</span>) | ~*(_BYTE *)(v20 + <span class="hljs-number">10825322</span>) &amp; v22;<br>*(_BYTE *)(v20 + <span class="hljs-number">10825322</span>) = v15;<br> v32 = v15;<br></code></pre></td></tr></tbody></table></figure><p>这一块比较复杂，结合动态调试，观察输入的变化，发现是3个一组与3个数异或，而异或的三个数是前一个数据base64加密时转化为的前3个下标。</p><p>在执行时这个异或是从当前开始，之后所有三个一组与该组转化的key异或，第一组不做处理。</p><p><strong>第五块</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">v24 = (<span class="hljs-keyword">int</span>)input_str[v25] &gt;&gt; <span class="hljs-number">2</span>;         <span class="hljs-comment">// a[0]&gt;&gt;2</span><br>v10 = ~(<span class="hljs-number">16</span> * ~(~input_str[v25] | <span class="hljs-number">0xFC</span>));<span class="hljs-comment">// (a[0]&amp;0x3 &lt;&lt; 4)</span><br>v11 = ~((<span class="hljs-keyword">int</span>)input_str[v25 + <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">4</span>);  <span class="hljs-comment">// a[1]&gt;&gt;4</span><br>v23 = ~(v11 | v10) | (((<span class="hljs-keyword">int</span>)input_str[v25 + <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x24</span> | v11 &amp; <span class="hljs-number">0xDB</span>) ^ ((<span class="hljs-number">16</span> * ~(~input_str[v25] | <span class="hljs-number">0xFC</span>)) &amp; <span class="hljs-number">0x24</span> | v10 &amp; <span class="hljs-number">0xDB</span>);<br>LOBYTE(v11) = ~(<span class="hljs-number">4</span> * (input_str[v25 + <span class="hljs-number">1</span>] &amp; (input_str[v25 + <span class="hljs-number">1</span>] ^ <span class="hljs-number">0xF0</span>)));<br>v12 = ~((<span class="hljs-keyword">int</span>)input_str[v25 + <span class="hljs-number">2</span>] &gt;&gt; <span class="hljs-number">6</span>);<br>v22 = ~(v12 | v11) | (((<span class="hljs-keyword">int</span>)input_str[v25 + <span class="hljs-number">2</span>] &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0x11</span> | v12 &amp; <span class="hljs-number">0xEE</span>) ^ ((<span class="hljs-number">4</span>* (input_str[v25 + <span class="hljs-number">1</span>] &amp; (input_str[v25 + <span class="hljs-number">1</span>] ^ <span class="hljs-number">0xF0</span>))) &amp; <span class="hljs-number">0x11</span> | v11 &amp; <span class="hljs-number">0xEE</span>);<br>v21 = input_str[v25 + <span class="hljs-number">2</span>] &amp; (input_str[v25 + <span class="hljs-number">2</span>] ^ <span class="hljs-number">0xC0</span>);<br>v32 = <span class="hljs-number">0x7F</span>;<br>Str1[v26] = *(_BYTE *)sub_A22210(&amp;off_A52E38, v24);<br>Str1[v26 + <span class="hljs-number">1</span>] = *(_BYTE *)sub_A22210(&amp;off_A52E38, v23);<br>Str1[v26 + <span class="hljs-number">2</span>] = *(_BYTE *)sub_A22210(&amp;off_A52E38, v22);<br>v13 = v26 + <span class="hljs-number">3</span>;<br>v26 += <span class="hljs-number">4</span>;<br>Str1[v13] = *(_BYTE *)sub_A22210(&amp;off_A52E38, v21);<br>v20 = v25 + <span class="hljs-number">3</span>;<br>v19 = <span class="hljs-number">0xC90DC21D</span>;<br></code></pre></td></tr></tbody></table></figure><p>base64加密，动调测试得知3byte变为4byte的每组6bit的顺序没有变，只不过用与或非实现起来比较难读，这一步和第四块是交替进行的，每进行一次第五块再进行第四块，base64的表需要动调获得。</p><p>通过&amp;off_A52E38间接寻址获得。</p><p><img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/image-20220124231204350.png" alt="image-20220124231204350"></p><p>耐心调试，了解块的执行顺序后梳理解密逻辑，先是base64换表，之后逆第四块的异或，再之后需要拿到v31，假设我们的base解密后的为 c d 即 a^v31 b^v31 而 v31是由a^b得到所以 c^d == a^d  其中异或的v31抵消了，因此异或的4byte的key可由密文4个一组异或得到，之后再进行解密。</p><p>完整exp如下:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>s=<span class="hljs-string">'Fi9X/fxX6Q6JBfUfBM1V/y6V6PcPjMaQLl9IuttFuH68'</span><br>t1=<span class="hljs-string">'QVEJAfHmUYjBac+u8Ph5n9Od16FrICL/X0GvtM4qk7T2z3wNSsyoebilxWKgZpRD'</span><br>t2=<span class="hljs-string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span><br>c=<span class="hljs-string">''</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>    c+=t2[t1.index(s[i])]<br>cc=<span class="hljs-built_in">list</span>(base64.b64decode(c.encode()))  <span class="hljs-comment">#base换表</span><br><br>t=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(cc),<span class="hljs-number">3</span>): <span class="hljs-comment">#分成3个一组</span><br>    t.append(cc[i:i+<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(t)<br>new=[t[<span class="hljs-number">0</span>]]<br><br>key=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(t)):<br>    tmp=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>    a=base64.b64encode(<span class="hljs-built_in">bytes</span>(t[i-<span class="hljs-number">1</span>])).decode()<br>    k=[]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        k.append(t2.find(a[j]))<br>    key.append(k)<br><br><span class="hljs-comment">#print(key) 还原base64所用key</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(t)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>        k=key[j]<br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            t[i][p]^=k[p]<br><span class="hljs-built_in">print</span>(t) <span class="hljs-comment">#你迭代的base</span><br><br>m=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t:<br>    m.extend(i)<br><span class="hljs-comment">#print(m)            #base逆向后的明文</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(m))<br>mm=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">xor</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>        a[i]^=b[i]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(m)-<span class="hljs-number">1</span>,<span class="hljs-number">4</span>): <span class="hljs-comment">#需要异或v31 而 v31是由 明文4个一组异或而来</span><br>   xor(mm,m[i:i+<span class="hljs-number">4</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(mm[i%<span class="hljs-number">4</span>]^m[i]),end=<span class="hljs-string">''</span>)<br><span class="hljs-comment">#fce5e3dfc6db4f808ccaa6fcffecf583P</span><br></code></pre></td></tr></tbody></table></figure><hr><blockquote><p>re1理解错了，之前也没有编写解释器的经验，后续会复现补上。</p><p>同时赛中花大量时间去搞Android了，可惜最终没能调动起so文件，可能是模拟器有点问题把，一直attach目标程序不上，但最终收获也是蛮大的。</p><p>这次写解密脚本失误有点大，差点re3就废了，看m师傅用z3解的，确实又快又准，自己还要好好加油哦<img src="https://blog-1309321804.cos.ap-nanjing.myqcloud.com/blog/0BE18A75.png" alt="img" style="zoom: 33%;"></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CTF-WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PinTool-DBI技术利用</title>
    <link href="/2021/12/31/PinTool-DBI%E5%88%A9%E7%94%A8/"/>
    <url>/2021/12/31/PinTool-DBI%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>以2021SCTF的Low-RE为主，初探pintool技术，也对RE手段有了新的认识</p></blockquote><h1>IntelPin的安装</h1><blockquote><p>Pin 是 Intel 公司研发的一个动态二进制插桩框架，可以在二进制程序运行过程中插入各种函数，以监控程序每一步的执行。</p></blockquote><h2 id="条件准备">条件准备</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>、Visual Studio Community <span class="hljs-number">2019</span> Edition<br><br><span class="hljs-number">2</span>、Cygwin<span class="hljs-number">'</span>s <span class="hljs-number">64</span>-bit<br><span class="hljs-comment">//https://cygwin.com/install.html</span><br><span class="hljs-comment">//需要再安装时选择make gcc-g++的包，非默认</span><br>    <br><span class="hljs-number">3</span>、Intel Pin<br><span class="hljs-comment">//https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-binary-instrumentation-tool-downloads.html</span><br><span class="hljs-comment">//版本可以在3.18 - 3.20 或 3.11-3.13 有些对应版本的工具已经被编译为dll在git上</span><br></code></pre></td></tr></tbody></table></figure><h3 id="VS">VS</h3><p>不过要记录VS的vcvars32/64.bat的存放路径，找到VS存放的位置，例如。</p><blockquote><p>“F:\visual studio2019\VC\Auxiliary\Build”<br>build文件夹下有这两个bat文件</p></blockquote><h3 id="Cygwin">Cygwin</h3><p>Cygwin是能在windows环境下执行linux的指令，不过make，gcc，g++等指令要自己下载。</p><p><img src="https://i.imgur.com/5fpdYVd.png" alt=""></p><p>view 选择FULL 搜索要安装的gcc-g++ 和 make 即可，小箭头选着版本，skip即跳过。</p><p><strong>下载完成后，将’D:\Cygwin\bin’添加到环境变量。</strong></p><p><strong>cygwin安装新包</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>、重新运行安装程序<br><br><span class="hljs-number">2</span>、类似apt-get<br><br> apt-cyg install yourPackage<br></code></pre></td></tr></tbody></table></figure><h3 id="Intel-Pin">Intel Pin</h3><p><a href="https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-binary-instrumentation-tool-downloads.html">Intel pin官网下载</a></p><p><strong>版本可以选择3.18-3.20 / 3.10-3.13 有现成的工具</strong>。</p><p>完成下载后，将pin.exe所在的目录添加到环境变量。</p><blockquote><p>例如: “D:\pindir\pin”</p></blockquote><p>完成以上操作后，需要对pin\source\tools\ManualExamples的文件进行编译</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">x64<br><br>pushd D:\pindir\pin\source\tools\ManualExamples<br><span class="hljs-comment">//选择对应位的bat文件</span><br><br><span class="hljs-string">"F:\visual studio2019\VC\Auxiliary\Build\vcvars64.bat"</span><br><br>make all 或 make TARGET=intel64 <span class="hljs-comment">//等待即可</span><br><br><br><br>x86<br><br>pushd D:\pindir\pin\source\tools\ManualExamples<br><span class="hljs-comment">//选择对应位的bat文件</span><br><br><span class="hljs-string">"F:\visual studio2019\VC\Auxiliary\Build\vcvars64.bat"</span><br><br>make all 或 make TARGET=ia32 <span class="hljs-comment">//等待即可</span><br><br></code></pre></td></tr></tbody></table></figure><p><strong>编译成功后，会在ManualExamples目录下生成两个目录，里面的dll 文件即用到的pintools。</strong></p><blockquote><p>使用语法<br>pin -t inscount0.dll – test.exe   两个-</p></blockquote><p>单独把pintool的dll文件放到与目标PE文件同目录下，打开cmd输入指令即可。</p><p><strong>完成上述操作后，Intel Pin的一些常用pindll即可自由使用。</strong></p><p>有关pin的更多知识详见:<a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/5.2.1_pin.html#pin-%E5%9C%A8-ctf-%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/5.2.1_pin.html#pin-在-ctf-中的应用</a></p><h1>Pin在CTF中的使用</h1><blockquote><p>根据做题经验，往往加密后flag的check是逐个比对，也就是较接近明文的输入执行的指令数目越多，或用比较次数来反映，根据这一特性，有了pin的inscount的辅助，我们便能通过反馈的指令执行数目来爆破flag。</p></blockquote><h2 id="low-re">low_re</h2><blockquote><p>题目附件在文末。</p></blockquote><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1640960133/blog_img/%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/sctf-lowre_etmaja.png" alt=""></p><p>VM保护壳，64位程序，脱起壳来就比较麻烦，不过x64dbg能直接定位入口点dump出，但脱壳后的程序拖入IDA的逻辑也看不出如何执行。</p><p>strings窗口有线索，有些hash和flag的提示输入，也难猜出加密算法如何，起初尝试动调，虽然了解到是在调用py文件执行加密，并且找到了几个关键函数，但是还是发现不了加密过程。</p><blockquote><p>由此引入一种新的RE方式，静态和动态都无感，就尝试pintool来暴破一下。</p></blockquote><h3 id="爆破输入长度">爆破输入长度</h3><p>为了让输出效果更直观一些，修改inscount0.cpp编译出mycount64.dll,(自带的是写入到文件)。</p><blockquote><p>inscount1(BB级插桩) 与 inscount0(ins级插桩) 效果相同，但 inscount1 速度更快，实际解题时可以用 inscount1 代替 inscount0</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">VOID <span class="hljs-title">Fini</span><span class="hljs-params">(INT32 code, VOID *v)</span></span><br><span class="hljs-function"></span>{<br>    <span class="hljs-comment">// Write to a file since cout and cerr maybe closed by the application</span><br>    OutFile.setf(ios::showbase);<br>    OutFile &lt;&lt; <span class="hljs-string">"Count "</span> &lt;&lt; icount &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Count "</span> &lt;&lt; icount &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//this 结果输出</span><br>    OutFile.close();<br>}<br></code></pre></td></tr></tbody></table></figure><p>根据hash的条数来看输入的位数不会太多，先用mycount爆破一下不同输入位数，因为程序一般都会检测一下输入的长度，如果长度正确反馈的指令数也会更多。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen,PIPE<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv<br><span class="hljs-keyword">import</span> string<br>pinInit = <span class="hljs-keyword">lambda</span> tool,pe: Popen([<span class="hljs-string">'pin'</span>,<span class="hljs-string">'-t'</span>,tool,<span class="hljs-string">'--'</span>,pe],stdin=PIPE,stdout=PIPE)<br>pinWrite = <span class="hljs-keyword">lambda</span>  cont : pin.stdin.write(cont)<br>pinRead = <span class="hljs-keyword">lambda</span> : pin.communicate()[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:<br>    last_count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">30</span>):<br>        pin = pinInit(<span class="hljs-string">"mycount64"</span>,<span class="hljs-string">"low_re.exe"</span>)<br>        pinWrite(<span class="hljs-string">b"a"</span>*i+<span class="hljs-string">b'\n'</span>)  <span class="hljs-comment">#  换行前即输入内容</span><br>        _count = <span class="hljs-built_in">int</span>(pinRead().split(<span class="hljs-string">b"Count "</span>)[<span class="hljs-number">1</span>])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"inputlen({:2d}) -&gt; cout({}) -&gt; delta({})"</span>.<span class="hljs-built_in">format</span>(i,_count,_count-last_count))<br>        last_count=_count<br></code></pre></td></tr></tbody></table></figure><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1640960688/blog_img/%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/lowre1_cqg80x.png" alt=""></p><p>可见在输入长度为17时返回的指令数目明显多于其他长度，故flag大致长为17。</p><h3 id="爆破输入内容">爆破输入内容</h3><p>也是根据反馈指令数目最多来估计为正确字符。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen,PIPE<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv<br><span class="hljs-keyword">import</span> string<br>pinInit = <span class="hljs-keyword">lambda</span> tool,pe: Popen([<span class="hljs-string">'pin'</span>,<span class="hljs-string">'-t'</span>,tool,<span class="hljs-string">'--'</span>,pe],stdin=PIPE,stdout=PIPE)<br>pinWrite = <span class="hljs-keyword">lambda</span>  cont : pin.stdin.write(cont)<br>pinRead = <span class="hljs-keyword">lambda</span> : pin.communicate()[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:<br>    last_count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> string.printable: <span class="hljs-comment">#从可打印字符中爆破</span><br>        pin = pinInit(<span class="hljs-string">"mycount64"</span>,<span class="hljs-string">"low_re.exe"</span>)<br>        pinWrite(i.encode()+<span class="hljs-string">b'*'</span>*<span class="hljs-number">16</span>+<span class="hljs-string">b'\n'</span>)  <span class="hljs-comment">#  换行前即输入内容</span><br>        _count = <span class="hljs-built_in">int</span>(pinRead().split(<span class="hljs-string">b"Count "</span>)[<span class="hljs-number">1</span>])<br>        <span class="hljs-comment">#print("inputlen({:2d}) -&gt; cout({}) -&gt; delta({})".format(i,_count,_count-last_count))</span><br>        <span class="hljs-comment">#last_count=_count</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'Count(%s) : %d'</span>%(i,_count))<br><span class="hljs-comment"># ***************** -&gt;624221257</span><br><span class="hljs-comment"># S**************** -&gt;659084533</span><br><span class="hljs-comment"># S1*************** -&gt;699517166</span><br></code></pre></td></tr></tbody></table></figure><p>如下图，第一个字符为S时指令数目最多，按照如下思路爆破。</p><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1640960965/blog_img/%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/lowre2_eygakr.png" alt=""></p><p>单由主线程爆破会比较慢，初涉时跑了1个多小时，了解多线程后，用python实现多线程的爆破。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen,PIPE<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">import</span> string<br>pinInit = <span class="hljs-keyword">lambda</span> tool,pe: Popen([<span class="hljs-string">'pin'</span>,<span class="hljs-string">'-t'</span>,tool,<span class="hljs-string">'--'</span>,pe],stdin=PIPE,stdout=PIPE)<br>last_count=<span class="hljs-number">695980376</span> <span class="hljs-comment">#当前字符对应的指令数</span><br>flag=<span class="hljs-string">'S1'</span> <span class="hljs-comment">#测试的字符</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pintool</span>(<span class="hljs-params">s</span>):</span><br>    pin = pinInit(<span class="hljs-string">"mycount64"</span>, <span class="hljs-string">"low_re.exe"</span>)<br>    pin.stdin.write(s.encode())<br>    _count = <span class="hljs-built_in">int</span>(pin.communicate()[<span class="hljs-number">0</span>].split(<span class="hljs-string">b"Count "</span>)[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> _count<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">boom</span>():</span><br>        <span class="hljs-keyword">global</span> flag,last_count,Tcount<br><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> q.empty():<br>            nows=q.get()<br>            s=(flag+nows).ljust(<span class="hljs-number">17</span>,<span class="hljs-string">'*'</span>)+<span class="hljs-string">'\n'</span> <span class="hljs-comment">#换行代表输入</span><br>            cout=pintool(s)<br>            <span class="hljs-keyword">if</span> cout - last_count &gt; <span class="hljs-number">30000000</span>:<span class="hljs-comment">#设定值来判定输入是否正确</span><br>                flag += nows<br>                last_count = cout<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">'now_str({}) -&gt; count({})'</span>.<span class="hljs-built_in">format</span>(flag, cout))<br>                q.queue.clear()<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-comment">#    q.queue.clear() 清除队列再赋值</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setque</span>(<span class="hljs-params">q</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> string.printable[:-<span class="hljs-number">2</span>]:<span class="hljs-comment">#</span><br>        q.put(i)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:<br>    q = queue.Queue(<span class="hljs-number">100</span>)<br>    setque(q)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(flag)!=<span class="hljs-number">17</span>:<br>        <span class="hljs-keyword">if</span> q.empty():<br>            setque(q)<br>        <span class="hljs-keyword">while</span> threading.active_count()&lt;<span class="hljs-number">5</span>: <span class="hljs-comment">#维持活跃的多线程</span><br>             t=threading.Thread(target=boom)<br>             <span class="hljs-comment">#print(threading.active_count())</span><br>             t.start()<br></code></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">now_str(S1) -&gt; count(<span class="hljs-number">695980376</span>)<br>now_str(S1d) -&gt; count(<span class="hljs-number">735896918</span>)<br>now_str(S1de) -&gt; count(<span class="hljs-number">773007592</span>)<br>now_str(S1deC) -&gt; count(<span class="hljs-number">811103179</span>)<br>now_str(S1deCh) -&gt; count(<span class="hljs-number">852675272</span>)<br>now_str(S1deCh4) -&gt; count(<span class="hljs-number">885489938</span>)<br>now_str(S1deCh4n) -&gt; count(<span class="hljs-number">927208181</span>)<br>now_str(S1deCh4nn) -&gt; count(<span class="hljs-number">965470416</span>)<br>now_str(S1deCh4nne) -&gt; count(<span class="hljs-number">1002501465</span>)<br>now_str(S1deCh4nnel) -&gt; count(<span class="hljs-number">1035433103</span>)<br>now_str(S1deCh4nnelA) -&gt; count(<span class="hljs-number">1074349914</span>)<br>now_str(S1deCh4nnelAt) -&gt; count(<span class="hljs-number">1112107131</span>)<br>now_str(S1deCh4nnelAtt) -&gt; count(<span class="hljs-number">1149152834</span>)<br>now_str(S1deCh4nnelAtt@) -&gt; count(<span class="hljs-number">1192837040</span>)<br>now_str(S1deCh4nnelAtt@c) -&gt; count(<span class="hljs-number">1231986313</span>)<br><span class="hljs-comment">//SCTF{S1deCh4nnelAtt@ck}</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">hello challanger</span><br><span class="hljs-comment">please input your flag:</span><br><span class="hljs-comment">S1deCh4nnelAtt@ck</span><br><span class="hljs-comment">you are right</span><br><span class="hljs-comment">Count 1227060385*/</span><br></code></pre></td></tr></tbody></table></figure><p>在跑到最后一个字符时会有些反常，可以单独再爆破或者根据大意猜出为attack。</p><blockquote><p>反思:本题有着VM壳，或者如果遇到大量的混淆，在flag长度较短的情况下，pintool无疑是一大利器。</p></blockquote><p>有些程序判断flag正误会有congra或wrong!等提示，返回值在pin.communicate()元组中，也可以用于爆破。</p><h2 id="check判断计数">check判断计数</h2><blockquote><p>有时正确或者错误的输入在执行指令数上没有较大差别，那么第一种方式就不太适用了，但是程序如果是对输入逐个check的话，并且我们IDA中已知判断代码的地址，我们也能通过改写pintool来计数。</p></blockquote><p>例如:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;length(provided_flag); i++)<br>{<br><span class="hljs-keyword">if</span> (main_mapanic(provided_flag[i]) != constant_binary_blob[i])<br>{<br>bad_boy();<br><span class="hljs-built_in">exit</span>();<br>}<br>goodboy();<br>}<br><span class="hljs-comment">//节选自前辈博客</span><br></code></pre></td></tr></tbody></table></figure><p>可见是逐个对flag进行比较的，即cmp处，我们可以以此为参考，每当程序执行到cmp一次计数加一，因为如果比对错误程序就会退出，由此可以由count的大小来判断输入的正确性。</p><p>同样，对inscount0进行修改并编译成新的pintool。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">更改前：<br><span class="hljs-function">VOID <span class="hljs-title">docount</span><span class="hljs-params">()</span> </span>{ icount++; }<br>更改后：<br><span class="hljs-function">VOID <span class="hljs-title">docount</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *ip)</span> </span><br><span class="hljs-function"></span>{<br>  <span class="hljs-comment">// .text:000000000047B96E  cmp al, cl; #代码比较处</span><br><span class="hljs-keyword">if</span> ((<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span>)ip == <span class="hljs-number">0x000000000047B96E</span>)<br> icount++; <br>}<br><br></code></pre></td></tr></tbody></table></figure><p>编写py脚本对程序进行pintool攻击即可。</p><blockquote><p>最近初涉二进制插桩技术和pintool的简单使用，某些地方可能有错误理解，同时多线程的脚本可能写的有点拉跨，还望师傅们指正。</p></blockquote><hr><p>参考:</p><p>[pin install]起初配置参考: <a href="https://www.cnblogs.com/mgdzy/p/13644475.html">https://www.cnblogs.com/mgdzy/p/13644475.html</a></p><p>[pin in ctf]<a href="https://m4x.fun/post/pin-in-ctf/">https://m4x.fun/post/pin-in-ctf/</a></p><p>[cpu侧信道]<a href="https://www.istt.org.cn/NewsDetail/2672118.html">https://www.istt.org.cn/NewsDetail/2672118.html</a></p><p>[多线程脚本编写]<a href="https://www.cnblogs.com/franknihao/p/6627857.html">https://www.cnblogs.com/franknihao/p/6627857.html</a></p><p>low_re链接：<a href="https://pan.baidu.com/s/17-1WMhu9g5scBQ-RO6MO9Q">https://pan.baidu.com/s/17-1WMhu9g5scBQ-RO6MO9Q</a><br>提取码：uuuu</p>]]></content>
    
    
    <categories>
      
      <category>RE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSA dp和dq泄露</title>
    <link href="/2021/12/18/dp%E5%92%8Cdq%E6%B3%84%E9%9C%B2/"/>
    <url>/2021/12/18/dp%E5%92%8Cdq%E6%B3%84%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>从一个[羊城杯 2020]Power密码题，引发的关于dp 和 dq泄露等有趣的问题。</p></blockquote><p><strong>题目本身就出的有漏洞，并且对dp泄露的危害有了更深的理解。</strong></p><blockquote><p><strong>其中的数学基础主要基于费马定理和简单的数论推导,成立以m小于p为前提</strong></p></blockquote><h3 id="1、-羊城杯-2020-Power">1、[羊城杯 2020]Power</h3><p>题目如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p**<span class="hljs-number">4</span>*q<br><br>e = <span class="hljs-number">65537</span><br>phi = gmpy2.lcm(p - <span class="hljs-number">1</span>, q - <span class="hljs-number">1</span>)<br>d = gmpy2.invert(e, phi)<br>dp = d % (p - <span class="hljs-number">1</span>)<br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"dp = "</span> + <span class="hljs-built_in">str</span>(dp))<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"c = "</span> + <span class="hljs-built_in">str</span>(c))<br><br>y = <span class="hljs-number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span><br><br>g = <span class="hljs-number">2</span><br>x = <span class="hljs-number">2019</span>*p**<span class="hljs-number">2</span> + <span class="hljs-number">2020</span>*p**<span class="hljs-number">3</span> + <span class="hljs-number">2021</span>*p**<span class="hljs-number">4</span><br>c1 = <span class="hljs-built_in">pow</span>(g, x, y)<br><span class="hljs-built_in">print</span>( <span class="hljs-string">"c1 = "</span> + <span class="hljs-built_in">str</span>(c1))<br><br><span class="hljs-comment"># dp = 379476973158146550831004952747643994439940435656483772269013081580532539640189020020958796514224150837680366977747272291881285391919167077726836326564473</span><br><br><span class="hljs-comment"># c = 57248258945927387673579467348106118747034381190703777861409527336272914559699490353325906672956273559867941402281438670652710909532261303394045079629146156340801932254839021574139943933451924062888426726353230757284582863993227592703323133265180414382062132580526658205716218046366247653881764658891315592607194355733209493239611216193118424602510964102026998674323685134796018596817393268106583737153516632969041693280725297929277751136040546830230533898514659714717213371619853137272515967067008805521051613107141555788516894223654851277785393355178114230929014037436770678131148140398384394716456450269539065009396311996040422853740049508500540281488171285233445744799680022307180452210793913614131646875949698079917313572873073033804639877699884489290120302696697425</span><br><br><span class="hljs-comment"># c1 = 78100131461872285613426244322737502147219485108799130975202429638042859488136933783498210914335741940761656137516033926418975363734194661031678516857040723532055448695928820624094400481464950181126638456234669814982411270985650209245687765595483738876975572521276963149542659187680075917322308512163904423297381635532771690434016589132876171283596320435623376283425228536157726781524870348614983116408815088257609788517986810622505961538812889953185684256469540369809863103948326444090715161351198229163190130903661874631020304481842715086104243998808382859633753938512915886223513449238733721777977175430329717970940440862059204518224126792822912141479260791232312544748301412636222498841676742208390622353022668320809201312724936862167350709823581870722831329406359010293121019764160016316259432749291142448874259446854582307626758650151607770478334719317941727680935243820313144829826081955539778570565232935463201135110049861204432285060029237229518297291679114165265808862862827211193711159152992427133176177796045981572758903474465179346029811563765283254777813433339892058322013228964103304946743888213068397672540863260883314665492088793554775674610994639537263588276076992907735153702002001005383321442974097626786699895993544581572457476437853778794888945238622869401634353220344790419326516836146140706852577748364903349138246106379954647002557091131475669295997196484548199507335421499556985949139162639560622973283109342746186994609598854386966520638338999059</span><br></code></pre></td></tr></tbody></table></figure><p>我们已知c，c1，dp，e 没有n，可能我们注意力比较容易被c1的约束所吸引。</p><p><strong>c1是由2^x mod y 生成的，其中x和p相关，y是一个非常大的数，如果没有模运算，一个简单log就能求出n， 在模运算下，这就上升为离散对数问题。</strong></p><p>我们可以通过sympy库的<code>discrete_log</code> 函数来求解，可p是一个512bit的数，X是非常大的，在5min左右python跑出，或许sagemath 会更快一点，这也要求之后要掌握一些有关离散对数的求解算法。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(sympy.discrete_log(y,c1,<span class="hljs-number">2</span>))<br></code></pre></td></tr></tbody></table></figure><p>参考用法:        <a href="https://www.pythonf.cn/read/109392">https://www.pythonf.cn/read/109392</a></p><p>离散对数算法: <a href="http://www.zbc53.top/archives/124/">http://www.zbc53.top/archives/124/</a></p><p><strong>假设 我们求出了X 之后X就是p的一个多次方程，可以用z3进行求解。</strong></p><p>求出p之后呢，我们还是没有n 并且没有q的相关信息，这时就要用到dp这一个条件。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python">dp= d mod p-<span class="hljs-number">1</span><br><span class="hljs-comment">#两遍同乘e</span><br>e*dp = e*d mod p -<span class="hljs-number">1</span> <br><span class="hljs-comment">#等价</span><br>e*dp = e*d + k*(p-<span class="hljs-number">1</span>)    (<span class="hljs-number">1</span>)<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">根据我们钟爱的e*d = 1 mod phi n</span><br><span class="hljs-string"></span><br><span class="hljs-string">n= (p^4) *q</span><br><span class="hljs-string">phi(n) = (p^3)*(p-1)*q</span><br><span class="hljs-string"></span><br><span class="hljs-string">有了这些前提,不妨让式(1) mod phin</span><br><span class="hljs-string">"""</span><br>e*d + k*(p-<span class="hljs-number">1</span>) mod phin = e*dp <br><span class="hljs-comment">#等价</span><br><span class="hljs-number">1</span> + k*(p-<span class="hljs-number">1</span>) = e*dp +  k*phin    phin=(p^<span class="hljs-number">3</span>)*(p-<span class="hljs-number">1</span>)*q  也是k<span class="hljs-string">'*(p-1)</span><br><span class="hljs-string">#整理 也就是</span><br><span class="hljs-string">e*dp = 1 + k1*(p-1)     (2)    #感觉出其中的倍数关系即可</span><br><span class="hljs-string">#此处标位式(2) 我们之后会重点用到</span><br><span class="hljs-string"></span><br><span class="hljs-string">"""</span><br><span class="hljs-string">既然</span><br><span class="hljs-string">m ^ e = c mod n</span><br><span class="hljs-string">c^d mod n = m</span><br><span class="hljs-string">用到了欧拉定理</span><br><span class="hljs-string">a^(phin) mod n = 1 </span><br><span class="hljs-string"></span><br><span class="hljs-string">那么我们可以类似</span><br><span class="hljs-string">c ^ (dp) = m ^ (e*dp) = m ^ (1 + k1*(p-1))</span><br><span class="hljs-string">根据费马定理 a ^ (p-1) mod p = 1</span><br><span class="hljs-string">那么 c ^ dp  mod p = m</span><br><span class="hljs-string">"""</span><br><span class="hljs-string">c ^ dp  mod p = m</span><br></code></pre></td></tr></tbody></table></figure><p>根据上述推导，拿到p，游戏就结束了。</p><ul><li><p>上述  c ^ dp  mod p = m 必须要满足 m &lt; p 或者近似接近 否则近乎不能求解</p><p>即 m = (c^dp mod p) + k*p</p></li></ul><p><strong>回顾一下解题思路，我们执着于解离散对数和高次方程不就是为了求p么，但总结一下上面无论是dp还是 c1 都是有关p的，两个方程求一个未知量，是不是有点奢侈了呢?</strong></p><p><strong>注意推导中的这个式子e<em>dp = 1 + k1</em>(p-1)！！！ e和dp已知，k未知但是 e<em>dp - 1 一定是 (p-1)的整数倍，并且e</em>dp-1为525个bit 是十分接近的，这完全可以爆破。</strong></p><p>脚本如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  gmpy2<br><span class="hljs-keyword">import</span> cmath<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">from</span>  Crypto.Util.number <span class="hljs-keyword">import</span> *<br>e = <span class="hljs-number">65537</span><br>dp=<span class="hljs-number">379476973158146550831004952747643994439940435656483772269013081580532539640189020020958796514224150837680366977747272291881285391919167077726836326564473</span><br>c=<span class="hljs-number">57248258945927387673579467348106118747034381190703777861409527336272914559699490353325906672956273559867941402281438670652710909532261303394045079629146156340801932254839021574139943933451924062888426726353230757284582863993227592703323133265180414382062132580526658205716218046366247653881764658891315592607194355733209493239611216193118424602510964102026998674323685134796018596817393268106583737153516632969041693280725297929277751136040546830230533898514659714717213371619853137272515967067008805521051613107141555788516894223654851277785393355178114230929014037436770678131148140398384394716456450269539065009396311996040422853740049508500540281488171285233445744799680022307180452210793913614131646875949698079917313572873073033804639877699884489290120302696697425</span><br>ep=e*dp-<span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1000000</span>):<br>    <span class="hljs-keyword">if</span> ep % k ==<span class="hljs-number">0</span>:<br>        p = (ep//k) +<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(p):<br>            <span class="hljs-built_in">print</span>(k)<br><br>p=<span class="hljs-number">12131601165788024635030034921084070470053842112984866821070395281728468805072716002494427632757418621194662541766157553264889658892783635499016425528807741</span><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,dp,p)))<br></code></pre></td></tr></tbody></table></figure><p><strong>这样也能达到解出p的目的，并且直接用 pow(c,dp,p),求解，用到了两个二级推导结论。</strong></p><p><strong>这也能透露出当m&lt;p时e*dp泄露的危害，如果能通过dp爆破出p，或者直接拿到p ，则直接用dp 和 p，作为私钥和公钥解密即可。</strong></p><p><strong>dp，dq本身就是为了快速解密服务的，也就决定了，大多情况下的p和q是非常大的，往往m会比p要小很多，如果出题人在dp泄露时忽视了这一点，那么可能会出现非预期。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#在m&gt;&gt;p 的dp泄露就需要给出e和n，以便我们借助p来分解n</span><br><span class="hljs-comment">#以网上的一个题目为例</span><br>(<span class="hljs-string">'dp='</span>, <span class="hljs-string">'0x7f1344a0b8d2858492aaf88d692b32c23ef0d2745595bc5fe68de384b61c03e8fd054232f2986f8b279a0105b7bee85f74378c7f5f35c3fd505e214c0738e1d9'</span>)<br>(<span class="hljs-string">'n='</span>, <span class="hljs-string">'0x5eee1b4b4f17912274b7427d8dc0c274dc96baa72e43da36ff39d452ff6f2ef0dc6bf7eb9bdab899a6bb718c070687feff517fcf5377435c56c248ad88caddad6a9cefa0ca9182daffcc6e48451d481f37e6520be384bedb221465ec7c95e2434bf76568ef81e988039829a2db43572e2fe57e5be0dc5d94d45361e96e14bd65L'</span>)<br>(<span class="hljs-string">'e='</span>, <span class="hljs-string">'0x10001'</span>)<br>(<span class="hljs-string">'c='</span>, <span class="hljs-string">'0x510fd8c3f6e21dfc0764a352a2c7ff1e604e1681a3867480a070a480f722e2f4a63ca3d7a92b862955ab4be76cde43b51576a128fba49348af7a6e34b335cfdbda8e882925b20503762edf530d6cd765bfa951886e192b1e9aeed61c0ce50d55d11e343c78bb617d8a0adb7b4cf3b913ee85437191f1136e35b94078e68bee8dL'</span>)<br></code></pre></td></tr></tbody></table></figure><h4 id="1、p-m-Quic-Crack">1、p&lt;m Quic Crack</h4><p><strong>p的位数可以直接观察dp得出，接近512bit，64字节，一般flag在30-50左右甚至更短，即m&lt;p</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>dp=<span class="hljs-number">0x7f1344a0b8d2858492aaf88d692b32c23ef0d2745595bc5fe68de384b61c03e8fd054232f2986f8b279a0105b7bee85f74378c7f5f35c3fd505e214c0738e1d9</span><br><br>n=<span class="hljs-number">0x5eee1b4b4f17912274b7427d8dc0c274dc96baa72e43da36ff39d452ff6f2ef0dc6bf7eb9bdab899a6bb718c070687feff517fcf5377435c56c248ad88caddad6a9cefa0ca9182daffcc6e48451d481f37e6520be384bedb221465ec7c95e2434bf76568ef81e988039829a2db43572e2fe57e5be0dc5d94d45361e96e14bd65</span><br>e=<span class="hljs-number">0x10001</span><br>c=<span class="hljs-number">0x510fd8c3f6e21dfc0764a352a2c7ff1e604e1681a3867480a070a480f722e2f4a63ca3d7a92b862955ab4be76cde43b51576a128fba49348af7a6e34b335cfdbda8e882925b20503762edf530d6cd765bfa951886e192b1e9aeed61c0ce50d55d11e343c78bb617d8a0adb7b4cf3b913ee85437191f1136e35b94078e68bee8d</span><br>edp=e*dp - <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10000000</span>):<br>    <span class="hljs-keyword">if</span> edp%k==<span class="hljs-number">0</span>:<br>        p= edp//k + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(p):<br>            <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,dp,p)))<br></code></pre></td></tr></tbody></table></figure><p>当然这只是一种特殊情况，但是网上大多数关于dp泄露题目貌似都存在这个问题。</p><h4 id="2、通用解法">2、通用解法</h4><p><strong>通解，当然rsa加密对密文本身就限制了m是要比n小的</strong></p><p>所以分解n直接解就得了，既然上脚本我们已经测试出了p ，那么q = n//p 即可。</p><p>综上，综合两种脚本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>dp=<span class="hljs-number">0x7f1344a0b8d2858492aaf88d692b32c23ef0d2745595bc5fe68de384b61c03e8fd054232f2986f8b279a0105b7bee85f74378c7f5f35c3fd505e214c0738e1d9</span><br><br>n=<span class="hljs-number">0x5eee1b4b4f17912274b7427d8dc0c274dc96baa72e43da36ff39d452ff6f2ef0dc6bf7eb9bdab899a6bb718c070687feff517fcf5377435c56c248ad88caddad6a9cefa0ca9182daffcc6e48451d481f37e6520be384bedb221465ec7c95e2434bf76568ef81e988039829a2db43572e2fe57e5be0dc5d94d45361e96e14bd65</span><br>e=<span class="hljs-number">0x10001</span><br>c=<span class="hljs-number">0x510fd8c3f6e21dfc0764a352a2c7ff1e604e1681a3867480a070a480f722e2f4a63ca3d7a92b862955ab4be76cde43b51576a128fba49348af7a6e34b335cfdbda8e882925b20503762edf530d6cd765bfa951886e192b1e9aeed61c0ce50d55d11e343c78bb617d8a0adb7b4cf3b913ee85437191f1136e35b94078e68bee8d</span><br>edp=e*dp - <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10000000</span>):<br>    <span class="hljs-keyword">if</span> edp%k==<span class="hljs-number">0</span>:<br>        p= edp//k + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(p):<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,dp,p)).decode(<span class="hljs-string">'utf-8'</span>)) <span class="hljs-comment">#flag肯定是可见字符</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">'Quick Crack Suc!'</span>)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">except</span>:<br>                q=n//p<br>                phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>                d=gmpy2.invert(e,phi)<br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)).decode(<span class="hljs-string">'utf-8'</span>))<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">'yes!'</span>)<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">except</span>:<br>                    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></tbody></table></figure><p><strong>测试，用如下式例来测试 m &gt; p的情况</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">dp = <span class="hljs-number">14423533367739841601650555272663543354837347609362352488761411482549189398193</span><br>p =  <span class="hljs-number">69901287164206610888661720099426949703910023683707793762919220907478091073681</span><br>c=  <span class="hljs-number">2262919207276468849681578487794992281448594044416435512543882157738828978766101685798623343531305619235784170849036103143665025760464116190980363198608567</span><br>e=<span class="hljs-number">65537</span><br>n=<span class="hljs-number">5965322435025945026021165385608956120433036321627501574655956870755806607342365635361310529607383516087208412532082338428923031616470920911896483167491881</span><br></code></pre></td></tr></tbody></table></figure><h3 id="2、dp-dq泄露">2、dp dq泄露</h3><p><strong>dp 和 dq泄露 和dp泄露有着异曲同工之妙，不过忽略了m &lt; p / q 就成了纸老虎。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">c: <span class="hljs-number">95272795986475189505518980251137003509292621140166383887854853863720692420204142448424074834657149326853553097626486371206617513769930277580823116437975487148956107509247564965652417450550680181691869432067892028368985007229633943149091684419834136214793476910417359537696632874045272326665036717324623992885</span><br>p: <span class="hljs-number">11387480584909854985125335848240384226653929942757756384489381242206157197986555243995335158328781970310603060671486688856263776452654268043936036556215243</span><br>q: <span class="hljs-number">12972222875218086547425818961477257915105515705982283726851833508079600460542479267972050216838604649742870515200462359007315431848784163790312424462439629</span><br>dp: <span class="hljs-number">8191957726161111880866028229950166742224147653136894248088678244548815086744810656765529876284622829884409590596114090872889522887052772791407131880103961</span><br>dq: <span class="hljs-number">3570695757580148093370242608506191464756425954703930236924583065811730548932270595568088372441809535917032142349986828862994856575730078580414026791444659</span><br></code></pre></td></tr></tbody></table></figure><p>按之前的算法 是要用中国剩余定理求d的</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dp = d mod p-<span class="hljs-number">1</span><br>dq = d mod q-<span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h4 id="1、解密思路-Crt">1、解密思路 + Crt</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python">m1 = c^dp mod p<br>m2 = c^dq mod q<br>dp = d mod p-<span class="hljs-number">1</span>   -&gt; dp = d + k*(p-<span class="hljs-number">1</span>)<br>dq = q mod q-<span class="hljs-number">1</span><br><span class="hljs-comment">#根据 费马可得 c^dp mod p = c^d mod p</span><br><span class="hljs-comment">#同理 c^dq mod q = c^d mod q </span><br>c^d mod p = m1<br>c^d mod q = m2<br><br>构造 x = k1*m1 + k2*m2<br><br>(<span class="hljs-number">1</span>)k1 mod p =<span class="hljs-number">1</span><br>(<span class="hljs-number">2</span>)k1 mod q =<span class="hljs-number">0</span><br><br>k1 = k*q 带入(<span class="hljs-number">1</span>)<br>k = q^(-<span class="hljs-number">1</span>) mod p <br>即 k1 = (q ^(-<span class="hljs-number">1</span>) mod p) *q<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">推广到一般 如果 在剩余定理中</span><br><span class="hljs-string">x mod a1 = b1 </span><br><span class="hljs-string">x mod a2 = b2</span><br><span class="hljs-string">x mod a3 = b3</span><br><span class="hljs-string">...</span><br><span class="hljs-string"></span><br><span class="hljs-string">那么构造的数 m = k1*b1 + k2*b2 + ... kn * bn</span><br><span class="hljs-string">k1 = ((a2 *a3 *..an)^(-1) mod a1) * (a2 *a3 *..an)</span><br><span class="hljs-string">k2 = ((a1 *a3 *..an)^(-1) mod a1) * (a2 *a3 *..an)</span><br><span class="hljs-string"><span class="hljs-meta">... </span>如此规律</span><br><span class="hljs-string">M=a1*a2*..an</span><br><span class="hljs-string">Mi = M / ai</span><br><span class="hljs-string">Mi' = gmpy2.invert(Mi,ai)</span><br><span class="hljs-string">Mi * Mi' * bi 每一项</span><br><span class="hljs-string">综合要%M  一下</span><br><span class="hljs-string">"""</span><br><br></code></pre></td></tr></tbody></table></figure><p>即</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>dp= <span class="hljs-number">90494486973243104756298311175705002887155440121025946664275790548694955799661434870163629541771658812502682012435200659355928618529521731475360236486362525996535354732687624609637012830178545914960485330748345108757203508531117591067570383564779625954776907685968592668868046507450242047759226407026094726359</span><br>dq= <span class="hljs-number">92386717102324384872139253931247976320472847834037799716676564640678692924258053130751618730959510913784801723023536527134208843358920592320351399005428347188639433875570867152865970587272904695272790831679276818402117343413503376057524788386479263579869430615501089905630519162146030369086836183772975252551</span><br>p= <span class="hljs-number">121869669684596731118740111360803257498670698122183387353481580136405322481841982461820301261370579505460038281590785837096967719889404913176714663774999789266522508163678949469953184327222227297952119212490499582581953510522212981687122483764873187827531047946130999532741388680549345732675732040579796067001</span><br>q= <span class="hljs-number">128363031923139297392077349407719417788135630403499671848196425800900870531452570499668481104884553795224784931947824885511134525485570129640119439950191944938407656926280993408854767711557863016197167505998324659906146937423415404059310560359693643987781862684489401368519777953281060013045590132161625607377</span><br>c= <span class="hljs-number">4176193749773450562408160796325873473193702511560805285554329767573726211097194419198463203488792792756598428753745425419950423161673497255820731183746106463781291156892140581651301528184812357534808298071893380519977926677138246941946185699346532140641376461516107672722425971178865758049759985915001009787241295292157744353554548314911531918044654676691927347018033509499136103964942830581407087547565204232556314726045307279963709599952745342811947421707024572981812906869557834491207590418553244020621858083633564878305733114484857827620268881100166090837841224767358579366482347136224695333980041913268394994302</span><br>m1 = <span class="hljs-built_in">pow</span>(c,dp,p)<br>m2 = <span class="hljs-built_in">pow</span>(c,dq,q)<br>d = gmpy2.invert(q,p)*(q)*m1 + gmpy2.invert(p,q)*(p)*m2<br><br><span class="hljs-built_in">print</span>(long_to_bytes(d%(p*q)))<br></code></pre></td></tr></tbody></table></figure><p>用python的库sympy来实现crt</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> * <span class="hljs-comment">#从sympy数论库中导入函数</span><br>crt([p,q],[m1,m2])<br><span class="hljs-comment"># 第一个参数是模数组，第二个参数是余数组</span><br><span class="hljs-comment"># 返回值是一个元组 第一个数是求解的m值，第二个数是所有模数的乘积</span><br><br>m=crt([p,q],[m1,m2])[<span class="hljs-number">0</span>] <span class="hljs-comment">#得到解即可</span><br><span class="hljs-built_in">print</span>(long_to_bytes(m%n))<br></code></pre></td></tr></tbody></table></figure><p>sympy库中有很多方便的函数，有大致印象百度即可。</p><h4 id="2、测试用例">2、测试用例</h4><p>反例当messaege&gt;q</p><p>注意m要小于n</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p=getPrime(<span class="hljs-number">256</span>)<br>q=getPrime(<span class="hljs-number">256</span>)<br>n=p*q<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>e=<span class="hljs-number">65537</span><br>d=gmpy2.invert(e,phi)<br>dp=d%(p-<span class="hljs-number">1</span>)<br>dq=d%(q-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'dp = '</span>,dp)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'p = '</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'dq = '</span>,dq)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'q= '</span>,q)<br>m=<span class="hljs-string">b'flag{If_the message_is_larger_than_prime_end!!!}'</span><br>c=bytes_to_long(m)<br>c= <span class="hljs-built_in">pow</span>(c,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'c= '</span>,c)<br></code></pre></td></tr></tbody></table></figure><p>如果继续解密,则是乱码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>dp = <span class="hljs-number">14423533367739841601650555272663543354837347609362352488761411482549189398193</span><br>p =  <span class="hljs-number">69901287164206610888661720099426949703910023683707793762919220907478091073681</span><br>c=  <span class="hljs-number">2262919207276468849681578487794992281448594044416435512543882157738828978766101685798623343531305619235784170849036103143665025760464116190980363198608567</span><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,dp,p)))<br><span class="hljs-comment"># b'Y\x83^\xa4\xf2\xbaC\xbfY\xa0\x9a!\x07^\xb0\x12\xaa-\xa0\x10\xf8;\x9b\xb1\xaaF5\x9f\xb2\x952\xc0'</span><br></code></pre></td></tr></tbody></table></figure><p>中国剩余定理,成功解决</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>dp =  <span class="hljs-number">14423533367739841601650555272663543354837347609362352488761411482549189398193</span><br>p =  <span class="hljs-number">69901287164206610888661720099426949703910023683707793762919220907478091073681</span><br>dq =  <span class="hljs-number">32437946587531699347725552012753985094383131578752766354933176932787801620073</span><br>q=  <span class="hljs-number">85339235900086908600694050911639754370783480963298143334400691126173744722201</span><br>c=  <span class="hljs-number">2262919207276468849681578487794992281448594044416435512543882157738828978766101685798623343531305619235784170849036103143665025760464116190980363198608567</span><br>m1 = <span class="hljs-built_in">pow</span>(c,dp,p)<br>m2 = <span class="hljs-built_in">pow</span>(c,dq,q)<br>d = gmpy2.invert(q,p)*(q)*m1 + gmpy2.invert(p,q)*(p)*m2<br><br><span class="hljs-built_in">print</span>(long_to_bytes(d%(p*q)))<br><span class="hljs-comment">#b'flag{If_the message_is_larger_than_prime_end!!!}'</span><br></code></pre></td></tr></tbody></table></figure><hr><blockquote><p>推导过程中的中间结论也能对解密有巨大贡献，在进行加密时，还要考虑密文和素因数以及模数的大小，防止出现非预期的漏洞。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021NCTF-Re</title>
    <link href="/2021/12/01/2021NCTF-RE/"/>
    <url>/2021/12/01/2021NCTF-RE/</url>
    
    <content type="html"><![CDATA[<h1>NCTF-RE</h1><h2 id="签到">签到</h2><p><strong>送IDA又送flag</strong></p><p><strong>欢迎来到NCTF-逆向工程(Reverse Engineering)</strong><br><strong>这里可能有你需要的工具:</strong><br><strong>ida pro 7.6 :</strong></p><p><strong>链接：<a href="https://pan.baidu.com/s/1bV2HjBBX0bwwtzORqhErOg">https://pan.baidu.com/s/1bV2HjBBX0bwwtzORqhErOg</a></strong></p><p><strong>提取码：o49x</strong></p><h2 id="Shadowbringer">Shadowbringer</h2><p>c++64位程序，ida载入</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::<span class="hljs-built_in">string</span>(v4, <span class="hljs-string">"U&gt;F2UsQXN`5sXMELT=:7M_2&lt;X]^1ThaWF0=KM?9IUhAsTM5:T==_Ns&amp;&lt;Vhb!"</span>, &amp;v6);<br>  <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">char</span>&gt;::~allocator(&amp;v6);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-keyword">operator</span>&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-keyword">char</span>&gt;&gt;(refptr__ZSt4cout, <span class="hljs-string">"Welcome.Please input your flag:\n"</span>);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-keyword">operator</span>&gt;&gt;&lt;<span class="hljs-keyword">char</span>&gt;(refptr__ZSt3cin, (<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)input);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::<span class="hljs-built_in">string</span>((<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v8, (<span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)input);<span class="hljs-comment">// strcpy</span><br>  base64encode1((<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v7, (<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v8);<span class="hljs-comment">// 换表的base64</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::<span class="hljs-keyword">operator</span>=((<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)input, (<span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v7);<span class="hljs-comment">// 赋值 第一层密文</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>((<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v7);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>((<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v8);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::<span class="hljs-built_in">string</span>((<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v10, (<span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)input);<span class="hljs-comment">// 复制一个对象v10</span><br>  base64encode2((<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v9, (<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v10); <span class="hljs-comment">// base64换表 两次 不同的表</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::<span class="hljs-keyword">operator</span>=((<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)input, (<span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v9);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>((<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v9);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>((<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v10);<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> __int8)<span class="hljs-built_in">std</span>::<span class="hljs-keyword">operator</span>==&lt;<span class="hljs-keyword">char</span>&gt;(input, v4) )<br>    <span class="hljs-built_in">std</span>::<span class="hljs-keyword">operator</span>&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-keyword">char</span>&gt;&gt;(refptr__ZSt4cout, <span class="hljs-string">"Right."</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-keyword">operator</span>&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-keyword">char</span>&gt;&gt;(refptr__ZSt4cout, <span class="hljs-string">"Wrong."</span>);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>((<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v4);<br></code></pre></td></tr></tbody></table></figure><p>主要用到了c++ string类来进行处理，结合动调，大致经过了两次base64变表加密，在和v4进行比较。<br><strong>第一组表，</strong><br><strong>‘#$%&amp;’,27h,‘()*+,-.s0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[h]’+‘^_`ab’</strong></p><p><strong>第二组表</strong><br><strong>‘ba`_^]h[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210s.-,+*)(’,27h,‘&amp;’‘+’%$#’</strong></p><p>两次加密的代码大致相同，主要通过表的长度和每次处理的二进制长度判断为base64.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">bitset</span>&lt;8ull&gt;::to_string(v13, v14);     <span class="hljs-comment">// 转为2进制</span><br><span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-keyword">unsigned</span> __int64)<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::size((<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)&amp;v9); j += <span class="hljs-number">6</span> )<span class="hljs-comment">// 6个二进制一组</span><br>v7 = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::<span class="hljs-keyword">operator</span>[](&amp;hisoralce, v6);<span class="hljs-comment">//表索引</span><br><br><span class="hljs-keyword">while</span> ( (<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::size(a1) &amp; <span class="hljs-number">3</span>) != <span class="hljs-number">0</span> )<br>  {<br>    <span class="hljs-built_in">std</span>::<span class="hljs-keyword">operator</span>+&lt;<span class="hljs-keyword">char</span>&gt;(v19, a1, <span class="hljs-string">'!'</span>);<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::<span class="hljs-keyword">operator</span>=(a1, (<span class="hljs-keyword">const</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v19);<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>((<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)v19);<br>  }<br><span class="hljs-comment">//不为4的倍数就不断+!</span><br></code></pre></td></tr></tbody></table></figure><p>了解流程后写解密脚本即可</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>table1=<span class="hljs-string">'#$%&amp;'</span>+<span class="hljs-string">'\x27'</span>+<span class="hljs-string">'()*+,-.s0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[h]'</span>+<span class="hljs-string">'^_`ab'</span><br>table2=<span class="hljs-string">'ba`_^]h[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210s.-,+*)('</span>+<span class="hljs-string">'\x27'</span>+<span class="hljs-string">'&amp;%$#'</span><br>base=<span class="hljs-string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span><br>enc=<span class="hljs-string">'U&gt;F2UsQXN`5sXMELT=:7M_2&lt;X]^1ThaWF0=KM?9IUhAsTM5:T==_Ns&amp;&lt;Vhb!'</span><br><span class="hljs-comment">#enc='FsJ7M?b&lt;U-&gt;2M&gt;U:'#123456789测试</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">newbase</span>(<span class="hljs-params">enc,table</span>):</span><br>    m=<span class="hljs-string">''</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>        <span class="hljs-keyword">if</span> enc[i] <span class="hljs-keyword">in</span> table:<br>            m+=base[table.index(enc[i])]<br>        <span class="hljs-keyword">else</span>:<br>            m+=<span class="hljs-string">'='</span><br>    <span class="hljs-built_in">print</span>(base64.b64decode(m))<br>    <span class="hljs-keyword">return</span> base64.b64decode(m)<br>c1=newbase(enc,table2).decode()<br>newbase(c1,table1)<br><span class="hljs-comment">#NCTF{H0m3_r1d1n9_h0m3_dy1n9_h0p3}</span><br></code></pre></td></tr></tbody></table></figure><h2 id="鲨鲨的秘密">鲨鲨的秘密</h2><p>32位程序,ida载入</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">IpAdress = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>u);<br> VirtualProtect(IpAdress, <span class="hljs-number">0x20</span>u, <span class="hljs-number">0x40</span>u, &amp;flOldProtect);<br> dword_404E48 = (<span class="hljs-keyword">int</span>)IpAdress;<br> *(_BYTE *)IpAdress = <span class="hljs-number">0xC3</span>;                    <span class="hljs-comment">// ret的机器码</span><br> ((<span class="hljs-keyword">void</span> (*)(<span class="hljs-keyword">void</span>))IpAdress)<br></code></pre></td></tr></tbody></table></figure><p><strong>刚载入就有种莫名其妙的熟悉感，和西湖论剑的一道逆向题思路差不多，又是体力活。</strong><br>是一种修改代码的操作数并单语句执行的SMC，通过一个数组来确定赋值代码长度的大小，和选定相应的操作数和修改的位置。</p><p>挖出汇编代码，结合动调分析语句还原算法。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c">mov     ds:dword_403474, <span class="hljs-number">0F</span>FFFFFFFh            <span class="hljs-comment">// mov output ,0xffffffff</span><br>mov     ecx, ds:dword_403464                         <span class="hljs-comment">// mov ecx,index(0) </span><br>mov     dl, byte ptr ds:VirtualProtect[ecx]        <span class="hljs-comment">// mov dl,input[0]</span><br>mov     byte ptr ds:dword_403470, dl             <span class="hljs-comment">// mov temp,dl</span><br>movzx   eax, byte ptr ds:dword_403470         <span class="hljs-comment">//  mov eax, temp  输入传给eax</span><br><span class="hljs-keyword">xor</span>     eax, ds:dword_403474                          <span class="hljs-comment">//  xor   eax,output 取反类似</span><br>mov     byte ptr ds:dword_403470, al            <span class="hljs-comment">//   mov temp , al  保存取反的值</span><br>movzx   ecx, byte ptr ds:dword_403470        <span class="hljs-comment">//   mov ecx,temp </span><br><span class="hljs-keyword">and</span>     ecx, <span class="hljs-number">0F</span>Fh                                             <span class="hljs-comment">//   and  ecx,0xff</span><br>mov     byte ptr ds:dword_403470, cl            <span class="hljs-comment">//   mov temp,cl</span><br>mov     edx, ds:dword_403474                      <span class="hljs-comment">//    mov edx,output </span><br>shr     edx,   <span class="hljs-number">8</span>                                                 <span class="hljs-comment">//    shr   edx,8</span><br>mov     ds:dword_403474, edx                      <span class="hljs-comment">//    mov output,edx</span><br>movzx   eax, byte ptr ds:dword_403470       <span class="hljs-comment">//    mov eax,temp</span><br>mov     ecx, ds:dword_403474                         <span class="hljs-comment">//    mov ecx,output</span><br><span class="hljs-keyword">xor</span>     ecx, dword ptr ds:byte_403058[eax*<span class="hljs-number">4</span>]     <span class="hljs-comment">//  xor ecx, sbox[4*eax]   //174841BC  xor sbox[4*0x9e] 结果保存到output</span><br>mov     ds:dword_403474, ecx                              <br>mov     edx, ds:dword_403464                            ....<br>mov     al, [edx+<span class="hljs-number">403005</span>h]<br>mov     byte ptr ds:dword_403470, al<br>movzx   ecx, byte ptr ds:dword_403470<br><span class="hljs-keyword">xor</span>     ecx, ds:dword_403474<br>mov     byte ptr ds:dword_403470, cl<br>mov     edx, ds:dword_403474<br>shr     edx, <span class="hljs-number">8</span><br>mov     ds:dword_403474, edx<br>movzx   eax, byte ptr ds:dword_403470<br>mov     ecx, ds:dword_403474<br><span class="hljs-keyword">xor</span>     ecx, dword ptr ds:byte_403058[eax*<span class="hljs-number">4</span>]     <span class="hljs-comment">//xor ecx,sbox[4*eax]  //eax 0xdd</span><br>mov     ds:dword_403474, ecx            <span class="hljs-comment">//mov output,ecx</span><br>mov     edx, ds:dword_403474                            <span class="hljs-comment">//mov edx,output</span><br><span class="hljs-keyword">xor</span>     edx, <span class="hljs-number">0F</span>FFFFFFFh           <span class="hljs-comment">//xor     edx, 0FFFFFFFFh</span><br>mov     ds:dword_403474, edx                          <span class="hljs-comment">//mov    output edx</span><br><br></code></pre></td></tr></tbody></table></figure><p>python代码如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">input</span>=<span class="hljs-string">'a'</span>*<span class="hljs-number">40</span><br>output=<span class="hljs-number">0xffffffff</span><br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">40</span>,<span class="hljs-number">2</span>):<br>        tmp=(<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">input</span>[index])^output)&amp;<span class="hljs-number">0xff</span><br>        output=output&gt;&gt;<span class="hljs-number">8</span><br>        output=output^somebox[tmp]<br>        <span class="hljs-comment">#print("%x %x"%(tmp,output))</span><br>        tmp = (<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">input</span>[index+<span class="hljs-number">1</span>]) ^ output) &amp; <span class="hljs-number">0xff</span><br>        output = output &gt;&gt; <span class="hljs-number">8</span><br>        output = output ^ somebox[tmp]<br>        output=output^<span class="hljs-number">0xffffffff</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"%x %x"</span> % (tmp, output))<br></code></pre></td></tr></tbody></table></figure><p><strong>可知是两个字节为一组进行的处理，z3解因为涉及下标问题不好下手，z3所得中间方程REF的参数不能转换为其他类型的变量，所以直接爆破。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">somebox=[<span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x77073096</span>, <span class="hljs-number">0xEE0E612C</span>, <span class="hljs-number">0x990951BA</span>, <span class="hljs-number">0x076DC419</span>, <span class="hljs-number">0x706AF48F</span>, <span class="hljs-number">0xE963A535</span>, <span class="hljs-number">0x9E6495A3</span>, <span class="hljs-number">0x0EDB8832</span>, <span class="hljs-number">0x79DCB8A4</span>, <span class="hljs-number">0xE0D5E91E</span>, <span class="hljs-number">0x97D2D988</span>, <span class="hljs-number">0x09B64C2B</span>, <span class="hljs-number">0x7EB17CBD</span>, <span class="hljs-number">0xE7B82D07</span>, <span class="hljs-number">0x90BF1D91</span>, <span class="hljs-number">0x1DB71064</span>, <span class="hljs-number">0x6AB020F2</span>, <span class="hljs-number">0xF3B97148</span>, <span class="hljs-number">0x84BE41DE</span>, <span class="hljs-number">0x1ADAD47D</span>, <span class="hljs-number">0x6DDDE4EB</span>, <span class="hljs-number">0xF4D4B551</span>, <span class="hljs-number">0x83D385C7</span>, <span class="hljs-number">0x136C9856</span>, <span class="hljs-number">0x646BA8C0</span>, <span class="hljs-number">0xFD62F97A</span>, <span class="hljs-number">0x8A65C9EC</span>, <span class="hljs-number">0x14015C4F</span>, <span class="hljs-number">0x63066CD9</span>, <span class="hljs-number">0xFA0F3D63</span>, <span class="hljs-number">0x8D080DF5</span>, <span class="hljs-number">0x3B6E20C8</span>, <span class="hljs-number">0x4C69105E</span>, <span class="hljs-number">0xD56041E4</span>, <span class="hljs-number">0xA2677172</span>, <span class="hljs-number">0x3C03E4D1</span>, <span class="hljs-number">0x4B04D447</span>, <span class="hljs-number">0xD20D85FD</span>, <span class="hljs-number">0xA50AB56B</span>, <span class="hljs-number">0x35B5A8FA</span>, <span class="hljs-number">0x42B2986C</span>, <span class="hljs-number">0xDBBBC9D6</span>, <span class="hljs-number">0xACBCF940</span>, <span class="hljs-number">0x32D86CE3</span>, <span class="hljs-number">0x45DF5C75</span>, <span class="hljs-number">0xDCD60DCF</span>, <span class="hljs-number">0xABD13D59</span>, <span class="hljs-number">0x26D930AC</span>, <span class="hljs-number">0x51DE003A</span>, <span class="hljs-number">0xC8D75180</span>, <span class="hljs-number">0xBFD06116</span>, <span class="hljs-number">0x21B4F4B5</span>, <span class="hljs-number">0x56B3C423</span>, <span class="hljs-number">0xCFBA9599</span>, <span class="hljs-number">0xB8BDA50F</span>, <span class="hljs-number">0x2802B89E</span>, <span class="hljs-number">0x5F058808</span>, <span class="hljs-number">0xC60CD9B2</span>, <span class="hljs-number">0xB10BE924</span>, <span class="hljs-number">0x2F6F7C87</span>, <span class="hljs-number">0x58684C11</span>, <span class="hljs-number">0xC1611DAB</span>, <span class="hljs-number">0xB6662D3D</span>, <span class="hljs-number">0x76DC4190</span>, <span class="hljs-number">0x01DB7106</span>, <span class="hljs-number">0x98D220BC</span>, <span class="hljs-number">0xEFD5102A</span>, <span class="hljs-number">0x71B18589</span>, <span class="hljs-number">0x06B6B51F</span>, <span class="hljs-number">0x9FBFE4A5</span>, <span class="hljs-number">0xE8B8D433</span>, <span class="hljs-number">0x7807C9A2</span>, <span class="hljs-number">0x0F00F934</span>, <span class="hljs-number">0x9609A88E</span>, <span class="hljs-number">0xE10E9818</span>, <span class="hljs-number">0x7F6A0DBB</span>, <span class="hljs-number">0x086D3D2D</span>, <span class="hljs-number">0x91646C97</span>, <span class="hljs-number">0xE6635C01</span>, <span class="hljs-number">0x6B6B51F4</span>, <span class="hljs-number">0x1C6C6162</span>, <span class="hljs-number">0x856530D8</span>, <span class="hljs-number">0xF262004E</span>, <span class="hljs-number">0x6C0695ED</span>, <span class="hljs-number">0x1B01A57B</span>, <span class="hljs-number">0x8208F4C1</span>, <span class="hljs-number">0xF50FC457</span>, <span class="hljs-number">0x65B0D9C6</span>, <span class="hljs-number">0x12B7E950</span>, <span class="hljs-number">0x8BBEB8EA</span>, <span class="hljs-number">0xFCB9887C</span>, <span class="hljs-number">0x62DD1DDF</span>, <span class="hljs-number">0x15DA2D49</span>, <span class="hljs-number">0x8CD37CF3</span>, <span class="hljs-number">0xFBD44C65</span>, <span class="hljs-number">0x4DB26158</span>, <span class="hljs-number">0x3AB551CE</span>, <span class="hljs-number">0xA3BC0074</span>, <span class="hljs-number">0xD4BB30E2</span>, <span class="hljs-number">0x4ADFA541</span>, <span class="hljs-number">0x3DD895D7</span>, <span class="hljs-number">0xA4D1C46D</span>, <span class="hljs-number">0xD3D6F4FB</span>, <span class="hljs-number">0x4369E96A</span>, <span class="hljs-number">0x346ED9FC</span>, <span class="hljs-number">0xAD678846</span>, <span class="hljs-number">0xDA60B8D0</span>, <span class="hljs-number">0x44042D73</span>, <span class="hljs-number">0x33031DE5</span>, <span class="hljs-number">0xAA0A4C5F</span>, <span class="hljs-number">0xDD0D7CC9</span>, <span class="hljs-number">0x5005713C</span>, <span class="hljs-number">0x270241AA</span>, <span class="hljs-number">0xBE0B1010</span>, <span class="hljs-number">0xC90C2086</span>, <span class="hljs-number">0x5768B525</span>, <span class="hljs-number">0x206F85B3</span>, <span class="hljs-number">0xB966D409</span>, <span class="hljs-number">0xCE61E49F</span>, <span class="hljs-number">0x5EDEF90E</span>, <span class="hljs-number">0x29D9C998</span>, <span class="hljs-number">0xB0D09822</span>, <span class="hljs-number">0xC7D7A8B4</span>, <span class="hljs-number">0x59B33D17</span>, <span class="hljs-number">0x2EB40D81</span>, <span class="hljs-number">0xB7BD5C3B</span>, <span class="hljs-number">0xC0BA6CAD</span>, <span class="hljs-number">0xEDB88320</span>, <span class="hljs-number">0x9ABFB3B6</span>, <span class="hljs-number">0x03B6E20C</span>, <span class="hljs-number">0x74B1D29A</span>, <span class="hljs-number">0xEAD54739</span>, <span class="hljs-number">0x9DD277AF</span>, <span class="hljs-number">0x04DB2615</span>, <span class="hljs-number">0x73DC1683</span>, <span class="hljs-number">0xE3630B12</span>, <span class="hljs-number">0x94643B84</span>, <span class="hljs-number">0x0D6D6A3E</span>, <span class="hljs-number">0x7A6A5AA8</span>, <span class="hljs-number">0xE40ECF0B</span>, <span class="hljs-number">0x9309FF9D</span>, <span class="hljs-number">0x0A00AE27</span>, <span class="hljs-number">0x7D079EB1</span>, <span class="hljs-number">0xF00F9344</span>, <span class="hljs-number">0x8708A3D2</span>, <span class="hljs-number">0x1E01F268</span>, <span class="hljs-number">0x6906C2FE</span>, <span class="hljs-number">0xF762575D</span>, <span class="hljs-number">0x806567CB</span>, <span class="hljs-number">0x196C3671</span>, <span class="hljs-number">0x6E6B06E7</span>, <span class="hljs-number">0xFED41B76</span>, <span class="hljs-number">0x89D32BE0</span>, <span class="hljs-number">0x10DA7A5A</span>, <span class="hljs-number">0x67DD4ACC</span>, <span class="hljs-number">0xF9B9DF6F</span>, <span class="hljs-number">0x8EBEEFF9</span>, <span class="hljs-number">0x17B7BE43</span>, <span class="hljs-number">0x60B08ED5</span>, <span class="hljs-number">0xD6D6A3E8</span>, <span class="hljs-number">0xA1D1937E</span>, <span class="hljs-number">0x38D8C2C4</span>, <span class="hljs-number">0x4FDFF252</span>, <span class="hljs-number">0xD1BB67F1</span>, <span class="hljs-number">0xA6BC5767</span>, <span class="hljs-number">0x3FB506DD</span>, <span class="hljs-number">0x48B2364B</span>, <span class="hljs-number">0xD80D2BDA</span>, <span class="hljs-number">0xAF0A1B4C</span>, <span class="hljs-number">0x36034AF6</span>, <span class="hljs-number">0x41047A60</span>, <span class="hljs-number">0xDF60EFC3</span>, <span class="hljs-number">0xA867DF55</span>, <span class="hljs-number">0x316E8EEF</span>, <span class="hljs-number">0x4669BE79</span>, <span class="hljs-number">0xCB61B38C</span>, <span class="hljs-number">0xBC66831A</span>, <span class="hljs-number">0x256FD2A0</span>, <span class="hljs-number">0x5268E236</span>, <span class="hljs-number">0xCC0C7795</span>, <span class="hljs-number">0xBB0B4703</span>, <span class="hljs-number">0x220216B9</span>, <span class="hljs-number">0x5505262F</span>, <span class="hljs-number">0xC5BA3BBE</span>, <span class="hljs-number">0xB2BD0B28</span>, <span class="hljs-number">0x2BB45A92</span>, <span class="hljs-number">0x5CB36A04</span>, <span class="hljs-number">0xC2D7FFA7</span>, <span class="hljs-number">0xB5D0CF31</span>, <span class="hljs-number">0x2CD99E8B</span>, <span class="hljs-number">0x5BDEAE1D</span>, <span class="hljs-number">0x9B64C2B0</span>, <span class="hljs-number">0xEC63F226</span>, <span class="hljs-number">0x756AA39C</span>, <span class="hljs-number">0x026D930A</span>, <span class="hljs-number">0x9C0906A9</span>, <span class="hljs-number">0xEB0E363F</span>, <span class="hljs-number">0x72076785</span>, <span class="hljs-number">0x05005713</span>, <span class="hljs-number">0x95BF4A82</span>, <span class="hljs-number">0xE2B87A14</span>, <span class="hljs-number">0x7BB12BAE</span>, <span class="hljs-number">0x0CB61B38</span>, <span class="hljs-number">0x92D28E9B</span>, <span class="hljs-number">0xE5D5BE0D</span>, <span class="hljs-number">0x7CDCEFB7</span>, <span class="hljs-number">0x0BDBDF21</span>, <span class="hljs-number">0x86D3D2D4</span>, <span class="hljs-number">0xF1D4E242</span>, <span class="hljs-number">0x68DDB3F8</span>, <span class="hljs-number">0x1FDA836E</span>, <span class="hljs-number">0x81BE16CD</span>, <span class="hljs-number">0xF6B9265B</span>, <span class="hljs-number">0x6FB077E1</span>, <span class="hljs-number">0x18B74777</span>, <span class="hljs-number">0x88085AE6</span>, <span class="hljs-number">0xFF0F6A70</span>, <span class="hljs-number">0x66063BCA</span>, <span class="hljs-number">0x11010B5C</span>, <span class="hljs-number">0x8F659EFF</span>, <span class="hljs-number">0xF862AE69</span>, <span class="hljs-number">0x616BFFD3</span>, <span class="hljs-number">0x166CCF45</span>, <span class="hljs-number">0xA00AE278</span>, <span class="hljs-number">0xD70DD2EE</span>, <span class="hljs-number">0x4E048354</span>, <span class="hljs-number">0x3903B3C2</span>, <span class="hljs-number">0xA7672661</span>, <span class="hljs-number">0xD06016F7</span>, <span class="hljs-number">0x4969474D</span>, <span class="hljs-number">0x3E6E77DB</span>, <span class="hljs-number">0xAED16A4A</span>, <span class="hljs-number">0xD9D65ADC</span>, <span class="hljs-number">0x40DF0B66</span>, <span class="hljs-number">0x37D83BF0</span>, <span class="hljs-number">0xA9BCAE53</span>, <span class="hljs-number">0xDEBB9EC5</span>, <span class="hljs-number">0x47B2CF7F</span>, <span class="hljs-number">0x30B5FFE9</span>, <span class="hljs-number">0xBDBDF21C</span>, <span class="hljs-number">0xCABAC28A</span>, <span class="hljs-number">0x53B39330</span>, <span class="hljs-number">0x24B4A3A6</span>, <span class="hljs-number">0xBAD03605</span>, <span class="hljs-number">0xCDD70693</span>, <span class="hljs-number">0x54DE5729</span>, <span class="hljs-number">0x23D967BF</span>, <span class="hljs-number">0xB3667A2E</span>, <span class="hljs-number">0xC4614AB8</span>, <span class="hljs-number">0x5D681B02</span>, <span class="hljs-number">0x2A6F2B94</span>, <span class="hljs-number">0xB40BBE37</span>, <span class="hljs-number">0xC30C8EA1</span>, <span class="hljs-number">0x5A05DF1B</span>, <span class="hljs-number">0x2D02EF8D</span>]<br>enc=[<span class="hljs-number">0xC0F6605E</span>, <span class="hljs-number">0x00B16E0A</span>, <span class="hljs-number">0x3319A2D2</span>, <span class="hljs-number">0x57CAB7B7</span>, <span class="hljs-number">0x9A646D9C</span>, <span class="hljs-number">0xBDD82726</span>, <span class="hljs-number">0xD838FB91</span>, <span class="hljs-number">0x8DE10BB3</span>, <span class="hljs-number">0x176B0DAD</span>, <span class="hljs-number">0x685FDEEF</span>, <span class="hljs-number">0x2C1FF7B1</span>, <span class="hljs-number">0x6C444296</span>, <span class="hljs-number">0xA15CFE90</span>, <span class="hljs-number">0x20CD8721</span>, <span class="hljs-number">0x62967CE8</span>, <span class="hljs-number">0x2C1641FD</span>, <span class="hljs-number">0x572D0F9A</span>, <span class="hljs-number">0xAE52DC2C</span>, <span class="hljs-number">0x50497DCF</span>, <span class="hljs-number">0xFF6ABF4A</span>]<br>s=<span class="hljs-string">''</span><br>enc=[<span class="hljs-number">0xC0F6605E</span>, <span class="hljs-number">0x00B16E0A</span>, <span class="hljs-number">0x3319A2D2</span>, <span class="hljs-number">0x57CAB7B7</span>, <span class="hljs-number">0x9A646D9C</span>, <span class="hljs-number">0xBDD82726</span>, <span class="hljs-number">0xD838FB91</span>, <span class="hljs-number">0x8DE10BB3</span>, <span class="hljs-number">0x176B0DAD</span>, <span class="hljs-number">0x685FDEEF</span>, <span class="hljs-number">0x2C1FF7B1</span>, <span class="hljs-number">0x6C444296</span>, <span class="hljs-number">0xA15CFE90</span>, <span class="hljs-number">0x20CD8721</span>, <span class="hljs-number">0x62967CE8</span>, <span class="hljs-number">0x2C1641FD</span>, <span class="hljs-number">0x572D0F9A</span>, <span class="hljs-number">0xAE52DC2C</span>, <span class="hljs-number">0x50497DCF</span>, <span class="hljs-number">0xFF6ABF4A</span>]<br><span class="hljs-keyword">for</span> i  <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    <span class="hljs-keyword">for</span>  m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">128</span>):<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">128</span>):<br>            output = <span class="hljs-number">0xffffffff</span><br>            tmp=(m^output)&amp;<span class="hljs-number">0xff</span><br>            output=output&gt;&gt;<span class="hljs-number">8</span><br>            output=output^somebox[tmp]<br>            <span class="hljs-comment">#print("%x %x"%(tmp,output))</span><br>            tmp = (n ^ output) &amp; <span class="hljs-number">0xff</span><br>            output = output &gt;&gt; <span class="hljs-number">8</span><br>            output = output ^ somebox[tmp]<br>            output=output^<span class="hljs-number">0xffffffff</span><br>            <span class="hljs-keyword">if</span> output==enc[i]:<br>                s+=<span class="hljs-built_in">chr</span>(m)+<span class="hljs-built_in">chr</span>(n)<br><br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-comment">#NCTF{rLdE57TG0iHA39qUnFZp6LeJyYEBcxMNL7}</span><br></code></pre></td></tr></tbody></table></figure><h2 id="狗狗的秘密">狗狗的秘密</h2><p><strong>挺不错的，解完想暴打出题人。</strong><br>32位程序，ida载入获得假flag一枚<br><img src="https://bu.dusays.com/2021/12/01/811a7364f1bd8.png" alt=""><br>不过main之前有个TlsCallback函数，直接下个断点，动态分析。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( !v9 &amp;&amp; !IsDebuggerPresent() )<br>   {<br>     off_825014 = (<span class="hljs-keyword">int</span> (__cdecl *)(_DWORD))sub_823000;<br>     v8 = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *)((<span class="hljs-keyword">char</span> *)sub_823000 + <span class="hljs-number">256</span>);<br>     <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">24</span>; ++i )<br>       v8 += <span class="hljs-number">2</span>;<br>     <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">24</span>; ++j )<br>     {<br>       v8 -= <span class="hljs-number">2</span>;<br>       sub_8211F0(v8);<br>     }<br>   }<br></code></pre></td></tr></tbody></table></figure><p>反调试，off_825014在主函数出现过，但是个假逻辑，所以这部分内容是SMC修改技术。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">sub_8211F0</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *a1)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [esp+0h] [ebp-Ch]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// [esp+4h] [ebp-8h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// [esp+8h] [ebp-4h]</span><br><br>  v4 = *a1;<br>  v3 = a1[<span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; ++i )<br>  {<br>    v3 -= (dword_825004[(*(_DWORD *)delta &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>] + *(_DWORD *)delta) ^ (v4 + ((v4 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">16</span> * v4)));<br>    *(_DWORD *)delta += dword_825000;<br>    v4 -= (dword_825004[delta[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">3</span>] + *(_DWORD *)delta) ^ (v3 + ((v3 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">16</span> * v3)));<br>  }<br>  *a1 = v4;<br>  result = v3;<br>  a1[<span class="hljs-number">1</span>] = v3;<br>  <span class="hljs-keyword">return</span> result;<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>直接改eip绕过这个反调试即可，同时修改代码用的xTea，不过delta的值有个小坑，main函数中有个创建线程的函数，将delta赋值为0xDA76C600，patch进行修改，后面下个断F9。</strong></p><blockquote><p>线程的执行顺序不是太清楚，不过TLSCALLBACK在main之前执行，而delta在main函数中被改掉，为什么会应用到smc中呢，有待解决。</p></blockquote><p><strong>修复函数后拿到真正处理逻辑。</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">sub_823000</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *a1)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> v2; <span class="hljs-comment">// [esp+0h] [ebp-98h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// [esp+10h] [ebp-88h]</span><br>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// [esp+1Ch] [ebp-7Ch]</span><br>  <span class="hljs-keyword">int</span> v5; <span class="hljs-comment">// [esp+2Ch] [ebp-6Ch]</span><br>  <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// [esp+2Ch] [ebp-6Ch]</span><br>  <span class="hljs-keyword">char</span> v7; <span class="hljs-comment">// [esp+32h] [ebp-66h]</span><br>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> Size; <span class="hljs-comment">// [esp+34h] [ebp-64h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v9; <span class="hljs-comment">// [esp+38h] [ebp-60h]</span><br>  <span class="hljs-keyword">int</span> k; <span class="hljs-comment">// [esp+38h] [ebp-60h]</span><br>  <span class="hljs-keyword">unsigned</span> __int8 *v11; <span class="hljs-comment">// [esp+3Ch] [ebp-5Ch]</span><br>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [esp+40h] [ebp-58h]</span><br>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> j; <span class="hljs-comment">// [esp+40h] [ebp-58h]</span><br>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> m; <span class="hljs-comment">// [esp+40h] [ebp-58h]</span><br>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> n; <span class="hljs-comment">// [esp+40h] [ebp-58h]</span><br>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> ii; <span class="hljs-comment">// [esp+40h] [ebp-58h]</span><br>  <span class="hljs-keyword">char</span> v17[<span class="hljs-number">62</span>]; <span class="hljs-comment">// [esp+44h] [ebp-54h]</span><br>  <span class="hljs-keyword">int</span> v18; <span class="hljs-comment">// [esp+82h] [ebp-16h]</span><br>  <span class="hljs-keyword">int</span> v19; <span class="hljs-comment">// [esp+86h] [ebp-12h]</span><br>  <span class="hljs-keyword">int</span> v20; <span class="hljs-comment">// [esp+8Ah] [ebp-Eh]</span><br>  <span class="hljs-keyword">int</span> v21; <span class="hljs-comment">// [esp+8Eh] [ebp-Ah]</span><br>  __int16 v22; <span class="hljs-comment">// [esp+92h] [ebp-6h]</span><br><br>  v3 = <span class="hljs-built_in">strlen</span>(a1);<br>  Size = <span class="hljs-number">146</span> * v3 / <span class="hljs-number">0x64</span> + <span class="hljs-number">1</span>;<br>  v4 = <span class="hljs-number">0</span>;<br>  v11 = (<span class="hljs-keyword">unsigned</span> __int8 *)<span class="hljs-built_in">malloc</span>(Size);<br>  v17[<span class="hljs-number">0</span>] = <span class="hljs-number">82</span>;<br>  v17[<span class="hljs-number">1</span>] = <span class="hljs-number">-61</span>;<br>  v17[<span class="hljs-number">2</span>] = <span class="hljs-number">26</span>;<br>  v17[<span class="hljs-number">3</span>] = <span class="hljs-number">-32</span>;<br>  v17[<span class="hljs-number">4</span>] = <span class="hljs-number">22</span>;<br>  v17[<span class="hljs-number">5</span>] = <span class="hljs-number">93</span>;<br>  v17[<span class="hljs-number">6</span>] = <span class="hljs-number">94</span>;<br>  v17[<span class="hljs-number">7</span>] = <span class="hljs-number">-30</span>;<br>  v17[<span class="hljs-number">8</span>] = <span class="hljs-number">103</span>;<br>  v17[<span class="hljs-number">9</span>] = <span class="hljs-number">31</span>;<br>  v17[<span class="hljs-number">10</span>] = <span class="hljs-number">31</span>;<br>  v17[<span class="hljs-number">11</span>] = <span class="hljs-number">6</span>;<br>  v17[<span class="hljs-number">12</span>] = <span class="hljs-number">6</span>;<br>  v17[<span class="hljs-number">13</span>] = <span class="hljs-number">31</span>;<br>  v17[<span class="hljs-number">14</span>] = <span class="hljs-number">23</span>;<br>  v17[<span class="hljs-number">15</span>] = <span class="hljs-number">6</span>;<br>  v17[<span class="hljs-number">16</span>] = <span class="hljs-number">15</span>;<br>  v17[<span class="hljs-number">17</span>] = <span class="hljs-number">-7</span>;<br>  v17[<span class="hljs-number">18</span>] = <span class="hljs-number">6</span>;<br>  v17[<span class="hljs-number">19</span>] = <span class="hljs-number">103</span>;<br>  v17[<span class="hljs-number">20</span>] = <span class="hljs-number">88</span>;<br>  v17[<span class="hljs-number">21</span>] = <span class="hljs-number">-78</span>;<br>  v17[<span class="hljs-number">22</span>] = <span class="hljs-number">-30</span>;<br>  v17[<span class="hljs-number">23</span>] = <span class="hljs-number">-116</span>;<br>  v17[<span class="hljs-number">24</span>] = <span class="hljs-number">15</span>;<br>  v17[<span class="hljs-number">25</span>] = <span class="hljs-number">42</span>;<br>  v17[<span class="hljs-number">26</span>] = <span class="hljs-number">6</span>;<br>  v17[<span class="hljs-number">27</span>] = <span class="hljs-number">-119</span>;<br>  v17[<span class="hljs-number">28</span>] = <span class="hljs-number">-49</span>;<br>  v17[<span class="hljs-number">29</span>] = <span class="hljs-number">42</span>;<br>  v17[<span class="hljs-number">30</span>] = <span class="hljs-number">6</span>;<br>  v17[<span class="hljs-number">31</span>] = <span class="hljs-number">31</span>;<br>  v17[<span class="hljs-number">32</span>] = <span class="hljs-number">-104</span>;<br>  v17[<span class="hljs-number">33</span>] = <span class="hljs-number">26</span>;<br>  v17[<span class="hljs-number">34</span>] = <span class="hljs-number">62</span>;<br>  v17[<span class="hljs-number">35</span>] = <span class="hljs-number">23</span>;<br>  v17[<span class="hljs-number">36</span>] = <span class="hljs-number">103</span>;<br>  v17[<span class="hljs-number">37</span>] = <span class="hljs-number">31</span>;<br>  v17[<span class="hljs-number">38</span>] = <span class="hljs-number">-9</span>;<br>  v17[<span class="hljs-number">39</span>] = <span class="hljs-number">58</span>;<br>  v17[<span class="hljs-number">40</span>] = <span class="hljs-number">68</span>;<br>  v17[<span class="hljs-number">41</span>] = <span class="hljs-number">-61</span>;<br>  v17[<span class="hljs-number">42</span>] = <span class="hljs-number">22</span>;<br>  v17[<span class="hljs-number">43</span>] = <span class="hljs-number">51</span>;<br>  v17[<span class="hljs-number">44</span>] = <span class="hljs-number">105</span>;<br>  v17[<span class="hljs-number">45</span>] = <span class="hljs-number">26</span>;<br>  v17[<span class="hljs-number">46</span>] = <span class="hljs-number">117</span>;<br>  v17[<span class="hljs-number">47</span>] = <span class="hljs-number">22</span>;<br>  v17[<span class="hljs-number">48</span>] = <span class="hljs-number">62</span>;<br>  v17[<span class="hljs-number">49</span>] = <span class="hljs-number">23</span>;<br>  v17[<span class="hljs-number">50</span>] = <span class="hljs-number">-43</span>;<br>  v17[<span class="hljs-number">51</span>] = <span class="hljs-number">105</span>;<br>  v17[<span class="hljs-number">52</span>] = <span class="hljs-number">122</span>;<br>  v17[<span class="hljs-number">53</span>] = <span class="hljs-number">27</span>;<br>  v17[<span class="hljs-number">54</span>] = <span class="hljs-number">68</span>;<br>  v17[<span class="hljs-number">55</span>] = <span class="hljs-number">68</span>;<br>  v17[<span class="hljs-number">56</span>] = <span class="hljs-number">62</span>;<br>  v17[<span class="hljs-number">57</span>] = <span class="hljs-number">103</span>;<br>  v17[<span class="hljs-number">58</span>] = <span class="hljs-number">-9</span>;<br>  v17[<span class="hljs-number">59</span>] = <span class="hljs-number">-119</span>;<br>  v17[<span class="hljs-number">60</span>] = <span class="hljs-number">103</span>;<br>  v17[<span class="hljs-number">61</span>] = <span class="hljs-number">-61</span>;<br>  v18 = <span class="hljs-number">0</span>;<br>  v19 = <span class="hljs-number">0</span>;<br>  v20 = <span class="hljs-number">0</span>;<br>  v21 = <span class="hljs-number">0</span>;<br>  v22 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(v11, <span class="hljs-number">0</span>, Size);<br>  v9 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; ++i )<br>  {<br>    v7 = byte_825018[i];<br>    byte_825018[i] = byte_825018[(i + *((<span class="hljs-keyword">unsigned</span> __int8 *)&amp;delta + i % <span class="hljs-number">4</span>)) % <span class="hljs-number">256</span>];<span class="hljs-comment">// delta变为0了</span><br>    byte_825018[(i + *((<span class="hljs-keyword">unsigned</span> __int8 *)&amp;delta + i % <span class="hljs-number">4</span>)) % <span class="hljs-number">256</span>] = v7;<br>  }<br>  <span class="hljs-keyword">while</span> ( v9 &lt; <span class="hljs-built_in">strlen</span>(a1) )<br>  {<br>    v5 = a1[v9];<br>    <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">146</span> * v3 / <span class="hljs-number">0x64</span>; ; --j )<br>    {<br>      v6 = v5 + (v11[j] &lt;&lt; <span class="hljs-number">8</span>);<br>      v11[j] = v6 % <span class="hljs-number">47</span>;<br>      v5 = v6 / <span class="hljs-number">47</span>;<br>      <span class="hljs-keyword">if</span> ( j &lt; v4 )<br>        v4 = j;<br>      <span class="hljs-keyword">if</span> ( !v5 &amp;&amp; j &lt;= v4 )<br>        <span class="hljs-keyword">break</span>;<br>    }<br>    ++v9;<br>  }<br>  <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; !v11[k]; ++k )<br>    ;<br>  <span class="hljs-keyword">for</span> ( m = <span class="hljs-number">0</span>; m &lt; Size; ++m )<br>    v11[m] = byte_825118[v11[k++]];             <span class="hljs-comment">// 单表替换</span><br>  <span class="hljs-keyword">while</span> ( m &lt; Size )<br>    v11[m++] = <span class="hljs-number">0</span>;<br>  v2 = <span class="hljs-built_in">strlen</span>((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)v11);<br>  <span class="hljs-keyword">for</span> ( n = <span class="hljs-number">0</span>; n &lt; v2; ++n )<br>    v11[n] ^= byte_825018[v11[n]];              <span class="hljs-comment">// 异或处理</span><br>  <span class="hljs-keyword">for</span> ( ii = <span class="hljs-number">0</span>; ii &lt; v2; ++ii )<br>  {<br>    <span class="hljs-keyword">if</span> ( v11[ii] != (<span class="hljs-keyword">unsigned</span> __int8)v17[ii] )<br>    {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Wrong!\n"</span>, v2);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    }<br>  }<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Right!\n"</span>, v2);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><strong>delta的值是0，需要注意一下，接着就是写脚本逆向，z3不好直接求解，加密流程是先将输入转为47进制下每位的值存在数组v11中，找到第一个非0值的下标k，接着进行单表替换和异或。</strong></p><blockquote><p>又是一个z3直接出，却被ban了的题，类型转换有点坑</p></blockquote><p><strong>因为涉及到表索引和本身异或不好逆向还原，所以想着先爆破v11数组。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">enc=[<span class="hljs-number">0x52</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xC3</span>]<br>c=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">61</span>):<br>    temp=[]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">47</span>):<br>        tmp=tb2[j]<br>        tmp=tmp^table[tmp]<br>        <span class="hljs-keyword">if</span> tmp==enc[i]:<br>            temp.append(j)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(temp)==<span class="hljs-number">1</span>:<br>        c.append(temp[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">else</span>:<br>        c.append(temp)<br>c.insert(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">#[0, 2, 0, [33, 45], 44, 30, 40, 8, 23, [7, 11, 22], [34, 37], [34, 37], [19, 20, 43], [19, 20, 43], [34, 37], 24, [19, 20, 43], [4, 31], 29, [19, 20, 43], [7, 11, 22], 13, 5, 23, 41, [4, 31], 35, [19, 20, 43], 9, 14, 35, [19, 20, 43], [34, 37], 3, [33, 45], 10, 24, [7, 11, 22], [34, 37], 38, 1, 25, 0, 30, 6, 42, [33, 45], 36, 30, 10, 24, 21, 42, 26, 28, 25, 25, 10, [7, 11, 22], 38, 9, [7, 11, 22]]</span><br></code></pre></td></tr></tbody></table></figure><p><strong>v11第一位是0，根据加密的最后一位是0xc3，或者多次测试都可知，不过这解有点多，下面就是对c进行排列组合，之后47进制转，long_to_bytes下即可，不过这…tmd，dfs不太会写，直接硬爆破了，大概跑了半小时,直接整emo了。</strong></p><blockquote><p>跑起来才意识到从高位开始爆破会比较快，高位对转字符的影响较大，傻了</p></blockquote><p>完整如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dododo</span>(<span class="hljs-params">c</span>):</span><br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">62</span>):<br>        <span class="hljs-built_in">sum</span> += c[i] * <span class="hljs-built_in">pow</span>(<span class="hljs-number">47</span>, <span class="hljs-number">61</span> - i)<br>    m=long_to_bytes(<span class="hljs-built_in">sum</span>)<br>    <span class="hljs-keyword">try</span>:<br>        flag=m.decode()<br>        <span class="hljs-built_in">print</span>(flag)<br>        exit(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br><br>enc=[<span class="hljs-number">0x52</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xC3</span>]<br>table=[<span class="hljs-number">0x21</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xFC</span>]<br><span class="hljs-comment">#delta=[0,0xc6,0x76,0xda]</span><br>tb2=[<span class="hljs-number">0xA7</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x00</span>]<br><br>c=[]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">61</span>):<br>    temp=[]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">47</span>):<br>        tmp=tb2[j]<br>        tmp=tmp^table[tmp]<br>        <span class="hljs-keyword">if</span> tmp==enc[i]:<br>            temp.append(j)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(temp)==<span class="hljs-number">1</span>:<br>        c.append(temp[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">else</span>:<br>        c.append(temp)<br>c.insert(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(i,<span class="hljs-built_in">int</span>):<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(i)<br>c[<span class="hljs-number">3</span>]=<span class="hljs-number">45</span><br>tblen=[]<br>l=<span class="hljs-number">1</span><br>index=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>    <span class="hljs-keyword">try</span>:<br>        tblen.append(<span class="hljs-built_in">len</span>(c[i]))<br>        l*=<span class="hljs-built_in">len</span>(c[i])<br>        index.append(i)<br>    <span class="hljs-keyword">except</span>:<br>        tblen.append(<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(tblen)<br><span class="hljs-built_in">print</span>(index)<br><br><span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span><br>t1=[<span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">22</span>]<br>t2=[<span class="hljs-number">34</span>, <span class="hljs-number">37</span>]<br>t3=[<span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">43</span>]<br>t4=[<span class="hljs-number">4</span>, <span class="hljs-number">31</span>]<br>t5=[<span class="hljs-number">33</span>, <span class="hljs-number">45</span>]<br><br><br><span class="hljs-keyword">for</span>  a1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    c[<span class="hljs-number">9</span>]=t1[a1]<br>    <span class="hljs-keyword">for</span> a2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        c[<span class="hljs-number">10</span>]=t2[a2]<br>        <span class="hljs-keyword">for</span> a3 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>            c[<span class="hljs-number">11</span>]=t2[a3]<br>            <span class="hljs-keyword">for</span> a4 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                c[<span class="hljs-number">12</span>]=t3[a4]<br>                <span class="hljs-keyword">for</span> a5 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                    c[<span class="hljs-number">13</span>]=t3[a5]<br>                    <span class="hljs-keyword">for</span> a6 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                        c[<span class="hljs-number">14</span>]=t2[a6]<br>                        <span class="hljs-keyword">for</span> a7 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                            c[<span class="hljs-number">16</span>]=t3[a7]<br>                            <span class="hljs-keyword">for</span> a8 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                                c[<span class="hljs-number">17</span>]=t4[a8]<br>                                <span class="hljs-keyword">for</span> a9 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                                    c[<span class="hljs-number">19</span>]=t3[a9]<br>                                    <span class="hljs-keyword">for</span> a10 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                                        c[<span class="hljs-number">20</span>]=t1[a10]<br>                                        <span class="hljs-keyword">for</span> a11 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                                            c[<span class="hljs-number">25</span>]=t4[a11]<br>                                            <span class="hljs-keyword">for</span> a12 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                                                c[<span class="hljs-number">27</span>]=t3[a12]<br>                                                <span class="hljs-keyword">for</span> a13 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                                                    c[<span class="hljs-number">31</span>]=t3[a13]<br>                                                    <span class="hljs-keyword">for</span> a14 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                                                        c[<span class="hljs-number">32</span>]=t2[a14]<br>                                                        <span class="hljs-keyword">for</span> a15 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                                                            c[<span class="hljs-number">34</span>]=t5[a15]<br>                                                            <span class="hljs-keyword">for</span> a16 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                                                                c[<span class="hljs-number">37</span>]=t1[a16]<br>                                                                <span class="hljs-keyword">for</span> a17 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                                                                    c[<span class="hljs-number">38</span>]=t2[a17]<br>                                                                    <span class="hljs-keyword">for</span> a18 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                                                                        c[<span class="hljs-number">46</span>]=t5[a18]<br>                                                                        <span class="hljs-keyword">for</span> a19 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                                                                            c[<span class="hljs-number">58</span>]=t1[a19]<br>                                                                            <span class="hljs-keyword">for</span> a20 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                                                                                c[<span class="hljs-number">61</span>]=t1[a20]<br>                                                                                dododo(c)<br><br><span class="hljs-comment">#NCTF{ADF0E239-D911-3781-7E40-A575A19E5835}</span><br></code></pre></td></tr></tbody></table></figure><p>题感觉都挺好玩的，就是把z3 ban掉太不够意思了，自己的算法能力不是太给力。</p><hr><p><strong>总结:C++或者再复杂一点的语言还得是动调，线程的调用关系要梳理清晰还有常见算法，同时巩固了一下西湖的SMC思路。</strong></p><blockquote><p>NCTF还是差一道Android就能AK了，native层的代码看的头皮发麻，有时间要及时复现和反思，另:航哥TQQQLLL，直接给秒了</p></blockquote><p><strong>加上安洵杯，上周小比赛还是蛮多的，能学到很多东西，但还没完全复现。最近临近考试周，实验和考试比较多，要去冲刺了，估计是最近两周不会再摸了。</strong></p><blockquote><p>别贪心，我们不会什么都有，别灰心，我们也不会什么都没有。让我们像个英勇的蒙古骑士一样，拿起手中锋利的马刀，去与更强大的敌人拼杀吧！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CTF Memory</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>西湖论剑2021-Re</title>
    <link href="/2021/11/21/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912021/"/>
    <url>/2021/11/21/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912021/</url>
    
    <content type="html"><![CDATA[<p><strong>感悟: 收获挺大的，同时意识到自己的做题思路和方法还有所欠缺，还是要做好应对体力活的准备。</strong></p><hr><h3 id="1、ROR">1、ROR</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs c">  __CheckForDebuggerJustMyCode(&amp;unk_406029);<br>  v6[<span class="hljs-number">0</span>] = <span class="hljs-number">128</span>;<br>  v6[<span class="hljs-number">1</span>] = <span class="hljs-number">64</span>;<br>  v6[<span class="hljs-number">2</span>] = <span class="hljs-number">32</span>;<br>  v6[<span class="hljs-number">3</span>] = <span class="hljs-number">16</span>;<br>  v6[<span class="hljs-number">4</span>] = <span class="hljs-number">8</span>;<br>  v6[<span class="hljs-number">5</span>] = <span class="hljs-number">4</span>;<br>  v6[<span class="hljs-number">6</span>] = <span class="hljs-number">2</span>;<br>  v6[<span class="hljs-number">7</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">memset</span>(input, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(input));<br>  <span class="hljs-built_in">memset</span>(Buf2, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(Buf2));<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Input:"</span>, v4);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%40s"</span>, (<span class="hljs-keyword">char</span>)input);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(input) != <span class="hljs-number">40</span> )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i += <span class="hljs-number">8</span> )<br>  {<br>    <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; ++j )<br>    {<br>      v5 = ((v6[j] &amp; input[i + <span class="hljs-number">3</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">3</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)input[i + <span class="hljs-number">3</span>]) &gt;&gt; ((<span class="hljs-number">3</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; input[i + <span class="hljs-number">2</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">2</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)input[i + <span class="hljs-number">2</span>]) &gt;&gt; ((<span class="hljs-number">2</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; input[i + <span class="hljs-number">1</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">1</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)input[i + <span class="hljs-number">1</span>]) &gt;&gt; ((<span class="hljs-number">1</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> __int8)input[i]) &lt;&lt; (<span class="hljs-number">8</span> - -j % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)input[i]) &gt;&gt; (-j % <span class="hljs-number">8u</span>));<br>      Buf2[j + i] = byte_405000[(<span class="hljs-keyword">unsigned</span> __int8)(((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> __int8)input[i + <span class="hljs-number">7</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">7</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)input[i + <span class="hljs-number">7</span>]) &gt;&gt; ((<span class="hljs-number">7</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; input[i + <span class="hljs-number">6</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">6</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)input[i + <span class="hljs-number">6</span>]) &gt;&gt; ((<span class="hljs-number">6</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; input[i + <span class="hljs-number">5</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">5</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)input[i + <span class="hljs-number">5</span>]) &gt;&gt; ((<span class="hljs-number">5</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; input[i + <span class="hljs-number">4</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">4</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)input[i + <span class="hljs-number">4</span>]) &gt;&gt; ((<span class="hljs-number">4</span> - j) % <span class="hljs-number">8u</span>)) | v5)];<br>    }<br>  }<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">memcmp</span>(&amp;unk_405100, Buf2, <span class="hljs-number">0x28</span>u) )<br>  {<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Wrong"</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  }<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Congratulations"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"flag is DASCTF{your input}"</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>主要就是对输入8个一组进行位运算，之后再进行表byte_405000的索引，看到立马想到z3，修改代码z3解密。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>v6=[<span class="hljs-number">128</span>,<span class="hljs-number">64</span>,<span class="hljs-number">32</span>,<span class="hljs-number">16</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br><span class="hljs-built_in">input</span>=[BitVec(<span class="hljs-string">'s%d'</span>%i,<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>)]<br>Buf2=[<span class="hljs-number">0</span>]*<span class="hljs-number">40</span><br>byte_405000=[<span class="hljs-number">0x65</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x8F</span>]<br>enc=[<span class="hljs-number">0x65</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x79</span>]<br>tmp=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    tmp.append(byte_405000.index(enc[i]))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">40</span>,<span class="hljs-number">8</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        v5 = ((v6[j] &amp; <span class="hljs-built_in">input</span>[i + <span class="hljs-number">3</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">3</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; <span class="hljs-built_in">input</span>[i + <span class="hljs-number">3</span>]) &gt;&gt; ((<span class="hljs-number">3</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; <span class="hljs-built_in">input</span>[i + <span class="hljs-number">2</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">2</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; <span class="hljs-built_in">input</span>[i + <span class="hljs-number">2</span>]) &gt;&gt; ((<span class="hljs-number">2</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; <span class="hljs-built_in">input</span>[i + <span class="hljs-number">1</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">1</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; <span class="hljs-built_in">input</span>[i + <span class="hljs-number">1</span>]) &gt;&gt; ((<span class="hljs-number">1</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; <span class="hljs-built_in">input</span>[i]) &lt;&lt; (<span class="hljs-number">8</span> - -j % <span class="hljs-number">8</span>)) | ((v6[j] &amp; <span class="hljs-built_in">input</span>[i]) &gt;&gt; (-j % <span class="hljs-number">8</span>))<br>        Buf2[j + i]=((((v6[j] &amp; <span class="hljs-built_in">input</span>[i + <span class="hljs-number">7</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">7</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; <span class="hljs-built_in">input</span>[i + <span class="hljs-number">7</span>]) &gt;&gt; ((<span class="hljs-number">7</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; <span class="hljs-built_in">input</span>[i + <span class="hljs-number">6</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">6</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; <span class="hljs-built_in">input</span>[i + <span class="hljs-number">6</span>]) &gt;&gt; ((<span class="hljs-number">6</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; <span class="hljs-built_in">input</span>[i + <span class="hljs-number">5</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">5</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; <span class="hljs-built_in">input</span>[i + <span class="hljs-number">5</span>]) &gt;&gt; ((<span class="hljs-number">5</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; <span class="hljs-built_in">input</span>[i + <span class="hljs-number">4</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">4</span> - j) % <span class="hljs-number">8</span>)) | ((v6[j] &amp; <span class="hljs-built_in">input</span>[i + <span class="hljs-number">4</span>]) &gt;&gt; ((<span class="hljs-number">4</span> - j) % <span class="hljs-number">8</span>)) | v5))&amp;<span class="hljs-number">0xff</span><br>s=Solver()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>    s.add(Buf2[i]==tmp[i])<br>s.check()<br><span class="hljs-keyword">if</span> s.check():<br>    m=s.model()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(m[<span class="hljs-built_in">input</span>[i]].as_long()),end=<span class="hljs-string">''</span>)<br></code></pre></td></tr></tbody></table></figure><p>赛后整理的时候copy一遍就过了，比赛的时候出了点问题，卡了段时间。</p><p>另一种解法就是了解程序的位运算在干什么，v6数组对应的8位二进制每一位,单拿一小段分析。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">i=<span class="hljs-number">0</span><br>j=<span class="hljs-number">0</span>~<span class="hljs-number">8</span><br>v6[<span class="hljs-number">0</span>]=<span class="hljs-number">128</span>-&gt;<span class="hljs-number">0x10000000</span><br>((v6[j] &amp; input[i + <span class="hljs-number">3</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">3</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)input[i + <span class="hljs-number">3</span>]) &gt;&gt; ((<span class="hljs-number">3</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; input[i + <span class="hljs-number">2</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">2</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)input[i + <span class="hljs-number">2</span>]) &gt;&gt; ((<span class="hljs-number">2</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; input[i + <span class="hljs-number">1</span>]) &lt;&lt; (<span class="hljs-number">8</span> - (<span class="hljs-number">1</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)input[i + <span class="hljs-number">1</span>]) &gt;&gt; ((<span class="hljs-number">1</span> - j) % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> __int8)input[i]) &lt;&lt; (<span class="hljs-number">8</span> - -j % <span class="hljs-number">8u</span>)) | ((v6[j] &amp; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)input[i]) &gt;&gt; (-j % <span class="hljs-number">8u</span>))<br>    <br><span class="hljs-comment">/*上为char input[0~3]  分别与上v6[j]取出最高位，因为第二步限定(unsigned __int8)类型，所以只看右移，左移都舍去了</span><br><span class="hljs-comment">input 0   intput 1  input2  input3</span><br><span class="hljs-comment">高位  a0000000  b0000000  c0000000  d0000000</span><br><span class="hljs-comment">input3 右移3  input2 右移2  input 1 右移1 ..</span><br><span class="hljs-comment">变成 abcd0000</span><br><span class="hljs-comment">后半段也类似 加上input4~7 假设7为x0000000则 最后变为abcd...x</span><br><span class="hljs-comment">也就是8个一组 对应位的二进制重新组合按照顺序做到右放0-7的对应位</span><br><span class="hljs-comment">逆过程，通过enc在table中的索引转换为8个二进制，之后8个一组，重组即可。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><p>exp:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>v6=[<span class="hljs-number">128</span>,<span class="hljs-number">64</span>,<span class="hljs-number">32</span>,<span class="hljs-number">16</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>Buf2=[<span class="hljs-number">0</span>]*<span class="hljs-number">40</span><br>byte_405000=[<span class="hljs-number">0x65</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x8F</span>]<br>enc=[<span class="hljs-number">0x65</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x79</span>]<br>tmp=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    tmp.append(<span class="hljs-built_in">bin</span>(byte_405000.index(enc[i]))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(tmp)<br>m=[<span class="hljs-string">''</span>]*<span class="hljs-number">40</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">40</span>,<span class="hljs-number">8</span>):<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<span class="hljs-comment">#控制tmp的索引</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            m[i+j]+=tmp[i+p][j]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(i,<span class="hljs-number">2</span>)),end=<span class="hljs-string">''</span>)<br><span class="hljs-comment">#Q5la5_3KChtem6_HYHk_NlHhNZz73aCZeK05II96</span><br></code></pre></td></tr></tbody></table></figure><p>上述两种方法都可以求逆，不过擅长使用z3来解这道题是非常迅速的，减少了代码分析量。</p><h3 id="2、TacticalArmed">2、TacticalArmed</h3><p>赛后复现，学到很多东西，基础还是⑧顶，尤其是对执行流程有修改的代码。</p><p>win逆向，有Tlscallback函数，开了一个进程，跟进进程处理函数。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">004010</span>D6 ;   __try { <span class="hljs-comment">// __except at loc_4010F1</span><br>.text:<span class="hljs-number">004010</span>D6                 mov     [ebp+ms_exc.registration.TryLevel], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">004010</span>DD                 <span class="hljs-keyword">int</span>     <span class="hljs-number">2</span>Dh             ; Windows NT - debugging services: eax = type<br>.text:<span class="hljs-number">004010</span>DF                 nop<br>.text:<span class="hljs-number">004010E0</span>                 jmp     <span class="hljs-keyword">short</span> loc_401142<br>.text:<span class="hljs-number">004010E0</span> ;   } <span class="hljs-comment">// starts at 4010D6</span><br></code></pre></td></tr></tbody></table></figure><p>存在Int 2d反调试，即正常运行会引发异常而检测到调试器则继续执行，所以真正代码逻辑在异常处理中。</p><p>分析代码知是对dword_405000这个内存中赋值了4个int，一般是修改key或某个解密需要的参数。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">dword_405000 -&gt;<span class="hljs-number">7</span>CE45630h  <span class="hljs-number">58334908</span>h  <span class="hljs-number">66398867</span>h  <span class="hljs-number">0</span>C35195B1h<br><span class="hljs-comment">//retn 指令</span><br>retn <span class="hljs-number">4</span> -&gt; pop eip  add esp,<span class="hljs-number">4</span><br></code></pre></td></tr></tbody></table></figure><p>之后主函数内用到了一个函数指针v21,来表示lpadress的函数。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">  lpAdress = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>u);<br>  VirtualProtect(lpAdress, <span class="hljs-number">0x10</span>u, <span class="hljs-number">0x40</span>u, &amp;flOldProtect);<br>  v21 = (__int64 (__fastcall *)(<span class="hljs-keyword">int</span>, _DWORD))lpAdress;<br><br><span class="hljs-comment">//函数指针</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>;   <span class="hljs-comment">/*声明一个函数*/</span><br>    <span class="hljs-keyword">int</span> (*p) (<span class="hljs-keyword">int</span>);  <span class="hljs-comment">/*定义一个函数指针*/</span><br>    p = Func;          <span class="hljs-comment">/*将Func函数的首地址赋给指针变量p*/</span><br>p(<span class="hljs-number">1</span>) 等价 Func(<span class="hljs-number">1</span>)  <br></code></pre></td></tr></tbody></table></figure><p>整体main函数如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c">lpAdress = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>u);<br>VirtualProtect(lpAdress, <span class="hljs-number">0x10</span>u, <span class="hljs-number">0x40</span>u, &amp;flOldProtect);<br>v21 = (__int64 (__fastcall *)(<span class="hljs-keyword">int</span>, _DWORD))lpAdress;<br>Src = (<span class="hljs-keyword">char</span> *)&amp;loc_405010;                    <span class="hljs-comment">// 指向一个神秘的数串 类似opcode</span><br>Size = <span class="hljs-number">0</span>;<br>v18 = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Input flag here:"</span>, v13);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%255s"</span>, (<span class="hljs-keyword">char</span>)Str);<br>v17 = <span class="hljs-built_in">strlen</span>(Str) &gt;&gt; <span class="hljs-number">3</span>;                       <span class="hljs-comment">// size_t是unsigned int 的一个宏定义 主要用来计数</span><br>a3 = <span class="hljs-number">0</span>;<br>v15 = <span class="hljs-number">0</span>;<br>a2 = <span class="hljs-number">0</span>;<br>v12 = v4;<br>HIDWORD(v11) = v3;<br>v5 = __readeflags();<br>v10 = v5;<br><span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )                                   <span class="hljs-comment">// v15循环33次 分清</span><br>{<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )                                 <br>  {<br>    <span class="hljs-keyword">while</span> ( Size )<br>    {<br>      <span class="hljs-built_in">memset</span>(lpAdress, <span class="hljs-number">0</span>, <span class="hljs-number">0x10</span>u);             <span class="hljs-comment">// 清0</span><br>      <span class="hljs-built_in">memcpy</span>(lpAdress, Src, Size);            <span class="hljs-comment">// 把src处指向的代码 赋值过去</span><br>      dispatch((<span class="hljs-keyword">int</span>)lpAdress, a2, a3);<br>      *((_BYTE *)lpAdress + Size) = <span class="hljs-number">0xC3</span>;     <span class="hljs-comment">// ret的机器码是0xc3</span><br>      __writeeflags(v10);<br>      v6 = v21(v12, HIDWORD(v11));<br>      v12 = v7;<br>      v11 = v6;<br>      v8 = __readeflags();<br>      v10 = v8;<br>      ++a2;<br>      Src += <span class="hljs-number">16</span>;<br>      Size = unk_405220[v18++];               <span class="hljs-comment">// 读取opcode的大小 控制里面的代码执行</span><br>    }<br>    <span class="hljs-keyword">if</span> ( v15 == <span class="hljs-number">33</span> )<br>      <span class="hljs-keyword">break</span>;<br>    ++v15;<br>    a2 = <span class="hljs-number">0</span>;<br>    Src = (<span class="hljs-keyword">char</span> *)&amp;loc_405010;<br>    Size = unk_405220[<span class="hljs-number">0</span>];                     <span class="hljs-comment">// 6</span><br>    v18 = <span class="hljs-number">1</span>;<br>  }<br>  <span class="hljs-keyword">if</span> ( ++a3 == v17 )                          <span class="hljs-comment">// v17是输入长度//8  输入8个一组</span><br>    <span class="hljs-keyword">break</span>;<br>  v15 = <span class="hljs-number">0</span>;<br>  Size = <span class="hljs-number">0</span>;<br>}<br><span class="hljs-keyword">if</span> ( <span class="hljs-built_in">memcmp</span>(Str, dword_40532C, <span class="hljs-number">40u</span>) )<br>{<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Wrong"</span>);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"Congratulations"</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">"flag is DASCTF{your input}"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></tbody></table></figure><p>主要步骤是是while(size)里的循环，主要是代码的执行。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">*((_BYTE *)lpAdress + Size) = <span class="hljs-number">0xC3</span>;<br>是对每个语句末写上ret语句，用于返回。<br>之后通过v21来调用，在调用前还有一个针对opcode的smc<br></code></pre></td></tr></tbody></table></figure><p>用switch case语句来进行不同变量的分发，比较新颖。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> __cdecl <span class="hljs-title">dispatch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1, <span class="hljs-keyword">int</span> a2, <span class="hljs-keyword">int</span> a3)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// [esp+Ch] [ebp-50h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// [esp+50h] [ebp-Ch]</span><br>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [esp+58h] [ebp-4h]</span><br><br>  __CheckForDebuggerJustMyCode(&amp;unk_406015);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; *(_BYTE *)(i + a1); ++i )        <span class="hljs-comment">// 一直找opcode为0的地方停</span><br>    ;<br>  v4 = dword_4052A8[a2] % <span class="hljs-number">0x10</span>u;<br>  v3 = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)dword_4052A8[a2] &gt;&gt; <span class="hljs-number">4</span>;     <span class="hljs-comment">// 16进制数的高位和低位 16进制模式</span><br>  <span class="hljs-keyword">switch</span> ( v3 )<br>  {<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1u</span>:<br>      *(_DWORD *)(i + a1) = <span class="hljs-number">4</span> * (v4 + <span class="hljs-number">2</span> * a3) + <span class="hljs-number">0x405648</span>;<span class="hljs-comment">// input a3是8个一组 依次越过8个字节</span><br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2u</span>:<br>      *(_DWORD *)(i + a1) = <span class="hljs-number">4</span> * v4 + <span class="hljs-number">0x405000</span>;  <span class="hljs-comment">// key</span><br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3u</span>:<br>      *(_DWORD *)(i + a1) = &amp;unk_405748;        <span class="hljs-comment">// sum 看汇编得出 </span><br>      <span class="hljs-keyword">break</span>;<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>case语句的左侧是一个int的指针，所以右侧是一个地址，可以跳转到0x405648和0x405000，发现一个是输入的首地址，一个这是在Tlscallback中被修改过的int数据组的地址，还有一个&amp;unk_405748，没有其他的交叉引用所以初始默认为0，(全局变量)。</p><p>而switch 和 case中用到的索引在dword_4052A8这个数组中，16进制高位为case索引，低位为寻址的下标。</p><p><strong>综上，流程就是把src处的代码依次cpy到lpadress中，通过dispatch来修改操作数的值(操作数也是写入机器码中的)，之后依次执行。这片代码通过v15控制一共执行33次，同时根据输入进行8个一组分组再循环上述操作。</strong></p><p>Src = (char *)&amp;loc_405010;    src每次+16执行</p><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1637546895/blog_img/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/x_wxkqn4.png" alt=""></p><p>mov操作后面都是00，所以需要dispatch来赋值。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">8B</span> <span class="hljs-number">0</span>D <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                 mov     ecx, large ds:<span class="hljs-number">0</span><br><span class="hljs-number">81</span> E9 D2 <span class="hljs-number">96</span> <span class="hljs-number">5</span>A <span class="hljs-number">7</span>E                 sub     ecx, <span class="hljs-number">7E5</span>A96D2h  <br><span class="hljs-number">89</span> <span class="hljs-number">0</span>D <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                 mov     large ds:<span class="hljs-number">0</span>, ecx<br><span class="hljs-number">8B</span> <span class="hljs-number">15</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                 mov     edx, large ds:<span class="hljs-number">0</span><br>C1 EA <span class="hljs-number">05</span>                          shr     edx, <span class="hljs-number">5</span><br>A1 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                    mov     eax, large ds:<span class="hljs-number">0</span><br><span class="hljs-number">03</span> C2                             add     eax, edx<br><span class="hljs-number">8B</span> <span class="hljs-number">0</span>D <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                 mov     ecx, large ds:<span class="hljs-number">0</span><br><span class="hljs-number">03</span> <span class="hljs-number">0</span>D <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                 add     ecx, large ds:<span class="hljs-number">0</span><br><span class="hljs-number">33</span> C1                             <span class="hljs-keyword">xor</span>     eax, ecx<br><span class="hljs-number">8B</span> <span class="hljs-number">15</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                 mov     edx, large ds:<span class="hljs-number">0</span><br>C1 E2 <span class="hljs-number">04</span>                          shl     edx, <span class="hljs-number">4</span><br><span class="hljs-number">8B</span> <span class="hljs-number">0</span>D <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                 mov     ecx, large ds:<span class="hljs-number">0</span><br><span class="hljs-number">03</span> CA                             add     ecx, edx<br><span class="hljs-number">33</span> C1                             <span class="hljs-keyword">xor</span>     eax, ecx<br><span class="hljs-number">8B</span> <span class="hljs-number">15</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                 mov     edx, large ds:<span class="hljs-number">0</span><br><span class="hljs-number">03</span> D0                             add     edx, eax<br><span class="hljs-number">89</span> <span class="hljs-number">15</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                 mov     large ds:<span class="hljs-number">0</span>, edx<br>A1 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                    mov     eax, large ds:<span class="hljs-number">0</span><br>C1 E8 <span class="hljs-number">05</span>                          shr     eax, <span class="hljs-number">5</span>    <br><span class="hljs-number">8B</span> <span class="hljs-number">0</span>D <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                 mov     ecx, large ds:<span class="hljs-number">0</span>  <br><span class="hljs-number">03</span> C8                             add     ecx, eax<br><span class="hljs-number">8B</span> <span class="hljs-number">15</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                 mov     edx, large ds:<span class="hljs-number">0</span><br><span class="hljs-number">03</span> <span class="hljs-number">15</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                 add     edx, large ds:<span class="hljs-number">0</span>   <span class="hljs-number">33</span> CA                             <span class="hljs-keyword">xor</span>     ecx, edx<br>A1 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                    mov     eax, large ds:<span class="hljs-number">0</span><br>C1 E0 <span class="hljs-number">04</span>                          shl     eax, <span class="hljs-number">4</span><br><span class="hljs-number">8B</span> <span class="hljs-number">15</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                 mov     edx, large ds:<span class="hljs-number">0</span><br><span class="hljs-number">03</span> D0                             add     edx, eax<br><span class="hljs-number">33</span> CA                             <span class="hljs-keyword">xor</span>     ecx, edx<br>A1 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                    mov     eax, large ds:<span class="hljs-number">0</span><br><span class="hljs-number">03</span> C1                             add     eax, ecx<br>A3 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>                    mov     large ds:<span class="hljs-number">0</span>, eax<br><br></code></pre></td></tr></tbody></table></figure><p>脚本对4025A8数组处理，拿到修改操作数的流程。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; *(_BYTE *)(i + a1); ++i )；        <span class="hljs-comment">// 一直找opcode为0的地方停</span><br><br><span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <br><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <br><span class="hljs-comment">//举例</span><br> <span class="hljs-number">3</span> <span class="hljs-number">0</span> -&gt; <span class="hljs-keyword">switch</span>(<span class="hljs-number">3</span>) 也就是 把<span class="hljs-number">8</span>D <span class="hljs-number">0</span>D <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> 后<span class="hljs-number">4</span>个改成unk_405748的地址并取内容赋值给ecx<br> <span class="hljs-number">0</span> <span class="hljs-number">0</span> 无操做<br> <span class="hljs-number">1</span> <span class="hljs-number">1</span> 是取出input[<span class="hljs-number">1</span>] 右边是v4=<span class="hljs-number">1</span>   <span class="hljs-number">4</span> * (v4 + <span class="hljs-number">2</span> * a3) + <span class="hljs-number">0x405648</span><br> <span class="hljs-number">2</span> <span class="hljs-number">1</span> 是取出key[<span class="hljs-number">1</span>] <span class="hljs-comment">//大致分析后确定  </span><br> ...依次补全汇编并翻译<br></code></pre></td></tr></tbody></table></figure><p>如下:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c">mov ecx,&amp;unk_405748<br><br>sum=<span class="hljs-number">0</span>;<br><br>sub     ecx, <span class="hljs-number">7E5</span>A96D2h<br>mov &amp;unk_405748,ecx<br><br>sum-=<span class="hljs-number">0x7E5A96D2</span><br><br>mov  edx,input[<span class="hljs-number">1</span>]<br>shr edx,<span class="hljs-number">5</span><br><br>mov eax,key[<span class="hljs-number">1</span>]<br><br>add eax,edx <span class="hljs-comment">//2 1  0 0</span><br><br>mov ecx,sum<br>add ecx,input[<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">xor</span> eax,ecx   <span class="hljs-comment">//(input[1]+sum)^(input[1]&gt;&gt;5 + key[1])</span><br><br>mov edx, input[<span class="hljs-number">1</span>]<br>shl edx,<span class="hljs-number">4</span><br>mov ecx,key[<span class="hljs-number">0</span>]<br>add ecx,edx<br><span class="hljs-keyword">xor</span> eax,ecx<br><span class="hljs-comment">// (input[1]&lt;&lt;4 + key[0])^(input[1]+sum)^(input[1]&gt;&gt;5 + key[1])</span><br><br>mov edx ,input[<span class="hljs-number">0</span>]<br>add edx,eax<br><br>mov edx,input[<span class="hljs-number">0</span>] <br><br><span class="hljs-comment">//以上实现的就是 v0+=(v1&lt;&lt;4 + k0)^(v1 + sum)(v1 &gt;&gt;5 + k1)</span><br>.....<br><br><span class="hljs-comment">//不过汇编中没有 mov  xxx,0 并且 对 sum 那边地址内容unk_405748 也没有别的交叉引用  也就是每组</span><br></code></pre></td></tr></tbody></table></figure><p>分析到一半就能推出是Tea加密，轮数为33 ，default为0x7E5A96D2，既然分析出&amp;unk_405748为sum，并且对他没有别的引用，所以再对密文多次加密时sum是在上一轮基础上使用的。</p><p>解密脚本:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tea_decode</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* s, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* key,<span class="hljs-keyword">int</span> count)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-keyword">int</span> a = <span class="hljs-number">0xE98651DC67185A11</span>;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> enc[] = { <span class="hljs-number">0x422F1DED</span>,<span class="hljs-number">0x1485E472</span>,<span class="hljs-number">0x35578D5</span>,<span class="hljs-number">0x0BF6B80A2</span>,<span class="hljs-number">0x97D77245</span>,<span class="hljs-number">0x2DAE75D1</span>,<span class="hljs-number">0x665FA963</span>,<span class="hljs-number">0x292E6D74</span>,<span class="hljs-number">0x9795FCC1</span>,<span class="hljs-number">0x0BB5C8E9</span>};<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> key[<span class="hljs-number">4</span>] = { <span class="hljs-number">0x7CE45630</span>,<span class="hljs-number">0x58334908</span>,<span class="hljs-number">0x66398867</span>,<span class="hljs-number">0x0C35195B1</span> };<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i+=<span class="hljs-number">2</span>)<br>tea_decode(enc+i, key,i/<span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tea_decode</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* s, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* key,<span class="hljs-keyword">int</span> count)</span> </span>{<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v0 = s[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v1 = s[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">uint32_t</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> defalt = <span class="hljs-number">0x7E5A96D2</span>;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> k0 = key[<span class="hljs-number">0</span>], k1 = key[<span class="hljs-number">1</span>], k2 = key[<span class="hljs-number">2</span>], k3 = key[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">33</span>*count+<span class="hljs-number">33</span>); i++)<span class="hljs-comment">// sum状态保存到下一组</span><br>sum -= defalt;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">33</span>; i++) {  <br>v1 -= ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k3);<br>v0 -= ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k1);<br>sum += defalt;<br>}<br>s[<span class="hljs-number">0</span>] = v0;<br>s[<span class="hljs-number">1</span>] = v1;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d,%d,"</span>, v0,v1);<br>}<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">a=[826566507,843212655,845236089,1097428850,1198086245,1902206776,1132088430,1181900618,1917866824,1261778286]</span><br><span class="hljs-comment">for i in a:</span><br><span class="hljs-comment">    print(int.to_bytes(i,4,'little').decode(),end='')</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><h3 id="3、虚假的粉丝">3、虚假的粉丝</h3><p>dos界面的代码动画，有点震撼，不过题目没设计到什么算法，主要还是读流程。</p><p>首先就是找到3个key，查看strings窗口，发现第一字符串很可疑,对其交叉引用发现了一个未被调用的函数，需要重新定义一下。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//#j#M_OEE!jmhih,=555"xtx</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sub_401379</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-keyword">char</span> Buffer[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [esp+16h] [ebp-92h] BYREF</span><br>  <span class="hljs-keyword">char</span> FileName[<span class="hljs-number">30</span>]; <span class="hljs-comment">// [esp+7Ah] [ebp-2Eh] BYREF</span><br>  FILE *Stream; <span class="hljs-comment">// [esp+98h] [ebp-10h]</span><br>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [esp+9Ch] [ebp-Ch]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">23</span>; ++i )<br>    FileName[i] = aJMOeeJmhih555X[i] ^ <span class="hljs-number">0xC</span>;<br>  Stream = fopen(FileName, <span class="hljs-string">"r"</span>);<br>  fread(Buffer, <span class="hljs-number">0x57</span>u, <span class="hljs-number">1u</span>, Stream);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>, Buffer);<br>}    <br></code></pre></td></tr></tbody></table></figure><p>拉出去异或一下，是在读<strong>P./f/ASCII-faded 1999P.txt</strong>这个文件，打开查看，发现key。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">K3y1: (<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">'A'</span>)) + <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">'W'</span>))).replace(<span class="hljs-string">"0x"</span>, <span class="hljs-string">""</span>)<br>K3y2: <span class="hljs-built_in">ord</span>(<span class="hljs-string">'F'</span>) + <span class="hljs-built_in">ord</span>(<span class="hljs-string">'a'</span>) + <span class="hljs-built_in">ord</span>(<span class="hljs-string">'d'</span>) + <span class="hljs-built_in">ord</span>(<span class="hljs-string">'e'</span>) + <span class="hljs-built_in">ord</span>(<span class="hljs-string">'d'</span>) + <span class="hljs-built_in">ord</span>(<span class="hljs-string">'i'</span>) + <span class="hljs-built_in">ord</span>(<span class="hljs-string">'s'</span>) + <span class="hljs-built_in">ord</span>(<span class="hljs-string">'b'</span>) + <span class="hljs-built_in">ord</span>(<span class="hljs-string">'e'</span>) + <span class="hljs-built_in">ord</span>(<span class="hljs-string">'s'</span>) + <span class="hljs-built_in">ord</span>(<span class="hljs-string">'t'</span>)<br><span class="hljs-comment">#key3是文件读取的字节大小，根据if判断知是40</span><br><span class="hljs-keyword">if</span> ( Buffer[<span class="hljs-number">0</span>] != <span class="hljs-string">'U'</span> || Buffer[<span class="hljs-number">39</span>] != <span class="hljs-string">'S'</span> )<br></code></pre></td></tr></tbody></table></figure><p>之后它通过上述的key计算了一个新的文件，之后从中读取内容。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">"UzNDcmU3X0szeSUyMCUzRCUyMEFsNE5fd0FsSzNS"</span><br>base64 -&gt; url解码 -&gt; S3Cre7_K3y = Al4N_wAlK3R<br></code></pre></td></tr></tbody></table></figure><p>之后观察一个用到key的check结果的处理。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v24 == <span class="hljs-number">1</span> )<br> {<br>   v25 = <span class="hljs-number">5317</span>;<br>   Stream = fopen(<span class="hljs-string">"./f/ASCII-faded 5315.txt"</span>, <span class="hljs-string">"rb"</span>);<br>   <span class="hljs-keyword">if</span> ( !Stream )<br>   {<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"ERROR!\n"</span>);<br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   }<br>   fread(v6, <span class="hljs-number">0x4EDE</span>u, <span class="hljs-number">1u</span>, Stream);<br>   fclose(Stream);<br>   v22 = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">0x84E</span>; ++i )<br>   {<br>     <span class="hljs-keyword">if</span> ( v22 &gt; <span class="hljs-number">10</span> )<br>       v22 = <span class="hljs-number">0</span>;<br>     v6[i] ^= key[v22++];<br>   }<br>   Stream = fopen(<span class="hljs-string">"./f/ASCII-faded 5315.txt"</span>, <span class="hljs-string">"w"</span>);<br>   fwrite(v6, <span class="hljs-number">0x84F</span>u, <span class="hljs-number">1u</span>, Stream);<br>   fclose(Stream);<br> }<br></code></pre></td></tr></tbody></table></figure><p>对5317进行异或之后再写入，再异或一次观察内容,后面就没什么内容了，就是接着奏乐接着舞了。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">key=<span class="hljs-string">'Al4N_wAlK3R'</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">'ASCII-faded 5315.txt'</span>,<span class="hljs-string">'r+'</span>)<br>s=f.read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(s[i])^<span class="hljs-built_in">ord</span>(key[i%<span class="hljs-built_in">len</span>(key)])),end=<span class="hljs-string">''</span>)<br><br></code></pre></td></tr></tbody></table></figure><p>输入key跑起来还是挺不错的，摘掉眼镜.jpg。</p><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1637550797/blog_img/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/1_dhb3xj.png" alt=""></p><p>A_TrUe_AW_f4ns</p><p>不过这题，静态的话就最后一个key有用，还是在文件中，并且U和S已知，直接文件搜索，也能拿到key，然后直接异或就可以了。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5317</span>):<br>    f=<span class="hljs-built_in">open</span>(<span class="hljs-string">'ASCII-faded %s.txt'</span>%<span class="hljs-built_in">str</span>(i).zfill(<span class="hljs-number">4</span>),<span class="hljs-string">'r+'</span>)<br>    s=f.read()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">'U'</span><span class="hljs-keyword">in</span> s <span class="hljs-keyword">and</span> <span class="hljs-string">'S'</span> <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">else</span>:<br>        f.close()<br>        <span class="hljs-keyword">continue</span><br><span class="hljs-string">"""</span><br><span class="hljs-string">4157 -&gt;key的文件</span><br><span class="hljs-string">5315</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure><hr><p><strong>比赛时候挺麻的，比赛快要截止才有点感觉，还有一个硬件描述语言有待复现，计组实验课用的verilog神似，关键是不会啊! 人不行别怪路不平，还得补！。</strong></p>]]></content>
    
    
    <categories>
      
      <category>CTF Memory</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CUMT-RE专项</title>
    <link href="/2021/11/11/CUMT-RE/"/>
    <url>/2021/11/11/CUMT-RE/</url>
    
    <content type="html"><![CDATA[<h1>CUMT-2021RE专项赛</h1><h3 id="1、签到">1、签到</h3><p><strong>循环左移</strong>，逆序即可</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs c">*((_BYTE *)Buf2 + v3) = __ROL1__(*((_BYTE *)Buf2 + v3), <span class="hljs-number">1</span>);<br>++v3;<br></code></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>Buf1=[<span class="hljs-number">0</span>]*<span class="hljs-number">12</span><br>Buf1[<span class="hljs-number">0</span>] = <span class="hljs-number">0xE8DAEAC6</span>;<br>Buf1[<span class="hljs-number">1</span>] = <span class="hljs-number">0xF6CCE8C6</span>;<br>Buf1[<span class="hljs-number">2</span>] = <span class="hljs-number">0xCA9680DA</span>;<br>Buf1[<span class="hljs-number">3</span>] = <span class="hljs-number">0xECCAA4BE</span>;<br>Buf1[<span class="hljs-number">4</span>] = <span class="hljs-number">0x66E6A4CA</span>;<br>Buf1[<span class="hljs-number">5</span>] = <span class="hljs-number">0x72DCCABE</span>;<br>Buf1[<span class="hljs-number">6</span>] = <span class="hljs-number">0x8ACA9C62</span>;<br>Buf1[<span class="hljs-number">7</span>] = <span class="hljs-number">0xCEDC62A4</span>;<br>Buf1[<span class="hljs-number">8</span>] = <span class="hljs-number">0x66A48EBE</span>;<br>Buf1[<span class="hljs-number">9</span>] = <span class="hljs-number">0x80BE6EC2</span>;<br>Buf1[<span class="hljs-number">10</span>] = <span class="hljs-number">0xDC6282CE</span>;<br>Buf1[<span class="hljs-number">11</span>] = <span class="hljs-number">0xFA</span>;<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Buf1)):<br>    a=<span class="hljs-built_in">int</span>.to_bytes(Buf1[j],<span class="hljs-number">4</span>,<span class="hljs-string">'little'</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((i&gt;&gt;<span class="hljs-number">1</span>)|((i&amp;<span class="hljs-number">1</span>)&lt;&lt;<span class="hljs-number">7</span>)),end=<span class="hljs-string">''</span>)<br><br></code></pre></td></tr></tbody></table></figure><h3 id="2、来自字节码的鼓励">2、来自字节码的鼓励</h3><p><strong>python字节码</strong>，比较短，对照官方文档很容易便能翻译出源码。</p><p><a href="https://docs.python.org/3/library/dis.html">dis — Disassembler for Python bytecode — Python 3.10.0 documentation</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n=[-<span class="hljs-number">83</span>,-<span class="hljs-number">96</span>,-<span class="hljs-number">78</span>,-<span class="hljs-number">21</span>,-<span class="hljs-number">3</span>,-<span class="hljs-number">17</span>,<span class="hljs-number">58</span>,<span class="hljs-number">31</span>,<span class="hljs-number">58</span>]<br><span class="hljs-comment">#ff=input</span><br>c=<span class="hljs-string">''</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">'1'</span>,<span class="hljs-string">'r'</span>)<br>s=f.read()<br>f.close()<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">'2'</span>,<span class="hljs-string">'rb'</span>)<br>b=f.read(<span class="hljs-number">9</span>)<br>f.close()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>    tmp=<span class="hljs-built_in">ord</span>(s[i])^b[i]<br>    tmp=tmp+n[i]<br>    c+=<span class="hljs-built_in">chr</span>(tmp)<br><span class="hljs-keyword">if</span> c==ff:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'Right! Please add cumtctf{}'</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'try again'</span>)<br></code></pre></td></tr></tbody></table></figure><p>ff是输入，只在最后用到，故翻译出的字节码前部分便是flag的生成代码。</p><h3 id="3、my-cloth">3、my cloth</h3><p><strong>经典upx壳，后加三段魔改default和轮数的Tea加密。</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c">  v23[<span class="hljs-number">0</span>] = <span class="hljs-number">222</span>;<br>  v23[<span class="hljs-number">1</span>] = <span class="hljs-number">173</span>;<br>  v23[<span class="hljs-number">2</span>] = <span class="hljs-number">190</span>;<br>  v23[<span class="hljs-number">3</span>] = <span class="hljs-number">239</span>;<br>  <br> v5 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">3</span>; ++i )<br>    v5 = (v5 &lt;&lt; <span class="hljs-number">8</span>) + (<span class="hljs-keyword">unsigned</span> __int8)v24[i];<br>  v7 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">4</span>; j &lt;= <span class="hljs-number">7</span>; ++j )<br>    v7 = (v7 &lt;&lt; <span class="hljs-number">8</span>) + (<span class="hljs-keyword">unsigned</span> __int8)v24[j]; <span class="hljs-comment">//输入转大端</span><br>  v17 = v5;<br>  v18 = v7;<br>  encrypt(&amp;v17, v23);<br>  <br> <span class="hljs-comment">//明文相邻两四个字节进行加密，并转成大端的int型，key是固定的</span><br><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *__fastcall <span class="hljs-title">encrypt</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *result, _DWORD *a2)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v2; <span class="hljs-comment">// [sp+Ch] [bp+Ch]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// [sp+10h] [bp+10h]</span><br>  <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// [sp+14h] [bp+14h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [sp+18h] [bp+18h]</span><br><br>  v2 = *result;<br>  v3 = result[<span class="hljs-number">1</span>];<br>  v4 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">0x3F</span>; ++i )<br>  {<br>    v4 -= <span class="hljs-number">559038737</span>;<br>    v2 += (a2[<span class="hljs-number">1</span>] + (v3 &gt;&gt; <span class="hljs-number">5</span>)) ^ (<span class="hljs-number">16</span> * v3 + *a2) ^ (v4 + v3);<br>    v3 += (a2[<span class="hljs-number">3</span>] + (v2 &gt;&gt; <span class="hljs-number">5</span>)) ^ (<span class="hljs-number">16</span> * v2 + a2[<span class="hljs-number">2</span>]) ^ (v4 + v2);<br>  }<br>  *result = v2;<br>  result[<span class="hljs-number">1</span>] = v3;<br>  <span class="hljs-keyword">return</span> result;<br>}<br></code></pre></td></tr></tbody></table></figure><p>exp:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tea_decode</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* s, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* key)</span> </span>{<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v0 = s[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v1 = s[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> defalt = <span class="hljs-number">0x21524111</span>;<br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">0x3F</span>; i++)<br>sum -= defalt;<br><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> k0 = key[<span class="hljs-number">0</span>], k1 = key[<span class="hljs-number">1</span>], k2 = key[<span class="hljs-number">2</span>], k3 = key[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">0x3f</span>; i++) {<br>v1 -= (k3 + (v0 &gt;&gt; <span class="hljs-number">5</span>)) ^ ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (sum + v0);<br>v0 -= (k1 + (v1 &gt;&gt; <span class="hljs-number">5</span>)) ^ ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (sum + v1);<br>sum += defalt;<br>}<br>s[<span class="hljs-number">0</span>] = v0;<br>s[<span class="hljs-number">1</span>] = v1;<br>cout &lt;&lt; s[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">","</span> &lt;&lt; s[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">","</span>;<br>}<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> key[<span class="hljs-number">4</span>] = { <span class="hljs-number">222</span>,<span class="hljs-number">173</span>,<span class="hljs-number">190</span>,<span class="hljs-number">239</span> };<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> enc[<span class="hljs-number">6</span>] = { <span class="hljs-number">0xD5AF0608</span>,<span class="hljs-number">0x361EF340</span>,<span class="hljs-number">0xB55D7042</span>,<span class="hljs-number">0xB460532B</span>,<span class="hljs-number">0xC53FB95B</span>,<span class="hljs-number">0xCC5F1002</span> };<br><span class="hljs-built_in">tea_decode</span>(enc, key);<br><span class="hljs-built_in">tea_decode</span>(enc + <span class="hljs-number">2</span>, key);<br><span class="hljs-built_in">tea_decode</span>(enc + <span class="hljs-number">4</span>, key);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><span class="hljs-comment">/* python</span><br><span class="hljs-comment">a=[1668640116,1668572795,1382381157,1920165215,829644646,1970167677,]</span><br><span class="hljs-comment">for i in a:</span><br><span class="hljs-comment">    print(int.to_bytes(i,4,'big').decode(),end='')</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></tbody></table></figure><h3 id="4、weak">4、weak</h3><p><strong>花指令+数独</strong></p><p>花指令单独写了一个函数，通过修改EIP来越过垃圾代码。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">00000000000013</span>EA junk            proc near               ; CODE XREF: .text:<span class="hljs-number">000000000000123</span>A↑p<br>.text:<span class="hljs-number">00000000000013</span>EA                 pop     rax<br>.text:<span class="hljs-number">00000000000013</span>EB                 add     rax, <span class="hljs-number">5</span><br>.text:<span class="hljs-number">00000000000013</span>EF                 push    rax<br>.text:<span class="hljs-number">00000000000013F</span>0                 retn<br>.text:<span class="hljs-number">00000000000013F</span>0 junk            endp<br></code></pre></td></tr></tbody></table></figure><p>call 会push下一条指令的IP，之后对IP+5，并retn，对IP的值完成+5的操作。<br>nop掉call junk下一条指令开始的5个字节即可。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function"></span>{<br>  <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v5; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// [rsp+4h] [rbp-7Ch]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 i; <span class="hljs-comment">// [rsp+8h] [rbp-78h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 j; <span class="hljs-comment">// [rsp+10h] [rbp-70h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 k; <span class="hljs-comment">// [rsp+18h] [rbp-68h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 m; <span class="hljs-comment">// [rsp+20h] [rbp-60h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 n; <span class="hljs-comment">// [rsp+28h] [rbp-58h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 ii; <span class="hljs-comment">// [rsp+30h] [rbp-50h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 jj; <span class="hljs-comment">// [rsp+38h] [rbp-48h]</span><br>  __int64 v14; <span class="hljs-comment">// [rsp+40h] [rbp-40h]</span><br>  __int64 v15; <span class="hljs-comment">// [rsp+48h] [rbp-38h]</span><br>  __int64 v16; <span class="hljs-comment">// [rsp+50h] [rbp-30h]</span><br>  __int64 v17[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+60h] [rbp-20h] BYREF</span><br><br>  v17[<span class="hljs-number">3</span>] = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v17[<span class="hljs-number">0</span>] = <span class="hljs-number">0LL</span>;<br>  v17[<span class="hljs-number">1</span>] = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"your flag?"</span>);<br>  __isoc99_scanf(<span class="hljs-string">"%s"</span>, v17);<br>  v6 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0LL</span>; i &lt;= <span class="hljs-number">0x23</span>; ++i )<br>  {<br>    <span class="hljs-keyword">if</span> ( !numbers[i] )<br>      numbers[i] = *((_BYTE *)v17 + v6++) - <span class="hljs-number">48</span>;<br>  }<br>  junk();<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0LL</span>; j &lt;= <span class="hljs-number">5</span>; ++j )<br>  {<br>    v14 = <span class="hljs-number">0LL</span>;<br>    v15 = <span class="hljs-number">0LL</span>;<br>    v16 = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0LL</span>; k &lt;= <span class="hljs-number">5</span>; ++k )<br>    {<br>      v3 = numbers[<span class="hljs-number">6</span> * j + k] - <span class="hljs-number">1</span>;<br>      ++*((_DWORD *)&amp;v14 + v3);<span class="hljs-comment">//要求v3 0-5 即数组每行为1-6</span><br>    }<br>    <span class="hljs-keyword">for</span> ( m = <span class="hljs-number">0LL</span>; m &lt;= <span class="hljs-number">5</span>; ++m )<br>    {<br>      <span class="hljs-keyword">if</span> ( *((_DWORD *)&amp;v14 + m) != <span class="hljs-number">1</span> )<br>      {<br>LABEL_12:<br>        fail();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      }<br>    }<br>  }<br>  junk();<br>  <span class="hljs-keyword">for</span> ( n = <span class="hljs-number">0LL</span>; n &lt;= <span class="hljs-number">5</span>; ++n )<br>  {<br>    v14 = <span class="hljs-number">0LL</span>;<br>    v15 = <span class="hljs-number">0LL</span>;<br>    v16 = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-keyword">for</span> ( ii = <span class="hljs-number">0LL</span>; ii &lt;= <span class="hljs-number">5</span>; ++ii )<br>    {<br>      v5 = numbers[<span class="hljs-number">6</span> * ii + n] - <span class="hljs-number">1</span>; <span class="hljs-comment">//要求每列1-6</span><br>      ++*((_DWORD *)&amp;v14 + v5);<br>    }<br>    <span class="hljs-keyword">for</span> ( jj = <span class="hljs-number">0LL</span>; jj &lt;= <span class="hljs-number">5</span>; ++jj )<br>    {<br>      <span class="hljs-keyword">if</span> ( *((_DWORD *)&amp;v14 + jj) != <span class="hljs-number">1</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_12;<br>    }<br>  }<br>  succ();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>6阶数独，数独并不难，手撸即可。</p><h3 id="5、gogogo">5、gogogo</h3><p><strong>go 语言+迷宫问题 10x10阶</strong><br>不过IDA7.6也存在一些反编译的问题</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">v12 = fmt_Fscanln(v5, v8, v10);<br> <span class="hljs-keyword">if</span> ( !v2 )<br> {<br>   <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0LL</span>; v15[<span class="hljs-number">1</span>] &gt; i; i = v14 + <span class="hljs-number">1</span> )<br>   {<br>     v14 = i;<br>     <span class="hljs-keyword">if</span> ( !(<span class="hljs-keyword">unsigned</span> __int8)main___ptr_Maze__advance() )<br>     {<br>       v16[<span class="hljs-number">0</span>] = &amp;off_4D6200;<br>       v14 = fmt_Fprintln(v6, v9, v11, v12, v13);<br>     }<br>   }<br>   <span class="hljs-keyword">if</span> ( a11111111111010[<span class="hljs-number">11</span>] == <span class="hljs-string">'#'</span> )<br></code></pre></td></tr></tbody></table></figure><p>​ 比如将最后的check终点的位置，识别成了一个常量位置，查看汇编和动调能解决这个错误。</p><p>​迷宫路径，从下标11(0xB)开始，扫到’#'，眼过即可。但还是准备好一套熟悉的自动化迷宫脚本，一旦量大起来，手撸就不现实了。</p><h3 id="6、SimpleSMC">6、SimpleSMC</h3><p><strong>花指令+反调试+SMC+Blowfish</strong></p><p>​首先观察main函数，第一句汇编便是iretq的返回指令，显然经过了修改，对main交叉引用可以定位到一句lea rcx, main，并发现上方有花指令。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">0000000140003001</span> ; __unwind { <span class="hljs-comment">// __C_specific_handler</span><br>.text:<span class="hljs-number">0000000140003001</span>                 jz      <span class="hljs-keyword">short</span> near ptr loc_140003005+<span class="hljs-number">1</span><br>.text:<span class="hljs-number">0000000140003003</span>                 jnz     <span class="hljs-keyword">short</span> near ptr loc_140003005+<span class="hljs-number">1</span><br>.text:<span class="hljs-number">0000000140003005</span><br>.text:<span class="hljs-number">0000000140003005</span> loc_140003005:                          ; CODE XREF: sub_140002FF0:loc_140003001↑j<br>.text:<span class="hljs-number">0000000140003005</span>                                         ; sub_140002FF0+<span class="hljs-number">13</span>↑j<br>.text:<span class="hljs-number">0000000140003005</span>                 call    near ptr <span class="hljs-number">0</span>C9493074h<br>.text:<span class="hljs-number">000000014000300</span>A                 loope   near ptr loc_140003053+<span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><p>通过jz 和 jnz 连用实现跳转，nop掉loc_140003005处的第一个字节即可。</p><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1637039417/blog_img/1_ukikcx.png" alt=""></p><p>通过与NT有关的API调用，类似一种反调试手段，不过此处也没发现对main函数有关的处理，跟进140003110函数。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">0000000140003110</span> sub_140003110   proc near               ; CODE XREF: sub_140002FF0:loc_140003073↑p<br>.text:<span class="hljs-number">0000000140003110</span>                                         ; DATA XREF: .pdata:<span class="hljs-number">000000014000</span>D054↓o<br>.text:<span class="hljs-number">0000000140003110</span><br>.text:<span class="hljs-number">0000000140003110</span> var_8           = qword ptr <span class="hljs-number">-8</span><br>.text:<span class="hljs-number">0000000140003110</span><br>.text:<span class="hljs-number">0000000140003110</span>                 pushfq<br>.text:<span class="hljs-number">0000000140003111</span>                 <span class="hljs-keyword">or</span>      [rsp+<span class="hljs-number">8</span>+var_8], <span class="hljs-number">100</span>h<br>.text:<span class="hljs-number">0000000140003119</span>                 popfq<br>.text:<span class="hljs-number">000000014000311</span>A                 retn<br>.text:<span class="hljs-number">000000014000311</span>A sub_140003110   endp<br></code></pre></td></tr></tbody></table></figure><p>pushfq是将标志寄存器的值入栈，之后or 0x100进行修改，将TF标志位置1，涉及到一个反调试。</p><p>​<strong>通过将陷阱标志位TF置1导致触发单步执行异常（触发后会置0），而我们事先设置好的异常处理函数会修改eip跳到正确的代码处，调试时则不会。</strong></p><p>参考:<a href="https://www.cnblogs.com/glodears/p/12842101.html">反调试技术–WIndows篇 - 深海之炎 - 博客园 (cnblogs.com)</a></p><p>在汇编窗口能看到try 和 except，并且在except 的代码中看到了对main函数处的内存进行了smc自修改。</p><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1637040466/blog_img/re_ks9zzr.png" alt=""></p><p>汇编看出，修改代码为单字节循环左移三异或0x3F恢复，idapy脚本恢复即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idautils<br>target=<span class="hljs-number">0x0000000140001000</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x1F50</span>):<br>    a=Byte(target+i)<br>    result=((a&lt;&lt;<span class="hljs-number">3</span>)|(a&gt;&gt;<span class="hljs-number">5</span>))^<span class="hljs-number">0x3f</span><br>    PatchByte(target+i,result&amp;<span class="hljs-number">0xff</span>)<br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">'yes'</span>)<br></code></pre></td></tr></tbody></table></figure><p>修复后可见ida在反编译时定义了4个256的int数组，并且内存中有连续的18个int。</p><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1637041060/blog_img/re1_bwtple.png" alt=""></p><p>hint提示为blowfish加密，不过优化让代码面目全非，一步一步分析是个体力活。</p><p>blowfish参考:<a href="https://cloud.tencent.com/developer/article/1836650">https://cloud.tencent.com/developer/article/1836650</a></p><p>不过是魔改掉了p盒和s盒，初始化的代码是没有变的，可能经过优化有些难读。</p><p>例如:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i)<br>{<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">256</span>; j+=<span class="hljs-number">2</span>)<br>{<br>BlowfishEncryption(ptr, &amp;leftSide, &amp;rightSide);<br>ptr-&gt;s[i][j] = leftSide;<br>ptr-&gt;s[i][j+<span class="hljs-number">1</span>] = rightSide;<br>}<br>}<br><span class="hljs-comment">//而IDA直接识别为</span><br> <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x200</span>; ++i )<br>     <span class="hljs-comment">//xxxxxxx</span><br></code></pre></td></tr></tbody></table></figure><p>整体加密流程就是先秘钥初始化，此部分与输入无关，之后进行加密，加密流程类似festil轮，左边等于左边异或p[i]，右边等与F(左)^右，最后再左右交换。一共循环16轮，最后一轮取消交换，左右与p[17]和p[16]异或即可。解密即逆过程。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">blowfish_decrypt</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span>* L, <span class="hljs-keyword">uint32_t</span>* R)</span> </span>{<br>*L ^= P[<span class="hljs-number">17</span>];<br>*R ^= P[<span class="hljs-number">16</span>];<br>swap(L, R);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">short</span> r = <span class="hljs-number">15</span>; r &gt;=<span class="hljs-number">0</span>; r--) {<br>*L = *L ^ f(*R);<br>*R^=P[r];<br>swap(L, R);<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>按照内存中的数据修改头文件中的pbox和sbox，解密的主体代码如下。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">"blowfish.h"</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">uint32_t</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> x)</span> </span>{<br><span class="hljs-keyword">uint32_t</span> h = S[<span class="hljs-number">0</span>][x &gt;&gt; <span class="hljs-number">24</span>] + S[<span class="hljs-number">1</span>][x &gt;&gt; <span class="hljs-number">16</span> &amp; <span class="hljs-number">0xff</span>];<br><span class="hljs-keyword">return</span> (h ^ S[<span class="hljs-number">2</span>][x &gt;&gt; <span class="hljs-number">8</span> &amp; <span class="hljs-number">0xff</span>]) + S[<span class="hljs-number">3</span>][x &amp; <span class="hljs-number">0xff</span>];<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">blowfish_encrypt</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span>* L, <span class="hljs-keyword">uint32_t</span>* R)</span> </span>{<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">short</span> r = <span class="hljs-number">0</span>; r &lt; <span class="hljs-number">16</span>; r++) {<br><br>*L = *L ^ P[r];<br>*R = f(*L) ^ *R;<br>swap(L, R);<br>}<br>swap(L, R);<br>*R = *R ^ P[<span class="hljs-number">16</span>];<br>*L = *L ^ P[<span class="hljs-number">17</span>];<br>}<br><br><span class="hljs-comment">//void blowfish_decrypt(uint32_t* L, uint32_t* R) { // 网上一般采用的解密方法  感觉有点别扭</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//for (short r = 17; r &gt; 1; r--) {</span><br><span class="hljs-comment">//*L = *L ^ P[r];</span><br><span class="hljs-comment">//*R = f(*L) ^ *R;</span><br><span class="hljs-comment">//swap(L, R);</span><br><span class="hljs-comment">//}</span><br><span class="hljs-comment">//swap(L, R); </span><br><span class="hljs-comment">//*R = *R ^ P[1];</span><br><span class="hljs-comment">//*L = *L ^ P[0];</span><br><span class="hljs-comment">//}</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">blowfish_decrypt</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span>* L, <span class="hljs-keyword">uint32_t</span>* R)</span> </span>{<br>*L ^= P[<span class="hljs-number">17</span>];<br>*R ^= P[<span class="hljs-number">16</span>];<br>swap(L, R);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">short</span> r = <span class="hljs-number">15</span>; r &gt;= <span class="hljs-number">0</span>; r--) {<br>*L = *L ^ f(*R);<br>*R ^= P[r];<br>swap(L, R);<br>}<br>}<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">blowfish_init</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* key, <span class="hljs-keyword">int</span> key_len)</span> </span>{<br><span class="hljs-comment">/* initialize P box w/ key*/</span><br><span class="hljs-keyword">uint32_t</span> k;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">short</span> i = <span class="hljs-number">0</span>, p = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">18</span>; i++)<br>{<br>k = key[i % key_len];<br>P[i] ^= k;<br>}<br><span class="hljs-comment">/* blowfish key expansion (521 iterations) */</span><br><span class="hljs-keyword">uint32_t</span> l = <span class="hljs-number">0x00</span>, r = <span class="hljs-number">0x00</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">short</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">18</span>; i += <span class="hljs-number">2</span>)<br>{<br>blowfish_encrypt(&amp;l, &amp;r);<br>P[i] = l;<br>P[i + <span class="hljs-number">1</span>] = r;<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">short</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) <span class="hljs-comment">//512次</span><br>{<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">short</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">256</span>; j += <span class="hljs-number">2</span>)<br>{<br>blowfish_encrypt(&amp;l, &amp;r); S[i][j] = l;<br>S[i][j + <span class="hljs-number">1</span>] = r;<br>}<br>}<br>}<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> key[<span class="hljs-number">4</span>] = { <span class="hljs-number">0x12233445</span>,<span class="hljs-number">0xDEADBEEF</span>,<span class="hljs-number">0x90223344</span>,<span class="hljs-number">0x88112243</span> };<br>blowfish_init(key, <span class="hljs-number">4</span>);<br><br><span class="hljs-keyword">uint32_t</span> enc[<span class="hljs-number">8</span>] = { <span class="hljs-number">0x7187C938</span>, <span class="hljs-number">0xCDE138C1</span>, <span class="hljs-number">0x3DBA6F8C</span>, <span class="hljs-number">0x4E68D12A</span>, <span class="hljs-number">0xA7FB22EE</span>, <span class="hljs-number">0x52E73F49</span>, <span class="hljs-number">0x81E16485</span>, <span class="hljs-number">0x753D87D7</span> };<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i += <span class="hljs-number">1</span>)<br>blowfish_decrypt(enc + <span class="hljs-number">7</span> - i, enc + i);<br><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s"</span>, (<span class="hljs-keyword">char</span>*)enc);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>当然秘钥初始化是与输入无关的，通过动调来拿到初始化后的扩展盒和秘钥解密可能会更快。</p><hr><p>最后，某些人现在终于有自己的博客啦，用re专项来纪念一下，也是最近鸽了老久的比赛，现在终于完结撒花咯，还有一堆比赛有待复现，路途尚远，还要继续前行！</p>]]></content>
    
    
    <categories>
      
      <category>RE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
