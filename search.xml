<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PinTool-CPU侧信道</title>
      <link href="/2021/12/31/PinTool-CPU%E4%BE%A7%E4%BF%A1%E9%81%93/"/>
      <url>/2021/12/31/PinTool-CPU%E4%BE%A7%E4%BF%A1%E9%81%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以2021SCTF的Low-RE为主，初探pintool技术，也对RE手段有了新的认识</p></blockquote><h1 id="IntelPin的安装"><a href="#IntelPin的安装" class="headerlink" title="IntelPin的安装"></a>IntelPin的安装</h1><blockquote><p>Pin 是 Intel 公司研发的一个动态二进制插桩框架，可以在二进制程序运行过程中插入各种函数，以监控程序每一步的执行。</p></blockquote><h2 id="条件准备"><a href="#条件准备" class="headerlink" title="条件准备"></a>条件准备</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、Visual Studio Community <span class="number">2019</span> Edition</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、Cygwin<span class="number">'</span>s <span class="number">64</span>-bit</span><br><span class="line"><span class="comment">//https://cygwin.com/install.html</span></span><br><span class="line"><span class="comment">//需要再安装时选择make gcc-g++的包，非默认</span></span><br><span class="line">    </span><br><span class="line"><span class="number">3</span>、Intel Pin</span><br><span class="line"><span class="comment">//https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-binary-instrumentation-tool-downloads.html</span></span><br><span class="line"><span class="comment">//版本可以在3.18 - 3.20 或 3.11-3.13 有些对应版本的工具已经被编译为dll在git上</span></span><br></pre></td></tr></tbody></table></figure><h3 id="VS"><a href="#VS" class="headerlink" title="VS"></a>VS</h3><p>不过要记录VS的vcvars32/64.bat的存放路径，找到VS存放的位置，例如。</p><blockquote><p>“F:\visual studio2019\VC\Auxiliary\Build”<br>build文件夹下有这两个bat文件</p></blockquote><h3 id="Cygwin"><a href="#Cygwin" class="headerlink" title="Cygwin"></a>Cygwin</h3><p>Cygwin是能在windows环境下执行linux的指令，不过make，gcc，g++等指令要自己下载。</p><p><img src="https://i.imgur.com/5fpdYVd.png"></p><p>view 选择FULL 搜索要安装的gcc-g++ 和 make 即可，小箭头选着版本，skip即跳过。</p><p><strong>下载完成后，将’D:\Cygwin\bin’添加到环境变量。</strong></p><p><strong>cygwin安装新包</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、重新运行安装程序</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、类似apt-get</span><br><span class="line"></span><br><span class="line"> apt-cyg install yourPackage</span><br></pre></td></tr></tbody></table></figure><h3 id="Intel-Pin"><a href="#Intel-Pin" class="headerlink" title="Intel Pin"></a>Intel Pin</h3><p><a href="https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-binary-instrumentation-tool-downloads.html">Intel pin官网下载</a></p><p><strong>版本可以选择3.18-3.20 / 3.10-3.13 有现成的工具</strong>。</p><p>完成下载后，将pin.exe所在的目录添加到环境变量。</p><blockquote><p>例如: “D:\pindir\pin”</p></blockquote><p>完成以上操作后，需要对pin\source\tools\ManualExamples的文件进行编译</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">x64</span><br><span class="line"></span><br><span class="line">pushd D:\pindir\pin\source\tools\ManualExamples</span><br><span class="line"><span class="comment">//选择对应位的bat文件</span></span><br><span class="line"></span><br><span class="line"><span class="string">"F:\visual studio2019\VC\Auxiliary\Build\vcvars64.bat"</span></span><br><span class="line"></span><br><span class="line">make all 或 make TARGET=intel64 <span class="comment">//等待即可</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x86</span><br><span class="line"></span><br><span class="line">pushd D:\pindir\pin\source\tools\ManualExamples</span><br><span class="line"><span class="comment">//选择对应位的bat文件</span></span><br><span class="line"></span><br><span class="line"><span class="string">"F:\visual studio2019\VC\Auxiliary\Build\vcvars64.bat"</span></span><br><span class="line"></span><br><span class="line">make all 或 make TARGET=ia32 <span class="comment">//等待即可</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>编译成功后，会在ManualExamples目录下生成两个目录，里面的dll 文件即用到的pintools。</strong></p><blockquote><p>使用语法<br>pin -t inscount0.dll – test.exe</p></blockquote><p>单独把pintool的dll文件放到与目标PE文件同目录下，打开cmd输入指令即可。</p><p><strong>完成上述操作后，Intel Pin的一些常用pindll即可自由使用。</strong></p><p>有关pin的更多知识详见:<a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/5.2.1_pin.html#pin-%E5%9C%A8-ctf-%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/5.2.1_pin.html#pin-%E5%9C%A8-ctf-%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8</a></p><h1 id="Pin在CTF中的使用"><a href="#Pin在CTF中的使用" class="headerlink" title="Pin在CTF中的使用"></a>Pin在CTF中的使用</h1><blockquote><p>根据做题经验，往往加密后flag的check是逐个比对，也就是较接近明文的输入执行的指令数目越多，或用比较次数来反映，根据这一特性，有了pin的inscount的辅助，我们便能通过反馈的指令执行数目来爆破flag。</p></blockquote><h2 id="low-re"><a href="#low-re" class="headerlink" title="low_re"></a>low_re</h2><blockquote><p>题目附件在文末。</p></blockquote><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1640960133/blog_img/%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/sctf-lowre_etmaja.png"></p><p>VM保护壳，64位程序，脱起壳来就比较麻烦，不过x64dbg能直接定位入口点dump出，但脱壳后的程序拖入IDA的逻辑也看不出如何执行。</p><p>strings窗口有线索，有些hash和flag的提示输入，也难猜出加密算法如何，起初尝试动调，虽然了解到是在调用py文件执行加密，并且找到了几个关键函数，但是还是发现不了加密过程。</p><blockquote><p>由此引入一种新的RE方式，静态和动态都无感，就尝试pintool来暴破一下。</p></blockquote><h3 id="爆破输入长度"><a href="#爆破输入长度" class="headerlink" title="爆破输入长度"></a>爆破输入长度</h3><p>为了让输出效果更直观一些，修改inscount0.cpp编译出mycount64.dll,(自带的是写入到文件)。</p><blockquote><p>inscount1(BB级插桩) 与 inscount0(ins级插桩) 效果相同，但 inscount1 速度更快，实际解题时可以用 inscount1 代替 inscount0</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">VOID <span class="title">Fini</span><span class="params">(INT32 code, VOID *v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// Write to a file since cout and cerr maybe closed by the application</span></span><br><span class="line">    OutFile.setf(ios::showbase);</span><br><span class="line">    OutFile &lt;&lt; <span class="string">"Count "</span> &lt;&lt; icount &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Count "</span> &lt;&lt; icount &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//this 结果输出</span></span><br><span class="line">    OutFile.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>根据hash的条数来看输入的位数不会太多，先用mycount爆破一下不同输入位数，因为程序一般都会检测一下输入的长度，如果长度正确反馈的指令数也会更多。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen,PIPE</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">pinInit = <span class="keyword">lambda</span> tool,pe: Popen([<span class="string">'pin'</span>,<span class="string">'-t'</span>,tool,<span class="string">'--'</span>,pe],stdin=PIPE,stdout=PIPE)</span><br><span class="line">pinWrite = <span class="keyword">lambda</span>  cont : pin.stdin.write(cont)</span><br><span class="line">pinRead = <span class="keyword">lambda</span> : pin.communicate()[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    last_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        pin = pinInit(<span class="string">"mycount64"</span>,<span class="string">"low_re.exe"</span>)</span><br><span class="line">        pinWrite(<span class="string">b"a"</span>*i+<span class="string">b'\n'</span>)  <span class="comment">#  换行前即输入内容</span></span><br><span class="line">        _count = <span class="built_in">int</span>(pinRead().split(<span class="string">b"Count "</span>)[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"inputlen({:2d}) -&gt; cout({}) -&gt; delta({})"</span>.<span class="built_in">format</span>(i,_count,_count-last_count))</span><br><span class="line">        last_count=_count</span><br></pre></td></tr></tbody></table></figure><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1640960688/blog_img/%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/lowre1_cqg80x.png"></p><p>可见在输入长度为17时返回的指令数目明显多于其他长度，故flag大致长为17。</p><h3 id="爆破输入内容"><a href="#爆破输入内容" class="headerlink" title="爆破输入内容"></a>爆破输入内容</h3><p>也是根据反馈指令数目最多来估计为正确字符。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen,PIPE</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">pinInit = <span class="keyword">lambda</span> tool,pe: Popen([<span class="string">'pin'</span>,<span class="string">'-t'</span>,tool,<span class="string">'--'</span>,pe],stdin=PIPE,stdout=PIPE)</span><br><span class="line">pinWrite = <span class="keyword">lambda</span>  cont : pin.stdin.write(cont)</span><br><span class="line">pinRead = <span class="keyword">lambda</span> : pin.communicate()[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    last_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> string.printable: <span class="comment">#从可打印字符中爆破</span></span><br><span class="line">        pin = pinInit(<span class="string">"mycount64"</span>,<span class="string">"low_re.exe"</span>)</span><br><span class="line">        pinWrite(i.encode()+<span class="string">b'*'</span>*<span class="number">16</span>+<span class="string">b'\n'</span>)  <span class="comment">#  换行前即输入内容</span></span><br><span class="line">        _count = <span class="built_in">int</span>(pinRead().split(<span class="string">b"Count "</span>)[<span class="number">1</span>])</span><br><span class="line">        <span class="comment">#print("inputlen({:2d}) -&gt; cout({}) -&gt; delta({})".format(i,_count,_count-last_count))</span></span><br><span class="line">        <span class="comment">#last_count=_count</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Count(%s) : %d'</span>%(i,_count))</span><br><span class="line"><span class="comment"># ***************** -&gt;624221257</span></span><br><span class="line"><span class="comment"># S**************** -&gt;659084533</span></span><br><span class="line"><span class="comment"># S1*************** -&gt;699517166</span></span><br></pre></td></tr></tbody></table></figure><p>如下图，第一个字符为S时指令数目最多，按照如下思路爆破。</p><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1640960965/blog_img/%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/lowre2_eygakr.png"></p><p>单由主线程爆破会比较慢，初涉时跑了1个多小时，了解多线程后，用python实现多线程的爆破。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen,PIPE</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">pinInit = <span class="keyword">lambda</span> tool,pe: Popen([<span class="string">'pin'</span>,<span class="string">'-t'</span>,tool,<span class="string">'--'</span>,pe],stdin=PIPE,stdout=PIPE)</span><br><span class="line">last_count=<span class="number">695980376</span> <span class="comment">#当前字符对应的指令数</span></span><br><span class="line">flag=<span class="string">'S1'</span> <span class="comment">#测试的字符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pintool</span>(<span class="params">s</span>):</span></span><br><span class="line">    pin = pinInit(<span class="string">"mycount64"</span>, <span class="string">"low_re.exe"</span>)</span><br><span class="line">    pin.stdin.write(s.encode())</span><br><span class="line">    _count = <span class="built_in">int</span>(pin.communicate()[<span class="number">0</span>].split(<span class="string">b"Count "</span>)[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> _count</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boom</span>():</span></span><br><span class="line">        <span class="keyword">global</span> flag,last_count,Tcount</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            nows=q.get()</span><br><span class="line">            s=(flag+nows).ljust(<span class="number">17</span>,<span class="string">'*'</span>)+<span class="string">'\n'</span> <span class="comment">#换行代表输入</span></span><br><span class="line">            cout=pintool(s)</span><br><span class="line">            <span class="keyword">if</span> cout - last_count &gt; <span class="number">30000000</span>:<span class="comment">#设定值来判定输入是否正确</span></span><br><span class="line">                flag += nows</span><br><span class="line">                last_count = cout</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'now_str({}) -&gt; count({})'</span>.<span class="built_in">format</span>(flag, cout))</span><br><span class="line">                q.queue.clear()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment">#    q.queue.clear() 清除队列再赋值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setque</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> string.printable[:-<span class="number">2</span>]:<span class="comment">#</span></span><br><span class="line">        q.put(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    q = queue.Queue(<span class="number">100</span>)</span><br><span class="line">    setque(q)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(flag)!=<span class="number">17</span>:</span><br><span class="line">        <span class="keyword">if</span> q.empty():</span><br><span class="line">            setque(q)</span><br><span class="line">        <span class="keyword">while</span> threading.active_count()&lt;<span class="number">5</span>: <span class="comment">#维持活跃的多线程</span></span><br><span class="line">             t=threading.Thread(target=boom)</span><br><span class="line">             <span class="comment">#print(threading.active_count())</span></span><br><span class="line">             t.start()</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">now_str(S1) -&gt; count(<span class="number">695980376</span>)</span><br><span class="line">now_str(S1d) -&gt; count(<span class="number">735896918</span>)</span><br><span class="line">now_str(S1de) -&gt; count(<span class="number">773007592</span>)</span><br><span class="line">now_str(S1deC) -&gt; count(<span class="number">811103179</span>)</span><br><span class="line">now_str(S1deCh) -&gt; count(<span class="number">852675272</span>)</span><br><span class="line">now_str(S1deCh4) -&gt; count(<span class="number">885489938</span>)</span><br><span class="line">now_str(S1deCh4n) -&gt; count(<span class="number">927208181</span>)</span><br><span class="line">now_str(S1deCh4nn) -&gt; count(<span class="number">965470416</span>)</span><br><span class="line">now_str(S1deCh4nne) -&gt; count(<span class="number">1002501465</span>)</span><br><span class="line">now_str(S1deCh4nnel) -&gt; count(<span class="number">1035433103</span>)</span><br><span class="line">now_str(S1deCh4nnelA) -&gt; count(<span class="number">1074349914</span>)</span><br><span class="line">now_str(S1deCh4nnelAt) -&gt; count(<span class="number">1112107131</span>)</span><br><span class="line">now_str(S1deCh4nnelAtt) -&gt; count(<span class="number">1149152834</span>)</span><br><span class="line">now_str(S1deCh4nnelAtt@) -&gt; count(<span class="number">1192837040</span>)</span><br><span class="line">now_str(S1deCh4nnelAtt@c) -&gt; count(<span class="number">1231986313</span>)</span><br><span class="line"><span class="comment">//SCTF{S1deCh4nnelAtt@ck}</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hello challanger</span></span><br><span class="line"><span class="comment">please input your flag:</span></span><br><span class="line"><span class="comment">S1deCh4nnelAtt@ck</span></span><br><span class="line"><span class="comment">you are right</span></span><br><span class="line"><span class="comment">Count 1227060385*/</span></span><br></pre></td></tr></tbody></table></figure><p>在跑到最后一个字符时会有些反常，可以单独再爆破或者根据大意猜出为attack。</p><blockquote><p>反思:本题有着VM壳，或者如果遇到大量的混淆，在flag长度较短的情况下，pintool无疑是一大利器。</p></blockquote><p>有些程序判断flag正误会有congra或wrong!等提示，返回值在pin.communicate()元组中，也可以用于爆破。</p><h2 id="check判断计数"><a href="#check判断计数" class="headerlink" title="check判断计数"></a>check判断计数</h2><blockquote><p>有时正确或者错误的输入在执行指令数上没有较大差别，那么第一种方式就不太适用了，但是程序如果是对输入逐个check的话，并且我们IDA中已知判断代码的地址，我们也能通过改写pintool来计数。</p></blockquote><p>例如:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length(provided_flag); i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (main_mapanic(provided_flag[i]) != constant_binary_blob[i])</span><br><span class="line">{</span><br><span class="line">bad_boy();</span><br><span class="line"><span class="built_in">exit</span>();</span><br><span class="line">}</span><br><span class="line">goodboy();</span><br><span class="line">}</span><br><span class="line"><span class="comment">//节选自前辈博客</span></span><br></pre></td></tr></tbody></table></figure><p>可见是逐个对flag进行比较的，即cmp处，我们可以以此为参考，每当程序执行到cmp一次计数加一，因为如果比对错误程序就会退出，由此可以由count的大小来判断输入的正确性。</p><p>同样，对inscount0进行修改并编译成新的pintool。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">更改前：</span><br><span class="line"><span class="function">VOID <span class="title">docount</span><span class="params">()</span> </span>{ icount++; }</span><br><span class="line">更改后：</span><br><span class="line"><span class="function">VOID <span class="title">docount</span><span class="params">(<span class="keyword">void</span> *ip)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="comment">// .text:000000000047B96E  cmp al, cl; #代码比较处</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)ip == <span class="number">0x000000000047B96E</span>)</span><br><span class="line"> icount++; </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>编写py脚本对程序进行pintool攻击即可。</p><blockquote><p>最近初涉二进制插桩技术和pintool的简单使用，某些地方可能有错误理解，同时多线程的脚本可能写的有点拉跨，还望师傅们指正。</p></blockquote><hr><p>参考:</p><p>[pin install]起初配置参考: <a href="https://www.cnblogs.com/mgdzy/p/13644475.html">https://www.cnblogs.com/mgdzy/p/13644475.html</a></p><p>[pin in ctf]<a href="https://m4x.fun/post/pin-in-ctf/">https://m4x.fun/post/pin-in-ctf/</a></p><p>[cpu侧信道]<a href="https://www.istt.org.cn/NewsDetail/2672118.html">https://www.istt.org.cn/NewsDetail/2672118.html</a></p><p>[多线程脚本编写]<a href="https://www.cnblogs.com/franknihao/p/6627857.html">https://www.cnblogs.com/franknihao/p/6627857.html</a></p><p>low_re链接：<a href="https://pan.baidu.com/s/17-1WMhu9g5scBQ-RO6MO9Q">https://pan.baidu.com/s/17-1WMhu9g5scBQ-RO6MO9Q</a><br>提取码：uuuu</p>]]></content>
      
      
      <categories>
          
          <category> RE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA dp和dq泄露</title>
      <link href="/2021/12/18/dp%E5%92%8Cdq%E6%B3%84%E9%9C%B2/"/>
      <url>/2021/12/18/dp%E5%92%8Cdq%E6%B3%84%E9%9C%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从一个[羊城杯 2020]Power密码题，引发的关于dp 和 dq泄露等有趣的问题。</p></blockquote><p><strong>题目本身就出的有漏洞，并且对dp泄露的危害有了更深的理解。</strong></p><blockquote><p><strong>其中的数学基础主要基于费马定理和简单的数论推导,成立以m小于p为前提</strong></p></blockquote><h3 id="1、-羊城杯-2020-Power"><a href="#1、-羊城杯-2020-Power" class="headerlink" title="1、[羊城杯 2020]Power"></a>1、[羊城杯 2020]Power</h3><p>题目如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p**<span class="number">4</span>*q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = gmpy2.lcm(p - <span class="number">1</span>, q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">dp = d % (p - <span class="number">1</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"dp = "</span> + <span class="built_in">str</span>(dp))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"c = "</span> + <span class="built_in">str</span>(c))</span><br><span class="line"></span><br><span class="line">y = <span class="number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span></span><br><span class="line"></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">x = <span class="number">2019</span>*p**<span class="number">2</span> + <span class="number">2020</span>*p**<span class="number">3</span> + <span class="number">2021</span>*p**<span class="number">4</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(g, x, y)</span><br><span class="line"><span class="built_in">print</span>( <span class="string">"c1 = "</span> + <span class="built_in">str</span>(c1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># dp = 379476973158146550831004952747643994439940435656483772269013081580532539640189020020958796514224150837680366977747272291881285391919167077726836326564473</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 57248258945927387673579467348106118747034381190703777861409527336272914559699490353325906672956273559867941402281438670652710909532261303394045079629146156340801932254839021574139943933451924062888426726353230757284582863993227592703323133265180414382062132580526658205716218046366247653881764658891315592607194355733209493239611216193118424602510964102026998674323685134796018596817393268106583737153516632969041693280725297929277751136040546830230533898514659714717213371619853137272515967067008805521051613107141555788516894223654851277785393355178114230929014037436770678131148140398384394716456450269539065009396311996040422853740049508500540281488171285233445744799680022307180452210793913614131646875949698079917313572873073033804639877699884489290120302696697425</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c1 = 78100131461872285613426244322737502147219485108799130975202429638042859488136933783498210914335741940761656137516033926418975363734194661031678516857040723532055448695928820624094400481464950181126638456234669814982411270985650209245687765595483738876975572521276963149542659187680075917322308512163904423297381635532771690434016589132876171283596320435623376283425228536157726781524870348614983116408815088257609788517986810622505961538812889953185684256469540369809863103948326444090715161351198229163190130903661874631020304481842715086104243998808382859633753938512915886223513449238733721777977175430329717970940440862059204518224126792822912141479260791232312544748301412636222498841676742208390622353022668320809201312724936862167350709823581870722831329406359010293121019764160016316259432749291142448874259446854582307626758650151607770478334719317941727680935243820313144829826081955539778570565232935463201135110049861204432285060029237229518297291679114165265808862862827211193711159152992427133176177796045981572758903474465179346029811563765283254777813433339892058322013228964103304946743888213068397672540863260883314665492088793554775674610994639537263588276076992907735153702002001005383321442974097626786699895993544581572457476437853778794888945238622869401634353220344790419326516836146140706852577748364903349138246106379954647002557091131475669295997196484548199507335421499556985949139162639560622973283109342746186994609598854386966520638338999059</span></span><br></pre></td></tr></tbody></table></figure><p>我们已知c，c1，dp，e 没有n，可能我们注意力比较容易被c1的约束所吸引。</p><p><strong>c1是由2^x mod y 生成的，其中x和p相关，y是一个非常大的数，如果没有模运算，一个简单log就能求出n， 在模运算下，这就上升为离散对数问题。</strong></p><p>我们可以通过sympy库的<code>discrete_log</code> 函数来求解，可p是一个512bit的数，X是非常大的，在5min左右python跑出，或许sagemath 会更快一点，这也要求之后要掌握一些有关离散对数的求解算法。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(sympy.discrete_log(y,c1,<span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure><p>参考用法:        <a href="https://www.pythonf.cn/read/109392">https://www.pythonf.cn/read/109392</a></p><p>离散对数算法: <a href="http://www.zbc53.top/archives/124/">http://www.zbc53.top/archives/124/</a></p><p><strong>假设 我们求出了X 之后X就是p的一个多次方程，可以用z3进行求解。</strong></p><p>求出p之后呢，我们还是没有n 并且没有q的相关信息，这时就要用到dp这一个条件。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">dp= d mod p-<span class="number">1</span></span><br><span class="line"><span class="comment">#两遍同乘e</span></span><br><span class="line">e*dp = e*d mod p -<span class="number">1</span> </span><br><span class="line"><span class="comment">#等价</span></span><br><span class="line">e*dp = e*d + k*(p-<span class="number">1</span>)    (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">根据我们钟爱的e*d = 1 mod phi n</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n= (p^4) *q</span></span><br><span class="line"><span class="string">phi(n) = (p^3)*(p-1)*q</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">有了这些前提,不妨让式(1) mod phin</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">e*d + k*(p-<span class="number">1</span>) mod phin = e*dp </span><br><span class="line"><span class="comment">#等价</span></span><br><span class="line"><span class="number">1</span> + k*(p-<span class="number">1</span>) = e*dp +  k*phin    phin=(p^<span class="number">3</span>)*(p-<span class="number">1</span>)*q  也是k<span class="string">'*(p-1)</span></span><br><span class="line"><span class="string">#整理 也就是</span></span><br><span class="line"><span class="string">e*dp = 1 + k1*(p-1)     (2)    #感觉出其中的倍数关系即可</span></span><br><span class="line"><span class="string">#此处标位式(2) 我们之后会重点用到</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">既然</span></span><br><span class="line"><span class="string">m ^ e = c mod n</span></span><br><span class="line"><span class="string">c^d mod n = m</span></span><br><span class="line"><span class="string">用到了欧拉定理</span></span><br><span class="line"><span class="string">a^(phin) mod n = 1 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">那么我们可以类似</span></span><br><span class="line"><span class="string">c ^ (dp) = m ^ (e*dp) = m ^ (1 + k1*(p-1))</span></span><br><span class="line"><span class="string">根据费马定理 a ^ (p-1) mod p = 1</span></span><br><span class="line"><span class="string">那么 c ^ dp  mod p = m</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">c ^ dp  mod p = m</span></span><br></pre></td></tr></tbody></table></figure><p>根据上述推导，拿到p，游戏就结束了。</p><ul><li>上述  c ^ dp  mod p = m 必须要满足 m &lt; p 或者近似接近 否则近乎不能求解  即 m = (c^dp mod p) + k*p</li></ul><p><strong>回顾一下解题思路，我们执着于解离散对数和高次方程不就是为了求p么，但总结一下上面无论是dp还是 c1 都是有关p的，两个方程求一个未知量，是不是有点奢侈了呢?</strong></p><p><strong>注意推导中的这个式子e<em>dp = 1 + k1</em>(p-1)！！！ e和dp已知，k未知但是 e<em>dp - 1 一定是 (p-1)的整数倍，并且e</em>dp-1为525个bit 是十分接近的，这完全可以爆破。</strong></p><p>脚本如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  gmpy2</span><br><span class="line"><span class="keyword">import</span> cmath</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">dp=<span class="number">379476973158146550831004952747643994439940435656483772269013081580532539640189020020958796514224150837680366977747272291881285391919167077726836326564473</span></span><br><span class="line">c=<span class="number">57248258945927387673579467348106118747034381190703777861409527336272914559699490353325906672956273559867941402281438670652710909532261303394045079629146156340801932254839021574139943933451924062888426726353230757284582863993227592703323133265180414382062132580526658205716218046366247653881764658891315592607194355733209493239611216193118424602510964102026998674323685134796018596817393268106583737153516632969041693280725297929277751136040546830230533898514659714717213371619853137272515967067008805521051613107141555788516894223654851277785393355178114230929014037436770678131148140398384394716456450269539065009396311996040422853740049508500540281488171285233445744799680022307180452210793913614131646875949698079917313572873073033804639877699884489290120302696697425</span></span><br><span class="line">ep=e*dp-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">1000000</span>):</span><br><span class="line">    <span class="keyword">if</span> ep % k ==<span class="number">0</span>:</span><br><span class="line">        p = (ep//k) +<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line">p=<span class="number">12131601165788024635030034921084070470053842112984866821070395281728468805072716002494427632757418621194662541766157553264889658892783635499016425528807741</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,dp,p)))</span><br></pre></td></tr></tbody></table></figure><p><strong>这样也能达到解出p的目的，并且直接用 pow(c,dp,p),求解，用到了两个二级推导结论。</strong></p><p><strong>这也能透露出当m&lt;p时e*dp泄露的危害，如果能通过dp爆破出p，或者直接拿到p ，则直接用dp 和 p，作为私钥和公钥解密即可。</strong></p><p><strong>dp，dq本身就是为了快速解密服务的，也就决定了，大多情况下的p和q是非常大的，往往m会比p要小很多，如果出题人在dp泄露时忽视了这一点，那么可能会出现非预期。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在m&gt;&gt;p 的dp泄露就需要给出e和n，以便我们借助p来分解n</span></span><br><span class="line"><span class="comment">#以网上的一个题目为例</span></span><br><span class="line">(<span class="string">'dp='</span>, <span class="string">'0x7f1344a0b8d2858492aaf88d692b32c23ef0d2745595bc5fe68de384b61c03e8fd054232f2986f8b279a0105b7bee85f74378c7f5f35c3fd505e214c0738e1d9'</span>)</span><br><span class="line">(<span class="string">'n='</span>, <span class="string">'0x5eee1b4b4f17912274b7427d8dc0c274dc96baa72e43da36ff39d452ff6f2ef0dc6bf7eb9bdab899a6bb718c070687feff517fcf5377435c56c248ad88caddad6a9cefa0ca9182daffcc6e48451d481f37e6520be384bedb221465ec7c95e2434bf76568ef81e988039829a2db43572e2fe57e5be0dc5d94d45361e96e14bd65L'</span>)</span><br><span class="line">(<span class="string">'e='</span>, <span class="string">'0x10001'</span>)</span><br><span class="line">(<span class="string">'c='</span>, <span class="string">'0x510fd8c3f6e21dfc0764a352a2c7ff1e604e1681a3867480a070a480f722e2f4a63ca3d7a92b862955ab4be76cde43b51576a128fba49348af7a6e34b335cfdbda8e882925b20503762edf530d6cd765bfa951886e192b1e9aeed61c0ce50d55d11e343c78bb617d8a0adb7b4cf3b913ee85437191f1136e35b94078e68bee8dL'</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="1、p-lt-m-Quic-Crack"><a href="#1、p-lt-m-Quic-Crack" class="headerlink" title="1、p<m Quic Crack"></a>1、p&lt;m Quic Crack</h4><p><strong>p的位数可以直接观察dp得出，接近512bit，64字节，一般flag在30-50左右甚至更短，即m&lt;p</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">dp=<span class="number">0x7f1344a0b8d2858492aaf88d692b32c23ef0d2745595bc5fe68de384b61c03e8fd054232f2986f8b279a0105b7bee85f74378c7f5f35c3fd505e214c0738e1d9</span></span><br><span class="line"></span><br><span class="line">n=<span class="number">0x5eee1b4b4f17912274b7427d8dc0c274dc96baa72e43da36ff39d452ff6f2ef0dc6bf7eb9bdab899a6bb718c070687feff517fcf5377435c56c248ad88caddad6a9cefa0ca9182daffcc6e48451d481f37e6520be384bedb221465ec7c95e2434bf76568ef81e988039829a2db43572e2fe57e5be0dc5d94d45361e96e14bd65</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">c=<span class="number">0x510fd8c3f6e21dfc0764a352a2c7ff1e604e1681a3867480a070a480f722e2f4a63ca3d7a92b862955ab4be76cde43b51576a128fba49348af7a6e34b335cfdbda8e882925b20503762edf530d6cd765bfa951886e192b1e9aeed61c0ce50d55d11e343c78bb617d8a0adb7b4cf3b913ee85437191f1136e35b94078e68bee8d</span></span><br><span class="line">edp=e*dp - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10000000</span>):</span><br><span class="line">    <span class="keyword">if</span> edp%k==<span class="number">0</span>:</span><br><span class="line">        p= edp//k + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,dp,p)))</span><br></pre></td></tr></tbody></table></figure><p>当然这只是一种特殊情况，但是网上大多数关于dp泄露题目貌似都存在这个问题。</p><h4 id="2、通用解法"><a href="#2、通用解法" class="headerlink" title="2、通用解法"></a>2、通用解法</h4><p><strong>通解，当然rsa加密对密文本身就限制了m是要比n小的</strong></p><p>所以分解n直接解就得了，既然上脚本我们已经测试出了p ，那么q = n//p 即可。</p><p>综上，综合两种脚本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">dp=<span class="number">0x7f1344a0b8d2858492aaf88d692b32c23ef0d2745595bc5fe68de384b61c03e8fd054232f2986f8b279a0105b7bee85f74378c7f5f35c3fd505e214c0738e1d9</span></span><br><span class="line"></span><br><span class="line">n=<span class="number">0x5eee1b4b4f17912274b7427d8dc0c274dc96baa72e43da36ff39d452ff6f2ef0dc6bf7eb9bdab899a6bb718c070687feff517fcf5377435c56c248ad88caddad6a9cefa0ca9182daffcc6e48451d481f37e6520be384bedb221465ec7c95e2434bf76568ef81e988039829a2db43572e2fe57e5be0dc5d94d45361e96e14bd65</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">c=<span class="number">0x510fd8c3f6e21dfc0764a352a2c7ff1e604e1681a3867480a070a480f722e2f4a63ca3d7a92b862955ab4be76cde43b51576a128fba49348af7a6e34b335cfdbda8e882925b20503762edf530d6cd765bfa951886e192b1e9aeed61c0ce50d55d11e343c78bb617d8a0adb7b4cf3b913ee85437191f1136e35b94078e68bee8d</span></span><br><span class="line">edp=e*dp - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10000000</span>):</span><br><span class="line">    <span class="keyword">if</span> edp%k==<span class="number">0</span>:</span><br><span class="line">        p= edp//k + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,dp,p)).decode(<span class="string">'utf-8'</span>)) <span class="comment">#flag肯定是可见字符</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'Quick Crack Suc!'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                q=n//p</span><br><span class="line">                phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">                d=gmpy2.invert(e,phi)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'yes!'</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p><strong>测试，用如下式例来测试 m &gt; p的情况</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dp = <span class="number">14423533367739841601650555272663543354837347609362352488761411482549189398193</span></span><br><span class="line">p =  <span class="number">69901287164206610888661720099426949703910023683707793762919220907478091073681</span></span><br><span class="line">c=  <span class="number">2262919207276468849681578487794992281448594044416435512543882157738828978766101685798623343531305619235784170849036103143665025760464116190980363198608567</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=<span class="number">5965322435025945026021165385608956120433036321627501574655956870755806607342365635361310529607383516087208412532082338428923031616470920911896483167491881</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2、dp-dq泄露"><a href="#2、dp-dq泄露" class="headerlink" title="2、dp dq泄露"></a>2、dp dq泄露</h3><p><strong>dp 和 dq泄露 和dp泄露有着异曲同工之妙，不过忽略了m &lt; p / q 就成了纸老虎。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c: <span class="number">95272795986475189505518980251137003509292621140166383887854853863720692420204142448424074834657149326853553097626486371206617513769930277580823116437975487148956107509247564965652417450550680181691869432067892028368985007229633943149091684419834136214793476910417359537696632874045272326665036717324623992885</span></span><br><span class="line">p: <span class="number">11387480584909854985125335848240384226653929942757756384489381242206157197986555243995335158328781970310603060671486688856263776452654268043936036556215243</span></span><br><span class="line">q: <span class="number">12972222875218086547425818961477257915105515705982283726851833508079600460542479267972050216838604649742870515200462359007315431848784163790312424462439629</span></span><br><span class="line">dp: <span class="number">8191957726161111880866028229950166742224147653136894248088678244548815086744810656765529876284622829884409590596114090872889522887052772791407131880103961</span></span><br><span class="line">dq: <span class="number">3570695757580148093370242608506191464756425954703930236924583065811730548932270595568088372441809535917032142349986828862994856575730078580414026791444659</span></span><br></pre></td></tr></tbody></table></figure><p>按之前的算法 是要用中国剩余定理求d的</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp = d mod p-<span class="number">1</span></span><br><span class="line">dq = d mod q-<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h4 id="1、解密思路-Crt"><a href="#1、解密思路-Crt" class="headerlink" title="1、解密思路 + Crt"></a>1、解密思路 + Crt</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">m1 = c^dp mod p</span><br><span class="line">m2 = c^dq mod q</span><br><span class="line">dp = d mod p-<span class="number">1</span>   -&gt; dp = d + k*(p-<span class="number">1</span>)</span><br><span class="line">dq = q mod q-<span class="number">1</span></span><br><span class="line"><span class="comment">#根据 费马可得 c^dp mod p = c^d mod p</span></span><br><span class="line"><span class="comment">#同理 c^dq mod q = c^d mod q </span></span><br><span class="line">c^d mod p = m1</span><br><span class="line">c^d mod q = m2</span><br><span class="line"></span><br><span class="line">构造 x = k1*m1 + k2*m2</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>)k1 mod p =<span class="number">1</span></span><br><span class="line">(<span class="number">2</span>)k1 mod q =<span class="number">0</span></span><br><span class="line"></span><br><span class="line">k1 = k*q 带入(<span class="number">1</span>)</span><br><span class="line">k = q^(-<span class="number">1</span>) mod p </span><br><span class="line">即 k1 = (q ^(-<span class="number">1</span>) mod p) *q</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">推广到一般 如果 在剩余定理中</span></span><br><span class="line"><span class="string">x mod a1 = b1 </span></span><br><span class="line"><span class="string">x mod a2 = b2</span></span><br><span class="line"><span class="string">x mod a3 = b3</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">那么构造的数 m = k1*b1 + k2*b2 + ... kn * bn</span></span><br><span class="line"><span class="string">k1 = ((a2 *a3 *..an)^(-1) mod a1) * (a2 *a3 *..an)</span></span><br><span class="line"><span class="string">k2 = ((a1 *a3 *..an)^(-1) mod a1) * (a2 *a3 *..an)</span></span><br><span class="line"><span class="string"><span class="meta">... </span>如此规律</span></span><br><span class="line"><span class="string">M=a1*a2*..an</span></span><br><span class="line"><span class="string">Mi = M / ai</span></span><br><span class="line"><span class="string">Mi' = gmpy2.invert(Mi,ai)</span></span><br><span class="line"><span class="string">Mi * Mi' * bi 每一项</span></span><br><span class="line"><span class="string">综合要%M  一下</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>即</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">dp= <span class="number">90494486973243104756298311175705002887155440121025946664275790548694955799661434870163629541771658812502682012435200659355928618529521731475360236486362525996535354732687624609637012830178545914960485330748345108757203508531117591067570383564779625954776907685968592668868046507450242047759226407026094726359</span></span><br><span class="line">dq= <span class="number">92386717102324384872139253931247976320472847834037799716676564640678692924258053130751618730959510913784801723023536527134208843358920592320351399005428347188639433875570867152865970587272904695272790831679276818402117343413503376057524788386479263579869430615501089905630519162146030369086836183772975252551</span></span><br><span class="line">p= <span class="number">121869669684596731118740111360803257498670698122183387353481580136405322481841982461820301261370579505460038281590785837096967719889404913176714663774999789266522508163678949469953184327222227297952119212490499582581953510522212981687122483764873187827531047946130999532741388680549345732675732040579796067001</span></span><br><span class="line">q= <span class="number">128363031923139297392077349407719417788135630403499671848196425800900870531452570499668481104884553795224784931947824885511134525485570129640119439950191944938407656926280993408854767711557863016197167505998324659906146937423415404059310560359693643987781862684489401368519777953281060013045590132161625607377</span></span><br><span class="line">c= <span class="number">4176193749773450562408160796325873473193702511560805285554329767573726211097194419198463203488792792756598428753745425419950423161673497255820731183746106463781291156892140581651301528184812357534808298071893380519977926677138246941946185699346532140641376461516107672722425971178865758049759985915001009787241295292157744353554548314911531918044654676691927347018033509499136103964942830581407087547565204232556314726045307279963709599952745342811947421707024572981812906869557834491207590418553244020621858083633564878305733114484857827620268881100166090837841224767358579366482347136224695333980041913268394994302</span></span><br><span class="line">m1 = <span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c,dq,q)</span><br><span class="line">d = gmpy2.invert(q,p)*(q)*m1 + gmpy2.invert(p,q)*(p)*m2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(d%(p*q)))</span><br></pre></td></tr></tbody></table></figure><p>用python的库sympy来实现crt</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> * <span class="comment">#从sympy数论库中导入函数</span></span><br><span class="line">crt([p,q],[m1,m2])</span><br><span class="line"><span class="comment"># 第一个参数是模数组，第二个参数是余数组</span></span><br><span class="line"><span class="comment"># 返回值是一个元组 第一个数是求解的m值，第二个数是所有模数的乘积</span></span><br><span class="line"></span><br><span class="line">m=crt([p,q],[m1,m2])[<span class="number">0</span>] <span class="comment">#得到解即可</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m%n))</span><br></pre></td></tr></tbody></table></figure><p>sympy库中有很多方便的函数，有大致印象百度即可。</p><h4 id="2、测试用例"><a href="#2、测试用例" class="headerlink" title="2、测试用例"></a>2、测试用例</h4><p>反例当messaege&gt;q</p><p>注意m要小于n</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p=getPrime(<span class="number">256</span>)</span><br><span class="line">q=getPrime(<span class="number">256</span>)</span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">dp=d%(p-<span class="number">1</span>)</span><br><span class="line">dq=d%(q-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'dp = '</span>,dp)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'p = '</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'dq = '</span>,dq)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'q= '</span>,q)</span><br><span class="line">m=<span class="string">b'flag{If_the message_is_larger_than_prime_end!!!}'</span></span><br><span class="line">c=bytes_to_long(m)</span><br><span class="line">c= <span class="built_in">pow</span>(c,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c= '</span>,c)</span><br></pre></td></tr></tbody></table></figure><p>如果继续解密,则是乱码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">dp = <span class="number">14423533367739841601650555272663543354837347609362352488761411482549189398193</span></span><br><span class="line">p =  <span class="number">69901287164206610888661720099426949703910023683707793762919220907478091073681</span></span><br><span class="line">c=  <span class="number">2262919207276468849681578487794992281448594044416435512543882157738828978766101685798623343531305619235784170849036103143665025760464116190980363198608567</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,dp,p)))</span><br><span class="line"><span class="comment"># b'Y\x83^\xa4\xf2\xbaC\xbfY\xa0\x9a!\x07^\xb0\x12\xaa-\xa0\x10\xf8;\x9b\xb1\xaaF5\x9f\xb2\x952\xc0'</span></span><br></pre></td></tr></tbody></table></figure><p>中国剩余定理,成功解决</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">dp =  <span class="number">14423533367739841601650555272663543354837347609362352488761411482549189398193</span></span><br><span class="line">p =  <span class="number">69901287164206610888661720099426949703910023683707793762919220907478091073681</span></span><br><span class="line">dq =  <span class="number">32437946587531699347725552012753985094383131578752766354933176932787801620073</span></span><br><span class="line">q=  <span class="number">85339235900086908600694050911639754370783480963298143334400691126173744722201</span></span><br><span class="line">c=  <span class="number">2262919207276468849681578487794992281448594044416435512543882157738828978766101685798623343531305619235784170849036103143665025760464116190980363198608567</span></span><br><span class="line">m1 = <span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c,dq,q)</span><br><span class="line">d = gmpy2.invert(q,p)*(q)*m1 + gmpy2.invert(p,q)*(p)*m2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(d%(p*q)))</span><br><span class="line"><span class="comment">#b'flag{If_the message_is_larger_than_prime_end!!!}'</span></span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>推导过程中的中间结论也能对解密有巨大贡献，在进行加密时，还要考虑密文和素因数以及模数的大小，防止出现非预期的漏洞。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021NCTF-Re</title>
      <link href="/2021/12/01/2021NCTF-RE/"/>
      <url>/2021/12/01/2021NCTF-RE/</url>
      
        <content type="html"><![CDATA[<h1 id="NCTF-RE"><a href="#NCTF-RE" class="headerlink" title="NCTF-RE"></a>NCTF-RE</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p><strong>送IDA又送flag</strong></p><p><strong>欢迎来到NCTF-逆向工程(Reverse Engineering)</strong><br><strong>这里可能有你需要的工具:</strong><br><strong>ida pro 7.6 :</strong></p><p><strong>链接：<a href="https://pan.baidu.com/s/1bV2HjBBX0bwwtzORqhErOg">https://pan.baidu.com/s/1bV2HjBBX0bwwtzORqhErOg</a></strong></p><p><strong>提取码：o49x</strong></p><h2 id="Shadowbringer"><a href="#Shadowbringer" class="headerlink" title="Shadowbringer"></a>Shadowbringer</h2><p>c++64位程序，ida载入</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(v4, <span class="string">"U&gt;F2UsQXN`5sXMELT=:7M_2&lt;X]^1ThaWF0=KM?9IUhAsTM5:T==_Ns&amp;&lt;Vhb!"</span>, &amp;v6);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::~allocator(&amp;v6);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(refptr__ZSt4cout, <span class="string">"Welcome.Please input your flag:\n"</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>&gt;(refptr__ZSt3cin, (<span class="built_in">std</span>::<span class="built_in">string</span> *)input);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)v8, (<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> *)input);<span class="comment">// strcpy</span></span><br><span class="line">  base64encode1((<span class="built_in">std</span>::<span class="built_in">string</span> *)v7, (<span class="built_in">std</span>::<span class="built_in">string</span> *)v8);<span class="comment">// 换表的base64</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>=((<span class="built_in">std</span>::<span class="built_in">string</span> *)input, (<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> *)v7);<span class="comment">// 赋值 第一层密文</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)v7);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)v8);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)v10, (<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> *)input);<span class="comment">// 复制一个对象v10</span></span><br><span class="line">  base64encode2((<span class="built_in">std</span>::<span class="built_in">string</span> *)v9, (<span class="built_in">std</span>::<span class="built_in">string</span> *)v10); <span class="comment">// base64换表 两次 不同的表</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>=((<span class="built_in">std</span>::<span class="built_in">string</span> *)input, (<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> *)v9);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)v9);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)v10);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="keyword">operator</span>==&lt;<span class="keyword">char</span>&gt;(input, v4) )</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(refptr__ZSt4cout, <span class="string">"Right."</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(refptr__ZSt4cout, <span class="string">"Wrong."</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)v4);</span><br></pre></td></tr></tbody></table></figure><p>主要用到了c++ string类来进行处理，结合动调，大致经过了两次base64变表加密，在和v4进行比较。<br><strong>第一组表，</strong><br><strong>‘#$%&amp;’,27h,’()*+,-.s0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[h]’+’^_`ab’</strong></p><p><strong>第二组表</strong><br><strong>‘ba`_^]h[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210s.-,+*)(‘,27h,’&amp;’’+’%$#’</strong></p><p>两次加密的代码大致相同，主要通过表的长度和每次处理的二进制长度判断为base64.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;8ull&gt;::to_string(v13, v14);     <span class="comment">// 转为2进制</span></span><br><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; (<span class="keyword">unsigned</span> __int64)<span class="built_in">std</span>::<span class="built_in">string</span>::size((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v9); j += <span class="number">6</span> )<span class="comment">// 6个二进制一组</span></span><br><span class="line">v7 = (<span class="keyword">char</span> *)<span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>[](&amp;hisoralce, v6);<span class="comment">//表索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( (<span class="built_in">std</span>::<span class="built_in">string</span>::size(a1) &amp; <span class="number">3</span>) != <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>&gt;(v19, a1, <span class="string">'!'</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>=(a1, (<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> *)v19);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)v19);</span><br><span class="line">  }</span><br><span class="line"><span class="comment">//不为4的倍数就不断+!</span></span><br></pre></td></tr></tbody></table></figure><p>了解流程后写解密脚本即可</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">table1=<span class="string">'#$%&amp;'</span>+<span class="string">'\x27'</span>+<span class="string">'()*+,-.s0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[h]'</span>+<span class="string">'^_`ab'</span></span><br><span class="line">table2=<span class="string">'ba`_^]h[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210s.-,+*)('</span>+<span class="string">'\x27'</span>+<span class="string">'&amp;%$#'</span></span><br><span class="line">base=<span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">enc=<span class="string">'U&gt;F2UsQXN`5sXMELT=:7M_2&lt;X]^1ThaWF0=KM?9IUhAsTM5:T==_Ns&amp;&lt;Vhb!'</span></span><br><span class="line"><span class="comment">#enc='FsJ7M?b&lt;U-&gt;2M&gt;U:'#123456789测试</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newbase</span>(<span class="params">enc,table</span>):</span></span><br><span class="line">    m=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        <span class="keyword">if</span> enc[i] <span class="keyword">in</span> table:</span><br><span class="line">            m+=base[table.index(enc[i])]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            m+=<span class="string">'='</span></span><br><span class="line">    <span class="built_in">print</span>(base64.b64decode(m))</span><br><span class="line">    <span class="keyword">return</span> base64.b64decode(m)</span><br><span class="line">c1=newbase(enc,table2).decode()</span><br><span class="line">newbase(c1,table1)</span><br><span class="line"><span class="comment">#NCTF{H0m3_r1d1n9_h0m3_dy1n9_h0p3}</span></span><br></pre></td></tr></tbody></table></figure><h2 id="鲨鲨的秘密"><a href="#鲨鲨的秘密" class="headerlink" title="鲨鲨的秘密"></a>鲨鲨的秘密</h2><p>32位程序,ida载入</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IpAdress = <span class="built_in">malloc</span>(<span class="number">0x20</span>u);</span><br><span class="line"> VirtualProtect(IpAdress, <span class="number">0x20</span>u, <span class="number">0x40</span>u, &amp;flOldProtect);</span><br><span class="line"> dword_404E48 = (<span class="keyword">int</span>)IpAdress;</span><br><span class="line"> *(_BYTE *)IpAdress = <span class="number">0xC3</span>;                    <span class="comment">// ret的机器码</span></span><br><span class="line"> ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))IpAdress)</span><br></pre></td></tr></tbody></table></figure><p><strong>刚载入就有种莫名其妙的熟悉感，和西湖论剑的一道逆向题思路差不多，又是体力活。</strong><br>是一种修改代码的操作数并单语句执行的SMC，通过一个数组来确定赋值代码长度的大小，和选定相应的操作数和修改的位置。</p><p>挖出汇编代码，结合动调分析语句还原算法。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mov     ds:dword_403474, <span class="number">0F</span>FFFFFFFh            <span class="comment">// mov output ,0xffffffff</span></span><br><span class="line">mov     ecx, ds:dword_403464                         <span class="comment">// mov ecx,index(0) </span></span><br><span class="line">mov     dl, byte ptr ds:VirtualProtect[ecx]        <span class="comment">// mov dl,input[0]</span></span><br><span class="line">mov     byte ptr ds:dword_403470, dl             <span class="comment">// mov temp,dl</span></span><br><span class="line">movzx   eax, byte ptr ds:dword_403470         <span class="comment">//  mov eax, temp  输入传给eax</span></span><br><span class="line"><span class="keyword">xor</span>     eax, ds:dword_403474                          <span class="comment">//  xor   eax,output 取反类似</span></span><br><span class="line">mov     byte ptr ds:dword_403470, al            <span class="comment">//   mov temp , al  保存取反的值</span></span><br><span class="line">movzx   ecx, byte ptr ds:dword_403470        <span class="comment">//   mov ecx,temp </span></span><br><span class="line"><span class="keyword">and</span>     ecx, <span class="number">0F</span>Fh                                             <span class="comment">//   and  ecx,0xff</span></span><br><span class="line">mov     byte ptr ds:dword_403470, cl            <span class="comment">//   mov temp,cl</span></span><br><span class="line">mov     edx, ds:dword_403474                      <span class="comment">//    mov edx,output </span></span><br><span class="line">shr     edx,   <span class="number">8</span>                                                 <span class="comment">//    shr   edx,8</span></span><br><span class="line">mov     ds:dword_403474, edx                      <span class="comment">//    mov output,edx</span></span><br><span class="line">movzx   eax, byte ptr ds:dword_403470       <span class="comment">//    mov eax,temp</span></span><br><span class="line">mov     ecx, ds:dword_403474                         <span class="comment">//    mov ecx,output</span></span><br><span class="line"><span class="keyword">xor</span>     ecx, dword ptr ds:byte_403058[eax*<span class="number">4</span>]     <span class="comment">//  xor ecx, sbox[4*eax]   //174841BC  xor sbox[4*0x9e] 结果保存到output</span></span><br><span class="line">mov     ds:dword_403474, ecx                              </span><br><span class="line">mov     edx, ds:dword_403464                            ....</span><br><span class="line">mov     al, [edx+<span class="number">403005</span>h]</span><br><span class="line">mov     byte ptr ds:dword_403470, al</span><br><span class="line">movzx   ecx, byte ptr ds:dword_403470</span><br><span class="line"><span class="keyword">xor</span>     ecx, ds:dword_403474</span><br><span class="line">mov     byte ptr ds:dword_403470, cl</span><br><span class="line">mov     edx, ds:dword_403474</span><br><span class="line">shr     edx, <span class="number">8</span></span><br><span class="line">mov     ds:dword_403474, edx</span><br><span class="line">movzx   eax, byte ptr ds:dword_403470</span><br><span class="line">mov     ecx, ds:dword_403474</span><br><span class="line"><span class="keyword">xor</span>     ecx, dword ptr ds:byte_403058[eax*<span class="number">4</span>]     <span class="comment">//xor ecx,sbox[4*eax]  //eax 0xdd</span></span><br><span class="line">mov     ds:dword_403474, ecx            <span class="comment">//mov output,ecx</span></span><br><span class="line">mov     edx, ds:dword_403474                            <span class="comment">//mov edx,output</span></span><br><span class="line"><span class="keyword">xor</span>     edx, <span class="number">0F</span>FFFFFFFh           <span class="comment">//xor     edx, 0FFFFFFFFh</span></span><br><span class="line">mov     ds:dword_403474, edx                          <span class="comment">//mov    output edx</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>python代码如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>=<span class="string">'a'</span>*<span class="number">40</span></span><br><span class="line">output=<span class="number">0xffffffff</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">40</span>,<span class="number">2</span>):</span><br><span class="line">        tmp=(<span class="built_in">ord</span>(<span class="built_in">input</span>[index])^output)&amp;<span class="number">0xff</span></span><br><span class="line">        output=output&gt;&gt;<span class="number">8</span></span><br><span class="line">        output=output^somebox[tmp]</span><br><span class="line">        <span class="comment">#print("%x %x"%(tmp,output))</span></span><br><span class="line">        tmp = (<span class="built_in">ord</span>(<span class="built_in">input</span>[index+<span class="number">1</span>]) ^ output) &amp; <span class="number">0xff</span></span><br><span class="line">        output = output &gt;&gt; <span class="number">8</span></span><br><span class="line">        output = output ^ somebox[tmp]</span><br><span class="line">        output=output^<span class="number">0xffffffff</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"%x %x"</span> % (tmp, output))</span><br></pre></td></tr></tbody></table></figure><p><strong>可知是两个字节为一组进行的处理，z3解因为涉及下标问题不好下手，z3所得中间方程REF的参数不能转换为其他类型的变量，所以直接爆破。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">somebox=[<span class="number">0x00000000</span>, <span class="number">0x77073096</span>, <span class="number">0xEE0E612C</span>, <span class="number">0x990951BA</span>, <span class="number">0x076DC419</span>, <span class="number">0x706AF48F</span>, <span class="number">0xE963A535</span>, <span class="number">0x9E6495A3</span>, <span class="number">0x0EDB8832</span>, <span class="number">0x79DCB8A4</span>, <span class="number">0xE0D5E91E</span>, <span class="number">0x97D2D988</span>, <span class="number">0x09B64C2B</span>, <span class="number">0x7EB17CBD</span>, <span class="number">0xE7B82D07</span>, <span class="number">0x90BF1D91</span>, <span class="number">0x1DB71064</span>, <span class="number">0x6AB020F2</span>, <span class="number">0xF3B97148</span>, <span class="number">0x84BE41DE</span>, <span class="number">0x1ADAD47D</span>, <span class="number">0x6DDDE4EB</span>, <span class="number">0xF4D4B551</span>, <span class="number">0x83D385C7</span>, <span class="number">0x136C9856</span>, <span class="number">0x646BA8C0</span>, <span class="number">0xFD62F97A</span>, <span class="number">0x8A65C9EC</span>, <span class="number">0x14015C4F</span>, <span class="number">0x63066CD9</span>, <span class="number">0xFA0F3D63</span>, <span class="number">0x8D080DF5</span>, <span class="number">0x3B6E20C8</span>, <span class="number">0x4C69105E</span>, <span class="number">0xD56041E4</span>, <span class="number">0xA2677172</span>, <span class="number">0x3C03E4D1</span>, <span class="number">0x4B04D447</span>, <span class="number">0xD20D85FD</span>, <span class="number">0xA50AB56B</span>, <span class="number">0x35B5A8FA</span>, <span class="number">0x42B2986C</span>, <span class="number">0xDBBBC9D6</span>, <span class="number">0xACBCF940</span>, <span class="number">0x32D86CE3</span>, <span class="number">0x45DF5C75</span>, <span class="number">0xDCD60DCF</span>, <span class="number">0xABD13D59</span>, <span class="number">0x26D930AC</span>, <span class="number">0x51DE003A</span>, <span class="number">0xC8D75180</span>, <span class="number">0xBFD06116</span>, <span class="number">0x21B4F4B5</span>, <span class="number">0x56B3C423</span>, <span class="number">0xCFBA9599</span>, <span class="number">0xB8BDA50F</span>, <span class="number">0x2802B89E</span>, <span class="number">0x5F058808</span>, <span class="number">0xC60CD9B2</span>, <span class="number">0xB10BE924</span>, <span class="number">0x2F6F7C87</span>, <span class="number">0x58684C11</span>, <span class="number">0xC1611DAB</span>, <span class="number">0xB6662D3D</span>, <span class="number">0x76DC4190</span>, <span class="number">0x01DB7106</span>, <span class="number">0x98D220BC</span>, <span class="number">0xEFD5102A</span>, <span class="number">0x71B18589</span>, <span class="number">0x06B6B51F</span>, <span class="number">0x9FBFE4A5</span>, <span class="number">0xE8B8D433</span>, <span class="number">0x7807C9A2</span>, <span class="number">0x0F00F934</span>, <span class="number">0x9609A88E</span>, <span class="number">0xE10E9818</span>, <span class="number">0x7F6A0DBB</span>, <span class="number">0x086D3D2D</span>, <span class="number">0x91646C97</span>, <span class="number">0xE6635C01</span>, <span class="number">0x6B6B51F4</span>, <span class="number">0x1C6C6162</span>, <span class="number">0x856530D8</span>, <span class="number">0xF262004E</span>, <span class="number">0x6C0695ED</span>, <span class="number">0x1B01A57B</span>, <span class="number">0x8208F4C1</span>, <span class="number">0xF50FC457</span>, <span class="number">0x65B0D9C6</span>, <span class="number">0x12B7E950</span>, <span class="number">0x8BBEB8EA</span>, <span class="number">0xFCB9887C</span>, <span class="number">0x62DD1DDF</span>, <span class="number">0x15DA2D49</span>, <span class="number">0x8CD37CF3</span>, <span class="number">0xFBD44C65</span>, <span class="number">0x4DB26158</span>, <span class="number">0x3AB551CE</span>, <span class="number">0xA3BC0074</span>, <span class="number">0xD4BB30E2</span>, <span class="number">0x4ADFA541</span>, <span class="number">0x3DD895D7</span>, <span class="number">0xA4D1C46D</span>, <span class="number">0xD3D6F4FB</span>, <span class="number">0x4369E96A</span>, <span class="number">0x346ED9FC</span>, <span class="number">0xAD678846</span>, <span class="number">0xDA60B8D0</span>, <span class="number">0x44042D73</span>, <span class="number">0x33031DE5</span>, <span class="number">0xAA0A4C5F</span>, <span class="number">0xDD0D7CC9</span>, <span class="number">0x5005713C</span>, <span class="number">0x270241AA</span>, <span class="number">0xBE0B1010</span>, <span class="number">0xC90C2086</span>, <span class="number">0x5768B525</span>, <span class="number">0x206F85B3</span>, <span class="number">0xB966D409</span>, <span class="number">0xCE61E49F</span>, <span class="number">0x5EDEF90E</span>, <span class="number">0x29D9C998</span>, <span class="number">0xB0D09822</span>, <span class="number">0xC7D7A8B4</span>, <span class="number">0x59B33D17</span>, <span class="number">0x2EB40D81</span>, <span class="number">0xB7BD5C3B</span>, <span class="number">0xC0BA6CAD</span>, <span class="number">0xEDB88320</span>, <span class="number">0x9ABFB3B6</span>, <span class="number">0x03B6E20C</span>, <span class="number">0x74B1D29A</span>, <span class="number">0xEAD54739</span>, <span class="number">0x9DD277AF</span>, <span class="number">0x04DB2615</span>, <span class="number">0x73DC1683</span>, <span class="number">0xE3630B12</span>, <span class="number">0x94643B84</span>, <span class="number">0x0D6D6A3E</span>, <span class="number">0x7A6A5AA8</span>, <span class="number">0xE40ECF0B</span>, <span class="number">0x9309FF9D</span>, <span class="number">0x0A00AE27</span>, <span class="number">0x7D079EB1</span>, <span class="number">0xF00F9344</span>, <span class="number">0x8708A3D2</span>, <span class="number">0x1E01F268</span>, <span class="number">0x6906C2FE</span>, <span class="number">0xF762575D</span>, <span class="number">0x806567CB</span>, <span class="number">0x196C3671</span>, <span class="number">0x6E6B06E7</span>, <span class="number">0xFED41B76</span>, <span class="number">0x89D32BE0</span>, <span class="number">0x10DA7A5A</span>, <span class="number">0x67DD4ACC</span>, <span class="number">0xF9B9DF6F</span>, <span class="number">0x8EBEEFF9</span>, <span class="number">0x17B7BE43</span>, <span class="number">0x60B08ED5</span>, <span class="number">0xD6D6A3E8</span>, <span class="number">0xA1D1937E</span>, <span class="number">0x38D8C2C4</span>, <span class="number">0x4FDFF252</span>, <span class="number">0xD1BB67F1</span>, <span class="number">0xA6BC5767</span>, <span class="number">0x3FB506DD</span>, <span class="number">0x48B2364B</span>, <span class="number">0xD80D2BDA</span>, <span class="number">0xAF0A1B4C</span>, <span class="number">0x36034AF6</span>, <span class="number">0x41047A60</span>, <span class="number">0xDF60EFC3</span>, <span class="number">0xA867DF55</span>, <span class="number">0x316E8EEF</span>, <span class="number">0x4669BE79</span>, <span class="number">0xCB61B38C</span>, <span class="number">0xBC66831A</span>, <span class="number">0x256FD2A0</span>, <span class="number">0x5268E236</span>, <span class="number">0xCC0C7795</span>, <span class="number">0xBB0B4703</span>, <span class="number">0x220216B9</span>, <span class="number">0x5505262F</span>, <span class="number">0xC5BA3BBE</span>, <span class="number">0xB2BD0B28</span>, <span class="number">0x2BB45A92</span>, <span class="number">0x5CB36A04</span>, <span class="number">0xC2D7FFA7</span>, <span class="number">0xB5D0CF31</span>, <span class="number">0x2CD99E8B</span>, <span class="number">0x5BDEAE1D</span>, <span class="number">0x9B64C2B0</span>, <span class="number">0xEC63F226</span>, <span class="number">0x756AA39C</span>, <span class="number">0x026D930A</span>, <span class="number">0x9C0906A9</span>, <span class="number">0xEB0E363F</span>, <span class="number">0x72076785</span>, <span class="number">0x05005713</span>, <span class="number">0x95BF4A82</span>, <span class="number">0xE2B87A14</span>, <span class="number">0x7BB12BAE</span>, <span class="number">0x0CB61B38</span>, <span class="number">0x92D28E9B</span>, <span class="number">0xE5D5BE0D</span>, <span class="number">0x7CDCEFB7</span>, <span class="number">0x0BDBDF21</span>, <span class="number">0x86D3D2D4</span>, <span class="number">0xF1D4E242</span>, <span class="number">0x68DDB3F8</span>, <span class="number">0x1FDA836E</span>, <span class="number">0x81BE16CD</span>, <span class="number">0xF6B9265B</span>, <span class="number">0x6FB077E1</span>, <span class="number">0x18B74777</span>, <span class="number">0x88085AE6</span>, <span class="number">0xFF0F6A70</span>, <span class="number">0x66063BCA</span>, <span class="number">0x11010B5C</span>, <span class="number">0x8F659EFF</span>, <span class="number">0xF862AE69</span>, <span class="number">0x616BFFD3</span>, <span class="number">0x166CCF45</span>, <span class="number">0xA00AE278</span>, <span class="number">0xD70DD2EE</span>, <span class="number">0x4E048354</span>, <span class="number">0x3903B3C2</span>, <span class="number">0xA7672661</span>, <span class="number">0xD06016F7</span>, <span class="number">0x4969474D</span>, <span class="number">0x3E6E77DB</span>, <span class="number">0xAED16A4A</span>, <span class="number">0xD9D65ADC</span>, <span class="number">0x40DF0B66</span>, <span class="number">0x37D83BF0</span>, <span class="number">0xA9BCAE53</span>, <span class="number">0xDEBB9EC5</span>, <span class="number">0x47B2CF7F</span>, <span class="number">0x30B5FFE9</span>, <span class="number">0xBDBDF21C</span>, <span class="number">0xCABAC28A</span>, <span class="number">0x53B39330</span>, <span class="number">0x24B4A3A6</span>, <span class="number">0xBAD03605</span>, <span class="number">0xCDD70693</span>, <span class="number">0x54DE5729</span>, <span class="number">0x23D967BF</span>, <span class="number">0xB3667A2E</span>, <span class="number">0xC4614AB8</span>, <span class="number">0x5D681B02</span>, <span class="number">0x2A6F2B94</span>, <span class="number">0xB40BBE37</span>, <span class="number">0xC30C8EA1</span>, <span class="number">0x5A05DF1B</span>, <span class="number">0x2D02EF8D</span>]</span><br><span class="line">enc=[<span class="number">0xC0F6605E</span>, <span class="number">0x00B16E0A</span>, <span class="number">0x3319A2D2</span>, <span class="number">0x57CAB7B7</span>, <span class="number">0x9A646D9C</span>, <span class="number">0xBDD82726</span>, <span class="number">0xD838FB91</span>, <span class="number">0x8DE10BB3</span>, <span class="number">0x176B0DAD</span>, <span class="number">0x685FDEEF</span>, <span class="number">0x2C1FF7B1</span>, <span class="number">0x6C444296</span>, <span class="number">0xA15CFE90</span>, <span class="number">0x20CD8721</span>, <span class="number">0x62967CE8</span>, <span class="number">0x2C1641FD</span>, <span class="number">0x572D0F9A</span>, <span class="number">0xAE52DC2C</span>, <span class="number">0x50497DCF</span>, <span class="number">0xFF6ABF4A</span>]</span><br><span class="line">s=<span class="string">''</span></span><br><span class="line">enc=[<span class="number">0xC0F6605E</span>, <span class="number">0x00B16E0A</span>, <span class="number">0x3319A2D2</span>, <span class="number">0x57CAB7B7</span>, <span class="number">0x9A646D9C</span>, <span class="number">0xBDD82726</span>, <span class="number">0xD838FB91</span>, <span class="number">0x8DE10BB3</span>, <span class="number">0x176B0DAD</span>, <span class="number">0x685FDEEF</span>, <span class="number">0x2C1FF7B1</span>, <span class="number">0x6C444296</span>, <span class="number">0xA15CFE90</span>, <span class="number">0x20CD8721</span>, <span class="number">0x62967CE8</span>, <span class="number">0x2C1641FD</span>, <span class="number">0x572D0F9A</span>, <span class="number">0xAE52DC2C</span>, <span class="number">0x50497DCF</span>, <span class="number">0xFF6ABF4A</span>]</span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span>  m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">            output = <span class="number">0xffffffff</span></span><br><span class="line">            tmp=(m^output)&amp;<span class="number">0xff</span></span><br><span class="line">            output=output&gt;&gt;<span class="number">8</span></span><br><span class="line">            output=output^somebox[tmp]</span><br><span class="line">            <span class="comment">#print("%x %x"%(tmp,output))</span></span><br><span class="line">            tmp = (n ^ output) &amp; <span class="number">0xff</span></span><br><span class="line">            output = output &gt;&gt; <span class="number">8</span></span><br><span class="line">            output = output ^ somebox[tmp]</span><br><span class="line">            output=output^<span class="number">0xffffffff</span></span><br><span class="line">            <span class="keyword">if</span> output==enc[i]:</span><br><span class="line">                s+=<span class="built_in">chr</span>(m)+<span class="built_in">chr</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment">#NCTF{rLdE57TG0iHA39qUnFZp6LeJyYEBcxMNL7}</span></span><br></pre></td></tr></tbody></table></figure><h2 id="狗狗的秘密"><a href="#狗狗的秘密" class="headerlink" title="狗狗的秘密"></a>狗狗的秘密</h2><p><strong>挺不错的，解完想暴打出题人。</strong><br>32位程序，ida载入获得假flag一枚<br><img src="https://bu.dusays.com/2021/12/01/811a7364f1bd8.png"><br>不过main之前有个TlsCallback函数，直接下个断点，动态分析。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !v9 &amp;&amp; !IsDebuggerPresent() )</span><br><span class="line">   {</span><br><span class="line">     off_825014 = (<span class="keyword">int</span> (__cdecl *)(_DWORD))sub_823000;</span><br><span class="line">     v8 = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)((<span class="keyword">char</span> *)sub_823000 + <span class="number">256</span>);</span><br><span class="line">     <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i )</span><br><span class="line">       v8 += <span class="number">2</span>;</span><br><span class="line">     <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">24</span>; ++j )</span><br><span class="line">     {</span><br><span class="line">       v8 -= <span class="number">2</span>;</span><br><span class="line">       sub_8211F0(v8);</span><br><span class="line">     }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>反调试，off_825014在主函数出现过，但是个假逻辑，所以这部分内容是SMC修改技术。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">sub_8211F0</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+0h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+8h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v4 = *a1;</span><br><span class="line">  v3 = a1[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">64</span>; ++i )</span><br><span class="line">  {</span><br><span class="line">    v3 -= (dword_825004[(*(_DWORD *)delta &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + *(_DWORD *)delta) ^ (v4 + ((v4 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v4)));</span><br><span class="line">    *(_DWORD *)delta += dword_825000;</span><br><span class="line">    v4 -= (dword_825004[delta[<span class="number">0</span>] &amp; <span class="number">3</span>] + *(_DWORD *)delta) ^ (v3 + ((v3 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v3)));</span><br><span class="line">  }</span><br><span class="line">  *a1 = v4;</span><br><span class="line">  result = v3;</span><br><span class="line">  a1[<span class="number">1</span>] = v3;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>直接改eip绕过这个反调试即可，同时修改代码用的xTea，不过delta的值有个小坑，main函数中有个创建线程的函数，将delta赋值为0xDA76C600，patch进行修改，后面下个断F9。</strong></p><blockquote><p>线程的执行顺序不是太清楚，不过TLSCALLBACK在main之前执行，而delta在main函数中被改掉，为什么会应用到smc中呢，有待解决。</p></blockquote><p><strong>修复函数后拿到真正处理逻辑。</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_823000</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+0h] [ebp-98h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+10h] [ebp-88h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-7Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+2Ch] [ebp-6Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp+2Ch] [ebp-6Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// [esp+32h] [ebp-66h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> Size; <span class="comment">// [esp+34h] [ebp-64h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v9; <span class="comment">// [esp+38h] [ebp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// [esp+38h] [ebp-60h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v11; <span class="comment">// [esp+3Ch] [ebp-5Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+40h] [ebp-58h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [esp+40h] [ebp-58h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> m; <span class="comment">// [esp+40h] [ebp-58h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> n; <span class="comment">// [esp+40h] [ebp-58h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> ii; <span class="comment">// [esp+40h] [ebp-58h]</span></span><br><span class="line">  <span class="keyword">char</span> v17[<span class="number">62</span>]; <span class="comment">// [esp+44h] [ebp-54h]</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [esp+82h] [ebp-16h]</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// [esp+86h] [ebp-12h]</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// [esp+8Ah] [ebp-Eh]</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// [esp+8Eh] [ebp-Ah]</span></span><br><span class="line">  __int16 v22; <span class="comment">// [esp+92h] [ebp-6h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  Size = <span class="number">146</span> * v3 / <span class="number">0x64</span> + <span class="number">1</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v11 = (<span class="keyword">unsigned</span> __int8 *)<span class="built_in">malloc</span>(Size);</span><br><span class="line">  v17[<span class="number">0</span>] = <span class="number">82</span>;</span><br><span class="line">  v17[<span class="number">1</span>] = <span class="number">-61</span>;</span><br><span class="line">  v17[<span class="number">2</span>] = <span class="number">26</span>;</span><br><span class="line">  v17[<span class="number">3</span>] = <span class="number">-32</span>;</span><br><span class="line">  v17[<span class="number">4</span>] = <span class="number">22</span>;</span><br><span class="line">  v17[<span class="number">5</span>] = <span class="number">93</span>;</span><br><span class="line">  v17[<span class="number">6</span>] = <span class="number">94</span>;</span><br><span class="line">  v17[<span class="number">7</span>] = <span class="number">-30</span>;</span><br><span class="line">  v17[<span class="number">8</span>] = <span class="number">103</span>;</span><br><span class="line">  v17[<span class="number">9</span>] = <span class="number">31</span>;</span><br><span class="line">  v17[<span class="number">10</span>] = <span class="number">31</span>;</span><br><span class="line">  v17[<span class="number">11</span>] = <span class="number">6</span>;</span><br><span class="line">  v17[<span class="number">12</span>] = <span class="number">6</span>;</span><br><span class="line">  v17[<span class="number">13</span>] = <span class="number">31</span>;</span><br><span class="line">  v17[<span class="number">14</span>] = <span class="number">23</span>;</span><br><span class="line">  v17[<span class="number">15</span>] = <span class="number">6</span>;</span><br><span class="line">  v17[<span class="number">16</span>] = <span class="number">15</span>;</span><br><span class="line">  v17[<span class="number">17</span>] = <span class="number">-7</span>;</span><br><span class="line">  v17[<span class="number">18</span>] = <span class="number">6</span>;</span><br><span class="line">  v17[<span class="number">19</span>] = <span class="number">103</span>;</span><br><span class="line">  v17[<span class="number">20</span>] = <span class="number">88</span>;</span><br><span class="line">  v17[<span class="number">21</span>] = <span class="number">-78</span>;</span><br><span class="line">  v17[<span class="number">22</span>] = <span class="number">-30</span>;</span><br><span class="line">  v17[<span class="number">23</span>] = <span class="number">-116</span>;</span><br><span class="line">  v17[<span class="number">24</span>] = <span class="number">15</span>;</span><br><span class="line">  v17[<span class="number">25</span>] = <span class="number">42</span>;</span><br><span class="line">  v17[<span class="number">26</span>] = <span class="number">6</span>;</span><br><span class="line">  v17[<span class="number">27</span>] = <span class="number">-119</span>;</span><br><span class="line">  v17[<span class="number">28</span>] = <span class="number">-49</span>;</span><br><span class="line">  v17[<span class="number">29</span>] = <span class="number">42</span>;</span><br><span class="line">  v17[<span class="number">30</span>] = <span class="number">6</span>;</span><br><span class="line">  v17[<span class="number">31</span>] = <span class="number">31</span>;</span><br><span class="line">  v17[<span class="number">32</span>] = <span class="number">-104</span>;</span><br><span class="line">  v17[<span class="number">33</span>] = <span class="number">26</span>;</span><br><span class="line">  v17[<span class="number">34</span>] = <span class="number">62</span>;</span><br><span class="line">  v17[<span class="number">35</span>] = <span class="number">23</span>;</span><br><span class="line">  v17[<span class="number">36</span>] = <span class="number">103</span>;</span><br><span class="line">  v17[<span class="number">37</span>] = <span class="number">31</span>;</span><br><span class="line">  v17[<span class="number">38</span>] = <span class="number">-9</span>;</span><br><span class="line">  v17[<span class="number">39</span>] = <span class="number">58</span>;</span><br><span class="line">  v17[<span class="number">40</span>] = <span class="number">68</span>;</span><br><span class="line">  v17[<span class="number">41</span>] = <span class="number">-61</span>;</span><br><span class="line">  v17[<span class="number">42</span>] = <span class="number">22</span>;</span><br><span class="line">  v17[<span class="number">43</span>] = <span class="number">51</span>;</span><br><span class="line">  v17[<span class="number">44</span>] = <span class="number">105</span>;</span><br><span class="line">  v17[<span class="number">45</span>] = <span class="number">26</span>;</span><br><span class="line">  v17[<span class="number">46</span>] = <span class="number">117</span>;</span><br><span class="line">  v17[<span class="number">47</span>] = <span class="number">22</span>;</span><br><span class="line">  v17[<span class="number">48</span>] = <span class="number">62</span>;</span><br><span class="line">  v17[<span class="number">49</span>] = <span class="number">23</span>;</span><br><span class="line">  v17[<span class="number">50</span>] = <span class="number">-43</span>;</span><br><span class="line">  v17[<span class="number">51</span>] = <span class="number">105</span>;</span><br><span class="line">  v17[<span class="number">52</span>] = <span class="number">122</span>;</span><br><span class="line">  v17[<span class="number">53</span>] = <span class="number">27</span>;</span><br><span class="line">  v17[<span class="number">54</span>] = <span class="number">68</span>;</span><br><span class="line">  v17[<span class="number">55</span>] = <span class="number">68</span>;</span><br><span class="line">  v17[<span class="number">56</span>] = <span class="number">62</span>;</span><br><span class="line">  v17[<span class="number">57</span>] = <span class="number">103</span>;</span><br><span class="line">  v17[<span class="number">58</span>] = <span class="number">-9</span>;</span><br><span class="line">  v17[<span class="number">59</span>] = <span class="number">-119</span>;</span><br><span class="line">  v17[<span class="number">60</span>] = <span class="number">103</span>;</span><br><span class="line">  v17[<span class="number">61</span>] = <span class="number">-61</span>;</span><br><span class="line">  v18 = <span class="number">0</span>;</span><br><span class="line">  v19 = <span class="number">0</span>;</span><br><span class="line">  v20 = <span class="number">0</span>;</span><br><span class="line">  v21 = <span class="number">0</span>;</span><br><span class="line">  v22 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v11, <span class="number">0</span>, Size);</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i )</span><br><span class="line">  {</span><br><span class="line">    v7 = byte_825018[i];</span><br><span class="line">    byte_825018[i] = byte_825018[(i + *((<span class="keyword">unsigned</span> __int8 *)&amp;delta + i % <span class="number">4</span>)) % <span class="number">256</span>];<span class="comment">// delta变为0了</span></span><br><span class="line">    byte_825018[(i + *((<span class="keyword">unsigned</span> __int8 *)&amp;delta + i % <span class="number">4</span>)) % <span class="number">256</span>] = v7;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">while</span> ( v9 &lt; <span class="built_in">strlen</span>(a1) )</span><br><span class="line">  {</span><br><span class="line">    v5 = a1[v9];</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">146</span> * v3 / <span class="number">0x64</span>; ; --j )</span><br><span class="line">    {</span><br><span class="line">      v6 = v5 + (v11[j] &lt;&lt; <span class="number">8</span>);</span><br><span class="line">      v11[j] = v6 % <span class="number">47</span>;</span><br><span class="line">      v5 = v6 / <span class="number">47</span>;</span><br><span class="line">      <span class="keyword">if</span> ( j &lt; v4 )</span><br><span class="line">        v4 = j;</span><br><span class="line">      <span class="keyword">if</span> ( !v5 &amp;&amp; j &lt;= v4 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    ++v9;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; !v11[k]; ++k )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; Size; ++m )</span><br><span class="line">    v11[m] = byte_825118[v11[k++]];             <span class="comment">// 单表替换</span></span><br><span class="line">  <span class="keyword">while</span> ( m &lt; Size )</span><br><span class="line">    v11[m++] = <span class="number">0</span>;</span><br><span class="line">  v2 = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)v11);</span><br><span class="line">  <span class="keyword">for</span> ( n = <span class="number">0</span>; n &lt; v2; ++n )</span><br><span class="line">    v11[n] ^= byte_825018[v11[n]];              <span class="comment">// 异或处理</span></span><br><span class="line">  <span class="keyword">for</span> ( ii = <span class="number">0</span>; ii &lt; v2; ++ii )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( v11[ii] != (<span class="keyword">unsigned</span> __int8)v17[ii] )</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Wrong!\n"</span>, v2);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Right!\n"</span>, v2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>delta的值是0，需要注意一下，接着就是写脚本逆向，z3不好直接求解，加密流程是先将输入转为47进制下每位的值存在数组v11中，找到第一个非0值的下标k，接着进行单表替换和异或。</strong></p><blockquote><p>又是一个z3直接出，却被ban了的题，类型转换有点坑</p></blockquote><p><strong>因为涉及到表索引和本身异或不好逆向还原，所以想着先爆破v11数组。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">enc=[<span class="number">0x52</span>, <span class="number">0xC3</span>, <span class="number">0x1A</span>, <span class="number">0xE0</span>, <span class="number">0x16</span>, <span class="number">0x5D</span>, <span class="number">0x5E</span>, <span class="number">0xE2</span>, <span class="number">0x67</span>, <span class="number">0x1F</span>, <span class="number">0x1F</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x1F</span>, <span class="number">0x17</span>, <span class="number">0x06</span>, <span class="number">0x0F</span>, <span class="number">0xF9</span>, <span class="number">0x06</span>, <span class="number">0x67</span>, <span class="number">0x58</span>, <span class="number">0xB2</span>, <span class="number">0xE2</span>, <span class="number">0x8C</span>, <span class="number">0x0F</span>, <span class="number">0x2A</span>, <span class="number">0x06</span>, <span class="number">0x89</span>, <span class="number">0xCF</span>, <span class="number">0x2A</span>, <span class="number">0x06</span>, <span class="number">0x1F</span>, <span class="number">0x98</span>, <span class="number">0x1A</span>, <span class="number">0x3E</span>, <span class="number">0x17</span>, <span class="number">0x67</span>, <span class="number">0x1F</span>, <span class="number">0xF7</span>, <span class="number">0x3A</span>, <span class="number">0x44</span>, <span class="number">0xC3</span>, <span class="number">0x16</span>, <span class="number">0x33</span>, <span class="number">0x69</span>, <span class="number">0x1A</span>, <span class="number">0x75</span>, <span class="number">0x16</span>, <span class="number">0x3E</span>, <span class="number">0x17</span>, <span class="number">0xD5</span>, <span class="number">0x69</span>, <span class="number">0x7A</span>, <span class="number">0x1B</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x3E</span>, <span class="number">0x67</span>, <span class="number">0xF7</span>, <span class="number">0x89</span>, <span class="number">0x67</span>, <span class="number">0xC3</span>]</span><br><span class="line">c=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">61</span>):</span><br><span class="line">    temp=[]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">47</span>):</span><br><span class="line">        tmp=tb2[j]</span><br><span class="line">        tmp=tmp^table[tmp]</span><br><span class="line">        <span class="keyword">if</span> tmp==enc[i]:</span><br><span class="line">            temp.append(j)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(temp)==<span class="number">1</span>:</span><br><span class="line">        c.append(temp[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c.append(temp)</span><br><span class="line">c.insert(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#[0, 2, 0, [33, 45], 44, 30, 40, 8, 23, [7, 11, 22], [34, 37], [34, 37], [19, 20, 43], [19, 20, 43], [34, 37], 24, [19, 20, 43], [4, 31], 29, [19, 20, 43], [7, 11, 22], 13, 5, 23, 41, [4, 31], 35, [19, 20, 43], 9, 14, 35, [19, 20, 43], [34, 37], 3, [33, 45], 10, 24, [7, 11, 22], [34, 37], 38, 1, 25, 0, 30, 6, 42, [33, 45], 36, 30, 10, 24, 21, 42, 26, 28, 25, 25, 10, [7, 11, 22], 38, 9, [7, 11, 22]]</span></span><br></pre></td></tr></tbody></table></figure><p><strong>v11第一位是0，根据加密的最后一位是0xc3，或者多次测试都可知，不过这解有点多，下面就是对c进行排列组合，之后47进制转，long_to_bytes下即可，不过这…..tmd，dfs不太会写，直接硬爆破了，大概跑了半小时,直接整emo了。</strong></p><blockquote><p>跑起来才意识到从高位开始爆破会比较快，高位对转字符的影响较大，傻了</p></blockquote><p>完整如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dododo</span>(<span class="params">c</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">62</span>):</span><br><span class="line">        <span class="built_in">sum</span> += c[i] * <span class="built_in">pow</span>(<span class="number">47</span>, <span class="number">61</span> - i)</span><br><span class="line">    m=long_to_bytes(<span class="built_in">sum</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        flag=m.decode()</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enc=[<span class="number">0x52</span>, <span class="number">0xC3</span>, <span class="number">0x1A</span>, <span class="number">0xE0</span>, <span class="number">0x16</span>, <span class="number">0x5D</span>, <span class="number">0x5E</span>, <span class="number">0xE2</span>, <span class="number">0x67</span>, <span class="number">0x1F</span>, <span class="number">0x1F</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x1F</span>, <span class="number">0x17</span>, <span class="number">0x06</span>, <span class="number">0x0F</span>, <span class="number">0xF9</span>, <span class="number">0x06</span>, <span class="number">0x67</span>, <span class="number">0x58</span>, <span class="number">0xB2</span>, <span class="number">0xE2</span>, <span class="number">0x8C</span>, <span class="number">0x0F</span>, <span class="number">0x2A</span>, <span class="number">0x06</span>, <span class="number">0x89</span>, <span class="number">0xCF</span>, <span class="number">0x2A</span>, <span class="number">0x06</span>, <span class="number">0x1F</span>, <span class="number">0x98</span>, <span class="number">0x1A</span>, <span class="number">0x3E</span>, <span class="number">0x17</span>, <span class="number">0x67</span>, <span class="number">0x1F</span>, <span class="number">0xF7</span>, <span class="number">0x3A</span>, <span class="number">0x44</span>, <span class="number">0xC3</span>, <span class="number">0x16</span>, <span class="number">0x33</span>, <span class="number">0x69</span>, <span class="number">0x1A</span>, <span class="number">0x75</span>, <span class="number">0x16</span>, <span class="number">0x3E</span>, <span class="number">0x17</span>, <span class="number">0xD5</span>, <span class="number">0x69</span>, <span class="number">0x7A</span>, <span class="number">0x1B</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x3E</span>, <span class="number">0x67</span>, <span class="number">0xF7</span>, <span class="number">0x89</span>, <span class="number">0x67</span>, <span class="number">0xC3</span>]</span><br><span class="line">table=[<span class="number">0x21</span>, <span class="number">0x43</span>, <span class="number">0x65</span>, <span class="number">0x87</span>, <span class="number">0x09</span>, <span class="number">0x21</span>, <span class="number">0x43</span>, <span class="number">0x65</span>, <span class="number">0xA2</span>, <span class="number">0x9B</span>, <span class="number">0xF4</span>, <span class="number">0xDF</span>, <span class="number">0xAC</span>, <span class="number">0x7C</span>, <span class="number">0xA1</span>, <span class="number">0xC6</span>, <span class="number">0x16</span>, <span class="number">0xD0</span>, <span class="number">0x0F</span>, <span class="number">0xDD</span>, <span class="number">0xDC</span>, <span class="number">0x73</span>, <span class="number">0xC5</span>, <span class="number">0x6B</span>, <span class="number">0xD1</span>, <span class="number">0x96</span>, <span class="number">0x47</span>, <span class="number">0xC2</span>, <span class="number">0x26</span>, <span class="number">0x67</span>, <span class="number">0x4E</span>, <span class="number">0x41</span>, <span class="number">0x82</span>, <span class="number">0x20</span>, <span class="number">0x56</span>, <span class="number">0x9A</span>, <span class="number">0x6E</span>, <span class="number">0x33</span>, <span class="number">0x92</span>, <span class="number">0x88</span>, <span class="number">0x29</span>, <span class="number">0xB5</span>, <span class="number">0xB4</span>, <span class="number">0x71</span>, <span class="number">0xA9</span>, <span class="number">0xCE</span>, <span class="number">0xC3</span>, <span class="number">0x34</span>, <span class="number">0x50</span>, <span class="number">0x59</span>, <span class="number">0xBF</span>, <span class="number">0x2D</span>, <span class="number">0x57</span>, <span class="number">0x22</span>, <span class="number">0xA6</span>, <span class="number">0x30</span>, <span class="number">0x04</span>, <span class="number">0xB2</span>, <span class="number">0xCD</span>, <span class="number">0x36</span>, <span class="number">0xD5</span>, <span class="number">0x68</span>, <span class="number">0x4D</span>, <span class="number">0x5B</span>, <span class="number">0x45</span>, <span class="number">0x9E</span>, <span class="number">0x85</span>, <span class="number">0xCF</span>, <span class="number">0x9D</span>, <span class="number">0xCC</span>, <span class="number">0x61</span>, <span class="number">0x78</span>, <span class="number">0x32</span>, <span class="number">0x76</span>, <span class="number">0x31</span>, <span class="number">0xE3</span>, <span class="number">0x80</span>, <span class="number">0xAD</span>, <span class="number">0x39</span>, <span class="number">0x4F</span>, <span class="number">0xFA</span>, <span class="number">0x72</span>, <span class="number">0x83</span>, <span class="number">0x4C</span>, <span class="number">0x86</span>, <span class="number">0x60</span>, <span class="number">0xB7</span>, <span class="number">0xD7</span>, <span class="number">0x63</span>, <span class="number">0x0C</span>, <span class="number">0x44</span>, <span class="number">0x35</span>, <span class="number">0xB3</span>, <span class="number">0x7B</span>, <span class="number">0x19</span>, <span class="number">0xD4</span>, <span class="number">0x69</span>, <span class="number">0x08</span>, <span class="number">0x0B</span>, <span class="number">0x1F</span>, <span class="number">0x3D</span>, <span class="number">0x11</span>, <span class="number">0x79</span>, <span class="number">0xD3</span>, <span class="number">0xEE</span>, <span class="number">0x93</span>, <span class="number">0x42</span>, <span class="number">0xDE</span>, <span class="number">0x23</span>, <span class="number">0x3B</span>, <span class="number">0x5D</span>, <span class="number">0x8D</span>, <span class="number">0xA5</span>, <span class="number">0x77</span>, <span class="number">0x5F</span>, <span class="number">0x58</span>, <span class="number">0xDB</span>, <span class="number">0x97</span>, <span class="number">0xF6</span>, <span class="number">0x7A</span>, <span class="number">0x18</span>, <span class="number">0x52</span>, <span class="number">0x15</span>, <span class="number">0x74</span>, <span class="number">0x25</span>, <span class="number">0x62</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>, <span class="number">0xE8</span>, <span class="number">0x0D</span>, <span class="number">0x98</span>, <span class="number">0x2A</span>, <span class="number">0x43</span>, <span class="number">0xE2</span>, <span class="number">0xEF</span>, <span class="number">0x48</span>, <span class="number">0x87</span>, <span class="number">0x49</span>, <span class="number">0x1C</span>, <span class="number">0xCA</span>, <span class="number">0x2B</span>, <span class="number">0xA7</span>, <span class="number">0x8A</span>, <span class="number">0x09</span>, <span class="number">0x81</span>, <span class="number">0xE7</span>, <span class="number">0x53</span>, <span class="number">0xAA</span>, <span class="number">0xFF</span>, <span class="number">0x6F</span>, <span class="number">0x8E</span>, <span class="number">0x91</span>, <span class="number">0xF1</span>, <span class="number">0xF0</span>, <span class="number">0xA4</span>, <span class="number">0x46</span>, <span class="number">0x3A</span>, <span class="number">0x7D</span>, <span class="number">0x54</span>, <span class="number">0xEB</span>, <span class="number">0x2F</span>, <span class="number">0xC1</span>, <span class="number">0xC0</span>, <span class="number">0x0E</span>, <span class="number">0xBD</span>, <span class="number">0xE1</span>, <span class="number">0x6C</span>, <span class="number">0x64</span>, <span class="number">0xBE</span>, <span class="number">0xE4</span>, <span class="number">0x02</span>, <span class="number">0x3C</span>, <span class="number">0x5A</span>, <span class="number">0xA8</span>, <span class="number">0x9F</span>, <span class="number">0x37</span>, <span class="number">0xAF</span>, <span class="number">0xA0</span>, <span class="number">0x13</span>, <span class="number">0xED</span>, <span class="number">0x1B</span>, <span class="number">0xEC</span>, <span class="number">0x8B</span>, <span class="number">0x3E</span>, <span class="number">0x7E</span>, <span class="number">0x27</span>, <span class="number">0x99</span>, <span class="number">0x75</span>, <span class="number">0xAB</span>, <span class="number">0xFE</span>, <span class="number">0xD9</span>, <span class="number">0x3F</span>, <span class="number">0xF3</span>, <span class="number">0xEA</span>, <span class="number">0x70</span>, <span class="number">0xF7</span>, <span class="number">0x95</span>, <span class="number">0xBA</span>, <span class="number">0x1D</span>, <span class="number">0x40</span>, <span class="number">0xB0</span>, <span class="number">0xF9</span>, <span class="number">0xE5</span>, <span class="number">0xF8</span>, <span class="number">0x06</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0x03</span>, <span class="number">0xC9</span>, <span class="number">0x10</span>, <span class="number">0x9C</span>, <span class="number">0x2E</span>, <span class="number">0x89</span>, <span class="number">0x5C</span>, <span class="number">0x7F</span>, <span class="number">0xB1</span>, <span class="number">0x1A</span>, <span class="number">0xD6</span>, <span class="number">0x90</span>, <span class="number">0xAE</span>, <span class="number">0xDA</span>, <span class="number">0xE6</span>, <span class="number">0x5E</span>, <span class="number">0xB9</span>, <span class="number">0x84</span>, <span class="number">0xE9</span>, <span class="number">0x55</span>, <span class="number">0xBB</span>, <span class="number">0xC7</span>, <span class="number">0x0A</span>, <span class="number">0xE0</span>, <span class="number">0x66</span>, <span class="number">0xF2</span>, <span class="number">0xD8</span>, <span class="number">0xCB</span>, <span class="number">0x00</span>, <span class="number">0x12</span>, <span class="number">0xB8</span>, <span class="number">0x17</span>, <span class="number">0x94</span>, <span class="number">0x6A</span>, <span class="number">0x4A</span>, <span class="number">0x01</span>, <span class="number">0x24</span>, <span class="number">0x14</span>, <span class="number">0x51</span>, <span class="number">0x07</span>, <span class="number">0x65</span>, <span class="number">0x21</span>, <span class="number">0xC8</span>, <span class="number">0x38</span>, <span class="number">0xFD</span>, <span class="number">0x8F</span>, <span class="number">0xC4</span>, <span class="number">0xF5</span>, <span class="number">0xFC</span>]</span><br><span class="line"><span class="comment">#delta=[0,0xc6,0x76,0xda]</span></span><br><span class="line">tb2=[<span class="number">0xA7</span>, <span class="number">0x1C</span>, <span class="number">0x7E</span>, <span class="number">0xAF</span>, <span class="number">0xD9</span>, <span class="number">0xC2</span>, <span class="number">0xC0</span>, <span class="number">0xBE</span>, <span class="number">0x1F</span>, <span class="number">0x45</span>, <span class="number">0x9A</span>, <span class="number">0x85</span>, <span class="number">0x26</span>, <span class="number">0xE3</span>, <span class="number">0x87</span>, <span class="number">0xC3</span>, <span class="number">0x21</span>, <span class="number">0xE0</span>, <span class="number">0x95</span>, <span class="number">0x10</span>, <span class="number">0x71</span>, <span class="number">0x70</span>, <span class="number">0x02</span>, <span class="number">0x75</span>, <span class="number">0x35</span>, <span class="number">0xA5</span>, <span class="number">0x1D</span>, <span class="number">0x0D</span>, <span class="number">0x2F</span>, <span class="number">0xEE</span>, <span class="number">0x25</span>, <span class="number">0x7B</span>, <span class="number">0xB5</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0x8D</span>, <span class="number">0xDB</span>, <span class="number">0x53</span>, <span class="number">0x3A</span>, <span class="number">0x29</span>, <span class="number">0xD4</span>, <span class="number">0x43</span>, <span class="number">0x99</span>, <span class="number">0x97</span>, <span class="number">0x9D</span>, <span class="number">0xE8</span>, <span class="number">0x49</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">c=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">61</span>):</span><br><span class="line">    temp=[]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">47</span>):</span><br><span class="line">        tmp=tb2[j]</span><br><span class="line">        tmp=tmp^table[tmp]</span><br><span class="line">        <span class="keyword">if</span> tmp==enc[i]:</span><br><span class="line">            temp.append(j)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(temp)==<span class="number">1</span>:</span><br><span class="line">        c.append(temp[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c.append(temp)</span><br><span class="line">c.insert(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(i,<span class="built_in">int</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">c[<span class="number">3</span>]=<span class="number">45</span></span><br><span class="line">tblen=[]</span><br><span class="line">l=<span class="number">1</span></span><br><span class="line">index=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tblen.append(<span class="built_in">len</span>(c[i]))</span><br><span class="line">        l*=<span class="built_in">len</span>(c[i])</span><br><span class="line">        index.append(i)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        tblen.append(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tblen)</span><br><span class="line"><span class="built_in">print</span>(index)</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">t1=[<span class="number">7</span>, <span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line">t2=[<span class="number">34</span>, <span class="number">37</span>]</span><br><span class="line">t3=[<span class="number">19</span>, <span class="number">20</span>, <span class="number">43</span>]</span><br><span class="line">t4=[<span class="number">4</span>, <span class="number">31</span>]</span><br><span class="line">t5=[<span class="number">33</span>, <span class="number">45</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  a1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    c[<span class="number">9</span>]=t1[a1]</span><br><span class="line">    <span class="keyword">for</span> a2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        c[<span class="number">10</span>]=t2[a2]</span><br><span class="line">        <span class="keyword">for</span> a3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            c[<span class="number">11</span>]=t2[a3]</span><br><span class="line">            <span class="keyword">for</span> a4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                c[<span class="number">12</span>]=t3[a4]</span><br><span class="line">                <span class="keyword">for</span> a5 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                    c[<span class="number">13</span>]=t3[a5]</span><br><span class="line">                    <span class="keyword">for</span> a6 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                        c[<span class="number">14</span>]=t2[a6]</span><br><span class="line">                        <span class="keyword">for</span> a7 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                            c[<span class="number">16</span>]=t3[a7]</span><br><span class="line">                            <span class="keyword">for</span> a8 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                c[<span class="number">17</span>]=t4[a8]</span><br><span class="line">                                <span class="keyword">for</span> a9 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                                    c[<span class="number">19</span>]=t3[a9]</span><br><span class="line">                                    <span class="keyword">for</span> a10 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                                        c[<span class="number">20</span>]=t1[a10]</span><br><span class="line">                                        <span class="keyword">for</span> a11 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                            c[<span class="number">25</span>]=t4[a11]</span><br><span class="line">                                            <span class="keyword">for</span> a12 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                                                c[<span class="number">27</span>]=t3[a12]</span><br><span class="line">                                                <span class="keyword">for</span> a13 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                                                    c[<span class="number">31</span>]=t3[a13]</span><br><span class="line">                                                    <span class="keyword">for</span> a14 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                                        c[<span class="number">32</span>]=t2[a14]</span><br><span class="line">                                                        <span class="keyword">for</span> a15 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                                            c[<span class="number">34</span>]=t5[a15]</span><br><span class="line">                                                            <span class="keyword">for</span> a16 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                                                                c[<span class="number">37</span>]=t1[a16]</span><br><span class="line">                                                                <span class="keyword">for</span> a17 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                                                    c[<span class="number">38</span>]=t2[a17]</span><br><span class="line">                                                                    <span class="keyword">for</span> a18 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                                                        c[<span class="number">46</span>]=t5[a18]</span><br><span class="line">                                                                        <span class="keyword">for</span> a19 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                                                                            c[<span class="number">58</span>]=t1[a19]</span><br><span class="line">                                                                            <span class="keyword">for</span> a20 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                                                                                c[<span class="number">61</span>]=t1[a20]</span><br><span class="line">                                                                                dododo(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#NCTF{ADF0E239-D911-3781-7E40-A575A19E5835}</span></span><br></pre></td></tr></tbody></table></figure><p>题感觉都挺好玩的，就是把z3 ban掉太不够意思了，自己的算法能力不是太给力。</p><hr><p><strong>总结:C++或者再复杂一点的语言还得是动调，线程的调用关系要梳理清晰还有常见算法，同时巩固了一下西湖的SMC思路。</strong></p><blockquote><p>NCTF还是差一道Android就能AK了，native层的代码看的头皮发麻，有时间要及时复现和反思，另:航哥TQQQLLL，直接给秒了</p></blockquote><p><strong>加上安洵杯，上周小比赛还是蛮多的，能学到很多东西，但还没完全复现。最近临近考试周，实验和考试比较多，要去冲刺了，估计是最近两周不会再摸了。</strong></p><blockquote><p>别贪心，我们不会什么都有，别灰心，我们也不会什么都没有。让我们像个英勇的蒙古骑士一样，拿起手中锋利的马刀，去与更强大的敌人拼杀吧！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF Memory </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GFCTF2021-RE</title>
      <link href="/2021/12/01/GFCTF2021-RE/"/>
      <url>/2021/12/01/GFCTF2021-RE/</url>
      
        <content type="html"><![CDATA[<h1 id="GFCTF"><a href="#GFCTF" class="headerlink" title="GFCTF"></a>GFCTF</h1><h2 id="1、wordy"><a href="#1、wordy" class="headerlink" title="1、wordy"></a>1、wordy</h2><p>签到题，通过花指令来藏putchar</p><p><img src="https://bu.dusays.com/2021/12/01/d8c2e35606a3a.png"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jmp     <span class="keyword">short</span> near ptr loc_116B+<span class="number">1</span></span><br><span class="line">机器码   -&gt; <span class="number">0xeb</span> <span class="number">0xff</span></span><br></pre></td></tr></tbody></table></figure><p>0xeb和0xff ，用idapy写个脚本nop掉0xeb即可，当然也可以十六进制编辑器直接改。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line">des=<span class="number">0x00000000000030F0</span></span><br><span class="line">target=<span class="number">0x000000000000118D</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(des-target):</span><br><span class="line">    <span class="keyword">if</span> Byte(target+i) == <span class="number">0xEB</span>:</span><br><span class="line">        <span class="keyword">if</span> Byte(target+i+<span class="number">1</span>)==<span class="number">0xff</span>:</span><br><span class="line">            PatchByte(target+i,<span class="number">0x90</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'yes'</span>)</span><br></pre></td></tr></tbody></table></figure><p>flag：GFCTF{u_are2wordy} 由putchar依次单字节输出。</p><h2 id="2、BabyRe"><a href="#2、BabyRe" class="headerlink" title="2、BabyRe"></a>2、BabyRe</h2><p>ida载入，发现有Tlscallback函数，并且main之前存在反调试，输入表找到反调试函数。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call    ds:IsDebuggerPresent</span><br><span class="line"><span class="comment">//直接交叉引用全nop掉</span></span><br></pre></td></tr></tbody></table></figure><p>动调，结合汇编，越过一些花指令，简单的jmp + 1 那种直接随手nop掉。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00410798</span>                 push    <span class="number">10</span>h</span><br><span class="line">.text:<span class="number">0041079</span>A                 push    offset byte_4409C0</span><br><span class="line">.text:<span class="number">0041079F</span>                 push    offset unk_4408C0</span><br><span class="line">.text:<span class="number">004107</span>A4                 call    sub_411BF0</span><br><span class="line">.text:<span class="number">004107</span>A9                 add     esp, <span class="number">0</span>Ch</span><br></pre></td></tr></tbody></table></figure><p>在这里用到了一个256的数组和16字节的数组来动态生成一个key，经典RC4，可以调出来也可以代码实现。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a1=[<span class="number">0xAE</span>, <span class="number">0xAB</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x1C</span>, <span class="number">0x61</span>, <span class="number">0x47</span>, <span class="number">0x48</span>, <span class="number">0x91</span>, <span class="number">0xC9</span>, <span class="number">0x7F</span>, <span class="number">0x6F</span>, <span class="number">0x5B</span>, <span class="number">0x20</span>, <span class="number">0xB1</span>, <span class="number">0x8B</span>, <span class="number">0x21</span>, <span class="number">0x6C</span>, <span class="number">0x02</span>, <span class="number">0x95</span>, <span class="number">0xE3</span>, <span class="number">0x3F</span>, <span class="number">0x97</span>, <span class="number">0x98</span>, <span class="number">0xF1</span>, <span class="number">0x0A</span>, <span class="number">0xFF</span>, <span class="number">0x2C</span>, <span class="number">0xA1</span>, <span class="number">0x82</span>, <span class="number">0xCD</span>, <span class="number">0x8C</span>, <span class="number">0x27</span>, <span class="number">0x64</span>, <span class="number">0xC5</span>, <span class="number">0x2F</span>, <span class="number">0xB8</span>, <span class="number">0x84</span>, <span class="number">0x6A</span>, <span class="number">0xC3</span>, <span class="number">0x39</span>, <span class="number">0xBC</span>, <span class="number">0x54</span>, <span class="number">0x06</span>, <span class="number">0x23</span>, <span class="number">0x4D</span>, <span class="number">0x7B</span>, <span class="number">0x83</span>, <span class="number">0x34</span>, <span class="number">0xE1</span>, <span class="number">0xF4</span>, <span class="number">0x0C</span>, <span class="number">0x31</span>, <span class="number">0xC6</span>, <span class="number">0x13</span>, <span class="number">0x16</span>, <span class="number">0x9D</span>, <span class="number">0x2A</span>, <span class="number">0x25</span>, <span class="number">0x72</span>, <span class="number">0x9E</span>, <span class="number">0x57</span>, <span class="number">0x05</span>, <span class="number">0x78</span>, <span class="number">0x96</span>, <span class="number">0x1A</span>, <span class="number">0xB3</span>, <span class="number">0x59</span>, <span class="number">0xD0</span>, <span class="number">0xBD</span>, <span class="number">0x4B</span>, <span class="number">0x0E</span>, <span class="number">0x4E</span>, <span class="number">0x90</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0x80</span>, <span class="number">0x92</span>, <span class="number">0xF3</span>, <span class="number">0xF9</span>, <span class="number">0xEA</span>, <span class="number">0xEE</span>, <span class="number">0xDE</span>, <span class="number">0x68</span>, <span class="number">0x49</span>, <span class="number">0x30</span>, <span class="number">0x3B</span>, <span class="number">0xBE</span>, <span class="number">0xD6</span>, <span class="number">0x1D</span>, <span class="number">0x00</span>, <span class="number">0x6B</span>, <span class="number">0xF0</span>, <span class="number">0x17</span>, <span class="number">0xDA</span>, <span class="number">0x45</span>, <span class="number">0x58</span>, <span class="number">0xA4</span>, <span class="number">0x51</span>, <span class="number">0x07</span>, <span class="number">0x33</span>, <span class="number">0x19</span>, <span class="number">0xA7</span>, <span class="number">0xA5</span>, <span class="number">0x5C</span>, <span class="number">0x3D</span>, <span class="number">0xE4</span>, <span class="number">0x8A</span>, <span class="number">0xB5</span>, <span class="number">0xDF</span>, <span class="number">0x42</span>, <span class="number">0x40</span>, <span class="number">0x81</span>, <span class="number">0x66</span>, <span class="number">0x01</span>, <span class="number">0xA6</span>, <span class="number">0x65</span>, <span class="number">0x8E</span>, <span class="number">0x11</span>, <span class="number">0x38</span>, <span class="number">0x8F</span>, <span class="number">0x75</span>, <span class="number">0x37</span>, <span class="number">0xEB</span>, <span class="number">0x0D</span>, <span class="number">0xA0</span>, <span class="number">0x14</span>, <span class="number">0xF6</span>, <span class="number">0x77</span>, <span class="number">0x8D</span>, <span class="number">0x41</span>, <span class="number">0x5F</span>, <span class="number">0xFD</span>, <span class="number">0x89</span>, <span class="number">0x76</span>, <span class="number">0x53</span>, <span class="number">0xCC</span>, <span class="number">0x74</span>, <span class="number">0x79</span>, <span class="number">0x44</span>, <span class="number">0xEC</span>, <span class="number">0x1E</span>, <span class="number">0x71</span>, <span class="number">0x08</span>, <span class="number">0xAC</span>, <span class="number">0xC7</span>, <span class="number">0x3A</span>, <span class="number">0xD3</span>, <span class="number">0x4F</span>, <span class="number">0x62</span>, <span class="number">0x7D</span>, <span class="number">0x87</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x7C</span>, <span class="number">0xA3</span>, <span class="number">0xC8</span>, <span class="number">0x86</span>, <span class="number">0xAD</span>, <span class="number">0x88</span>, <span class="number">0x5D</span>, <span class="number">0xCA</span>, <span class="number">0xAF</span>, <span class="number">0x03</span>, <span class="number">0x36</span>, <span class="number">0x43</span>, <span class="number">0xDB</span>, <span class="number">0xC1</span>, <span class="number">0x12</span>, <span class="number">0xF2</span>, <span class="number">0x2D</span>, <span class="number">0xE9</span>, <span class="number">0x67</span>, <span class="number">0xCF</span>, <span class="number">0x52</span>, <span class="number">0xD5</span>, <span class="number">0xE5</span>, <span class="number">0x3E</span>, <span class="number">0x26</span>, <span class="number">0xD1</span>, <span class="number">0xC0</span>, <span class="number">0xD8</span>, <span class="number">0x6E</span>, <span class="number">0x9A</span>, <span class="number">0x69</span>, <span class="number">0xDD</span>, <span class="number">0x85</span>, <span class="number">0xD9</span>, <span class="number">0xE0</span>, <span class="number">0xB0</span>, <span class="number">0xE8</span>, <span class="number">0xD4</span>, <span class="number">0xB7</span>, <span class="number">0xF7</span>, <span class="number">0xED</span>, <span class="number">0x3C</span>, <span class="number">0xFC</span>, <span class="number">0xFA</span>, <span class="number">0x9F</span>, <span class="number">0xCE</span>, <span class="number">0xD7</span>, <span class="number">0xBA</span>, <span class="number">0xFB</span>, <span class="number">0x29</span>, <span class="number">0x6D</span>, <span class="number">0xEF</span>, <span class="number">0x2B</span>, <span class="number">0x0B</span>, <span class="number">0x5A</span>, <span class="number">0x9B</span>, <span class="number">0x35</span>, <span class="number">0xE6</span>, <span class="number">0x70</span>, <span class="number">0xC4</span>, <span class="number">0x0F</span>, <span class="number">0xBF</span>, <span class="number">0x99</span>, <span class="number">0x94</span>, <span class="number">0x24</span>, <span class="number">0x50</span>, <span class="number">0x32</span>, <span class="number">0x18</span>, <span class="number">0xB2</span>, <span class="number">0xF5</span>, <span class="number">0xE7</span>, <span class="number">0x46</span>, <span class="number">0x2E</span>, <span class="number">0x22</span>, <span class="number">0x15</span>, <span class="number">0xD2</span>, <span class="number">0x56</span>, <span class="number">0xB9</span>, <span class="number">0xFE</span>, <span class="number">0xDC</span>, <span class="number">0xB6</span>, <span class="number">0xA2</span>, <span class="number">0x93</span>, <span class="number">0xA9</span>, <span class="number">0xA8</span>, <span class="number">0xE2</span>, <span class="number">0x5E</span>, <span class="number">0xAA</span>, <span class="number">0xF8</span>, <span class="number">0x60</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x73</span>, <span class="number">0x09</span>, <span class="number">0x7A</span>, <span class="number">0xC2</span>, <span class="number">0x1B</span>, <span class="number">0xCB</span>, <span class="number">0x28</span>, <span class="number">0x9C</span>, <span class="number">0xBB</span>, <span class="number">0xB4</span>]</span><br><span class="line">a2=[<span class="number">0x08</span>, <span class="number">0xB9</span>, <span class="number">0x0E</span>, <span class="number">0x25</span>, <span class="number">0xB2</span>, <span class="number">0x0D</span>, <span class="number">0x2E</span>, <span class="number">0xC8</span>, <span class="number">0x29</span>, <span class="number">0x2E</span>, <span class="number">0xC4</span>, <span class="number">0x62</span>, <span class="number">0x67</span>, <span class="number">0x50</span>, <span class="number">0x73</span>, <span class="number">0x14</span>]</span><br><span class="line"></span><br><span class="line">v6=<span class="number">0</span></span><br><span class="line">v4=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    v6=(v6+<span class="number">1</span>)%<span class="number">256</span></span><br><span class="line">    v4=(v4+a1[v6])%<span class="number">256</span></span><br><span class="line"></span><br><span class="line">    a1[v6],a1[v4]=a1[v4],a1[v6]</span><br><span class="line">    a2[i]=(a2[i]^a1[(a1[v6]+a1[v4])%<span class="number">256</span>])</span><br><span class="line"><span class="built_in">print</span>(a2)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">''</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">s=<span class="string">'GF?-&gt;GirlFriend?'</span></span><br></pre></td></tr></tbody></table></figure><p>结合调试和动态分析，之后在地址0x4107FE时call了一个函数，猜测是密文处理，依次跟进并且patch无关指令，最后将patch应用到创建的副本文件上。</p><p>修复后的主函数如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">const</span> WCHAR *v3; <span class="comment">// eax</span></span><br><span class="line">  HMODULE LibraryW; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v7; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">const</span> CHAR *v8; <span class="comment">// [esp-4h] [ebp-164h]</span></span><br><span class="line">  <span class="keyword">char</span> v9[<span class="number">24</span>]; <span class="comment">// [esp+10h] [ebp-150h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v10[<span class="number">24</span>]; <span class="comment">// [esp+28h] [ebp-138h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v11[<span class="number">24</span>]; <span class="comment">// [esp+40h] [ebp-120h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [esp+58h] [ebp-108h]</span></span><br><span class="line">  <span class="keyword">int</span> (__stdcall *v13)(_DWORD); <span class="comment">// [esp+5Ch] [ebp-104h]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [esp+60h] [ebp-100h]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [esp+64h] [ebp-FCh]</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [esp+68h] [ebp-F8h]</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// [esp+6Ch] [ebp-F4h]</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [esp+70h] [ebp-F0h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+74h] [ebp-ECh]</span></span><br><span class="line">  <span class="keyword">char</span> v20[<span class="number">100</span>]; <span class="comment">// [esp+78h] [ebp-E8h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> input[<span class="number">100</span>]; <span class="comment">// [esp+DCh] [ebp-84h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v22[<span class="number">4</span>]; <span class="comment">// [esp+140h] [ebp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v23; <span class="comment">// [esp+15Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v18 = <span class="number">0</span>;</span><br><span class="line">  v17 = sub_381290(v10, &amp;unk_3A5DB8);</span><br><span class="line">  v15 = v17;</span><br><span class="line">  v23 = <span class="number">0</span>;</span><br><span class="line">  v16 = sub_381200(v11, &amp;unk_3A5DCC);</span><br><span class="line">  v14 = v16;</span><br><span class="line">  LOBYTE(v23) = <span class="number">1</span>;</span><br><span class="line">  v8 = (<span class="keyword">const</span> CHAR *)sub_3808E0(v15);</span><br><span class="line">  v3 = (<span class="keyword">const</span> WCHAR *)sub_3808A0(v14);</span><br><span class="line">  LibraryW = LoadLibraryW(v3);</span><br><span class="line">  v13 = (<span class="keyword">int</span> (__stdcall *)(_DWORD))sub_380000((<span class="keyword">int</span>)LibraryW, v8);</span><br><span class="line">  LOBYTE(v23) = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">wstring</span>::~<span class="built_in">wstring</span>(v11);</span><br><span class="line">  v23 = <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v10);</span><br><span class="line">  v18 = v13(<span class="number">0</span>);</span><br><span class="line">  sub_381CE0(v18);</span><br><span class="line">  v12 = sub_381310(v9, &amp;unk_3A5DDC);</span><br><span class="line">  v5 = sub_3808E0(v12);</span><br><span class="line">  sub_380180(v5);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v9);</span><br><span class="line">  <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="keyword">sizeof</span>(input));</span><br><span class="line">  <span class="built_in">memset</span>(v20, <span class="number">0</span>, <span class="keyword">sizeof</span>(v20));</span><br><span class="line">  <span class="built_in">memset</span>(v22, <span class="number">0</span>, <span class="keyword">sizeof</span>(v22));</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, input);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(input) != <span class="number">32</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  sub_381BF0((<span class="keyword">int</span>)&amp;unk_3B08C0, (<span class="keyword">int</span>)&amp;unk_3B09C0, <span class="number">0x10</span>u);<span class="comment">// Rc4加密获取下一步的秘钥</span></span><br><span class="line">  memmove_0(v22, &amp;unk_3B09C0, <span class="number">0x10</span>u);</span><br><span class="line">  v7 = <span class="built_in">strlen</span>(input);</span><br><span class="line">  sub_382E10(v7, (<span class="keyword">int</span>)&amp;unk_3B09C0, (<span class="keyword">int</span>)input, (<span class="keyword">int</span>)v20);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( v20[i] != enc[i] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">  sub_380180(<span class="string">"yeeeeeees you did it flag is GFCTF{%s} \n"</span>);</span><br><span class="line">  sub_386BE8(<span class="string">"pause"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修复后的sub_382E10函数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_382E10</span><span class="params">(<span class="keyword">unsigned</span> __int8 a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  _BYTE *Block; <span class="comment">// [esp+8h] [ebp-140h]</span></span><br><span class="line">  <span class="keyword">int</span> m; <span class="comment">// [esp+Ch] [ebp-13Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+10h] [ebp-138h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+10h] [ebp-138h]</span></span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// [esp+10h] [ebp-138h]</span></span><br><span class="line">  <span class="keyword">int</span> n; <span class="comment">// [esp+10h] [ebp-138h]</span></span><br><span class="line">  <span class="keyword">int</span> Dst[<span class="number">36</span>]; <span class="comment">// [esp+14h] [ebp-134h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v12[<span class="number">36</span>]; <span class="comment">// [esp+A4h] [ebp-A4h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [esp+134h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [esp+138h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [esp+13Ch] [ebp-Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [esp+140h] [ebp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  Block = <span class="built_in">malloc</span>(<span class="number">0x32</span>u);</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(Dst, <span class="number">0</span>, <span class="keyword">sizeof</span>(Dst));</span><br><span class="line">  <span class="built_in">memset</span>(v12, <span class="number">0</span>, <span class="keyword">sizeof</span>(v12));</span><br><span class="line">  sub_382B90(a2, &amp;v13);</span><br><span class="line">  sub_382B90(a2 + <span class="number">4</span>, &amp;v14);</span><br><span class="line">  sub_382B90(a2 + <span class="number">8</span>, &amp;v15);</span><br><span class="line">  sub_382B90(a2 + <span class="number">12</span>, &amp;v16);</span><br><span class="line">  Dst[<span class="number">0</span>] = v13 ^ <span class="number">0xA3B1BAC6</span>;</span><br><span class="line">  Dst[<span class="number">1</span>] = dword_3A6010[<span class="number">1</span>] ^ v14;</span><br><span class="line">  Dst[<span class="number">2</span>] = dword_3A6010[<span class="number">2</span>] ^ v15;</span><br><span class="line">  Dst[<span class="number">3</span>] = dword_3A6010[<span class="number">3</span>] ^ v16;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">    Dst[i + <span class="number">4</span>] = Dst[i] ^ sub_382C70(dword_3A6020[i] ^ Dst[i + <span class="number">3</span>] ^ Dst[i + <span class="number">2</span>] ^ Dst[i + <span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; a1; ++j )</span><br><span class="line">    Block[j] = *(_BYTE *)(j + a3);</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">16</span> - (a1 &amp; <span class="number">0xF</span>); ++k )</span><br><span class="line">    Block[a1 + k] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; ((a1 &amp; <span class="number">0xF</span>) != <span class="number">0</span>) + a1 / <span class="number">16</span>; ++m )</span><br><span class="line">  {</span><br><span class="line">    sub_382B90((<span class="keyword">int</span>)&amp;Block[<span class="number">16</span> * m], v12);</span><br><span class="line">    sub_382B90((<span class="keyword">int</span>)&amp;Block[<span class="number">16</span> * m + <span class="number">4</span>], &amp;v12[<span class="number">1</span>]);</span><br><span class="line">    sub_382B90((<span class="keyword">int</span>)&amp;Block[<span class="number">16</span> * m + <span class="number">8</span>], &amp;v12[<span class="number">2</span>]);</span><br><span class="line">    sub_382B90((<span class="keyword">int</span>)&amp;Block[<span class="number">16</span> * m + <span class="number">12</span>], &amp;v12[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">for</span> ( n = <span class="number">0</span>; n &lt; <span class="number">32</span>; ++n )</span><br><span class="line">      v12[n + <span class="number">4</span>] = v12[n] ^ sub_382D30(Dst[n + <span class="number">4</span>] ^ v12[n + <span class="number">3</span>] ^ v12[n + <span class="number">2</span>] ^ v12[n + <span class="number">1</span>]);</span><br><span class="line">    sub_382BF0(v12[<span class="number">35</span>], a4 + <span class="number">16</span> * m);</span><br><span class="line">    sub_382BF0(v12[<span class="number">34</span>], a4 + <span class="number">16</span> * m + <span class="number">4</span>);</span><br><span class="line">    sub_382BF0(v12[<span class="number">33</span>], a4 + <span class="number">16</span> * m + <span class="number">8</span>);</span><br><span class="line">    sub_382BF0(v12[<span class="number">32</span>], a4 + <span class="number">16</span> * m + <span class="number">12</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> sub_38D0EF(Block);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>内存中有[0xA3B1BAC6, 0x56AA3350, 0x677D9197, 0xB27022DC] 和固定的32的int盒和256的盒。</strong>根据特征数组发现是SM4加密。</p><p><strong>在线网站解密SM4</strong><a href="https://the-x.cn/cryptography/Sm4.aspx">https://the-x.cn/cryptography/Sm4.aspx</a><br><strong>ECB zero填充。</strong><br>enc:    0D403B87A566DA74927FBBE1B8CDEBBC59451BC03899AA22AA3F9D21074E811F<br>key:     GF?-&gt;GirlFriend?</p><p><strong>flag: GFCTF{2e69df5961f20aee0897cf1905156344}</strong></p><hr><p><strong>总结：赛时还看了Android，没理清native层的逻辑，调试失败最终没能解出，同时这次比赛的人数较少，赛中逆向就上两题有解，侥幸拿了一血。学到很多东西，其余还有待复现。Android和winAPI 及协议方面有待提高。</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF Memory </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西湖论剑2021-Re</title>
      <link href="/2021/11/21/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912021/"/>
      <url>/2021/11/21/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912021/</url>
      
        <content type="html"><![CDATA[<p><strong>感悟: 收获挺大的，同时意识到自己的做题思路和方法还有所欠缺，还是要做好应对体力活的准备。</strong></p><hr><h3 id="1、ROR"><a href="#1、ROR" class="headerlink" title="1、ROR"></a>1、ROR</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_406029);</span><br><span class="line">  v6[<span class="number">0</span>] = <span class="number">128</span>;</span><br><span class="line">  v6[<span class="number">1</span>] = <span class="number">64</span>;</span><br><span class="line">  v6[<span class="number">2</span>] = <span class="number">32</span>;</span><br><span class="line">  v6[<span class="number">3</span>] = <span class="number">16</span>;</span><br><span class="line">  v6[<span class="number">4</span>] = <span class="number">8</span>;</span><br><span class="line">  v6[<span class="number">5</span>] = <span class="number">4</span>;</span><br><span class="line">  v6[<span class="number">6</span>] = <span class="number">2</span>;</span><br><span class="line">  v6[<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="keyword">sizeof</span>(input));</span><br><span class="line">  <span class="built_in">memset</span>(Buf2, <span class="number">0</span>, <span class="keyword">sizeof</span>(Buf2));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Input:"</span>, v4);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%40s"</span>, (<span class="keyword">char</span>)input);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(input) != <span class="number">40</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i += <span class="number">8</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j )</span><br><span class="line">    {</span><br><span class="line">      v5 = ((v6[j] &amp; input[i + <span class="number">3</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">3</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)input[i + <span class="number">3</span>]) &gt;&gt; ((<span class="number">3</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; input[i + <span class="number">2</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">2</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)input[i + <span class="number">2</span>]) &gt;&gt; ((<span class="number">2</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; input[i + <span class="number">1</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">1</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)input[i + <span class="number">1</span>]) &gt;&gt; ((<span class="number">1</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; (<span class="keyword">unsigned</span> __int8)input[i]) &lt;&lt; (<span class="number">8</span> - -j % <span class="number">8u</span>)) | ((v6[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)input[i]) &gt;&gt; (-j % <span class="number">8u</span>));</span><br><span class="line">      Buf2[j + i] = byte_405000[(<span class="keyword">unsigned</span> __int8)(((v6[j] &amp; (<span class="keyword">unsigned</span> __int8)input[i + <span class="number">7</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">7</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)input[i + <span class="number">7</span>]) &gt;&gt; ((<span class="number">7</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; input[i + <span class="number">6</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">6</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)input[i + <span class="number">6</span>]) &gt;&gt; ((<span class="number">6</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; input[i + <span class="number">5</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">5</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)input[i + <span class="number">5</span>]) &gt;&gt; ((<span class="number">5</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; input[i + <span class="number">4</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">4</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)input[i + <span class="number">4</span>]) &gt;&gt; ((<span class="number">4</span> - j) % <span class="number">8u</span>)) | v5)];</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">memcmp</span>(&amp;unk_405100, Buf2, <span class="number">0x28</span>u) )</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Congratulations"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"flag is DASCTF{your input}"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>主要就是对输入8个一组进行位运算，之后再进行表byte_405000的索引，看到立马想到z3，修改代码z3解密。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">v6=[<span class="number">128</span>,<span class="number">64</span>,<span class="number">32</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">input</span>=[BitVec(<span class="string">'s%d'</span>%i,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>)]</span><br><span class="line">Buf2=[<span class="number">0</span>]*<span class="number">40</span></span><br><span class="line">byte_405000=[<span class="number">0x65</span>, <span class="number">0x08</span>, <span class="number">0xF7</span>, <span class="number">0x12</span>, <span class="number">0xBC</span>, <span class="number">0xC3</span>, <span class="number">0xCF</span>, <span class="number">0xB8</span>, <span class="number">0x83</span>, <span class="number">0x7B</span>, <span class="number">0x02</span>, <span class="number">0xD5</span>, <span class="number">0x34</span>, <span class="number">0xBD</span>, <span class="number">0x9F</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x76</span>, <span class="number">0xD4</span>, <span class="number">0xD7</span>, <span class="number">0xEB</span>, <span class="number">0x90</span>, <span class="number">0x89</span>, <span class="number">0x5E</span>, <span class="number">0x54</span>, <span class="number">0x01</span>, <span class="number">0x7D</span>, <span class="number">0xF4</span>, <span class="number">0x11</span>, <span class="number">0xFF</span>, <span class="number">0x99</span>, <span class="number">0x49</span>, <span class="number">0xAD</span>, <span class="number">0x57</span>, <span class="number">0x46</span>, <span class="number">0x67</span>, <span class="number">0x2A</span>, <span class="number">0x9D</span>, <span class="number">0x7F</span>, <span class="number">0xD2</span>, <span class="number">0xE1</span>, <span class="number">0x21</span>, <span class="number">0x8B</span>, <span class="number">0x1D</span>, <span class="number">0x5A</span>, <span class="number">0x91</span>, <span class="number">0x38</span>, <span class="number">0x94</span>, <span class="number">0xF9</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0xCA</span>, <span class="number">0xE8</span>, <span class="number">0xCB</span>, <span class="number">0x5F</span>, <span class="number">0x19</span>, <span class="number">0xF6</span>, <span class="number">0xF0</span>, <span class="number">0x3C</span>, <span class="number">0xDE</span>, <span class="number">0xDA</span>, <span class="number">0xEA</span>, <span class="number">0x9C</span>, <span class="number">0x14</span>, <span class="number">0x75</span>, <span class="number">0xA4</span>, <span class="number">0x0D</span>, <span class="number">0x25</span>, <span class="number">0x58</span>, <span class="number">0xFC</span>, <span class="number">0x44</span>, <span class="number">0x86</span>, <span class="number">0x05</span>, <span class="number">0x6B</span>, <span class="number">0x43</span>, <span class="number">0x9A</span>, <span class="number">0x6D</span>, <span class="number">0xD1</span>, <span class="number">0x63</span>, <span class="number">0x98</span>, <span class="number">0x68</span>, <span class="number">0x2D</span>, <span class="number">0x52</span>, <span class="number">0x3D</span>, <span class="number">0xDD</span>, <span class="number">0x88</span>, <span class="number">0xD6</span>, <span class="number">0xD0</span>, <span class="number">0xA2</span>, <span class="number">0xED</span>, <span class="number">0xA5</span>, <span class="number">0x3B</span>, <span class="number">0x45</span>, <span class="number">0x3E</span>, <span class="number">0xF2</span>, <span class="number">0x22</span>, <span class="number">0x06</span>, <span class="number">0xF3</span>, <span class="number">0x1A</span>, <span class="number">0xA8</span>, <span class="number">0x09</span>, <span class="number">0xDC</span>, <span class="number">0x7C</span>, <span class="number">0x4B</span>, <span class="number">0x5C</span>, <span class="number">0x1E</span>, <span class="number">0xA1</span>, <span class="number">0xB0</span>, <span class="number">0x71</span>, <span class="number">0x04</span>, <span class="number">0xE2</span>, <span class="number">0x9B</span>, <span class="number">0xB7</span>, <span class="number">0x10</span>, <span class="number">0x4E</span>, <span class="number">0x16</span>, <span class="number">0x23</span>, <span class="number">0x82</span>, <span class="number">0x56</span>, <span class="number">0xD8</span>, <span class="number">0x61</span>, <span class="number">0xB4</span>, <span class="number">0x24</span>, <span class="number">0x7E</span>, <span class="number">0x87</span>, <span class="number">0xF8</span>, <span class="number">0x0A</span>, <span class="number">0x13</span>, <span class="number">0xE3</span>, <span class="number">0xE4</span>, <span class="number">0xE6</span>, <span class="number">0x1C</span>, <span class="number">0x35</span>, <span class="number">0x2C</span>, <span class="number">0xB1</span>, <span class="number">0xEC</span>, <span class="number">0x93</span>, <span class="number">0x66</span>, <span class="number">0x03</span>, <span class="number">0xA9</span>, <span class="number">0x95</span>, <span class="number">0xBB</span>, <span class="number">0xD3</span>, <span class="number">0x51</span>, <span class="number">0x39</span>, <span class="number">0xE7</span>, <span class="number">0xC9</span>, <span class="number">0xCE</span>, <span class="number">0x29</span>, <span class="number">0x72</span>, <span class="number">0x47</span>, <span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x15</span>, <span class="number">0xDF</span>, <span class="number">0xD9</span>, <span class="number">0x17</span>, <span class="number">0x74</span>, <span class="number">0x3F</span>, <span class="number">0x62</span>, <span class="number">0xCD</span>, <span class="number">0x41</span>, <span class="number">0x07</span>, <span class="number">0x73</span>, <span class="number">0x53</span>, <span class="number">0x85</span>, <span class="number">0x31</span>, <span class="number">0x8A</span>, <span class="number">0x30</span>, <span class="number">0xAA</span>, <span class="number">0xAC</span>, <span class="number">0x2E</span>, <span class="number">0xA3</span>, <span class="number">0x50</span>, <span class="number">0x7A</span>, <span class="number">0xB5</span>, <span class="number">0x8E</span>, <span class="number">0x69</span>, <span class="number">0x1F</span>, <span class="number">0x6A</span>, <span class="number">0x97</span>, <span class="number">0x55</span>, <span class="number">0x3A</span>, <span class="number">0xB2</span>, <span class="number">0x59</span>, <span class="number">0xAB</span>, <span class="number">0xE0</span>, <span class="number">0x28</span>, <span class="number">0xC0</span>, <span class="number">0xB3</span>, <span class="number">0xBE</span>, <span class="number">0xCC</span>, <span class="number">0xC6</span>, <span class="number">0x2B</span>, <span class="number">0x5B</span>, <span class="number">0x92</span>, <span class="number">0xEE</span>, <span class="number">0x60</span>, <span class="number">0x20</span>, <span class="number">0x84</span>, <span class="number">0x4D</span>, <span class="number">0x0F</span>, <span class="number">0x26</span>, <span class="number">0x4A</span>, <span class="number">0x48</span>, <span class="number">0x0B</span>, <span class="number">0x36</span>, <span class="number">0x80</span>, <span class="number">0x5D</span>, <span class="number">0x6F</span>, <span class="number">0x4C</span>, <span class="number">0xB9</span>, <span class="number">0x81</span>, <span class="number">0x96</span>, <span class="number">0x32</span>, <span class="number">0xFD</span>, <span class="number">0x40</span>, <span class="number">0x8D</span>, <span class="number">0x27</span>, <span class="number">0xC1</span>, <span class="number">0x78</span>, <span class="number">0x4F</span>, <span class="number">0x79</span>, <span class="number">0xC8</span>, <span class="number">0x0E</span>, <span class="number">0x8C</span>, <span class="number">0xE5</span>, <span class="number">0x9E</span>, <span class="number">0xAE</span>, <span class="number">0xBF</span>, <span class="number">0xEF</span>, <span class="number">0x42</span>, <span class="number">0xC5</span>, <span class="number">0xAF</span>, <span class="number">0xA0</span>, <span class="number">0xC2</span>, <span class="number">0xFA</span>, <span class="number">0xC7</span>, <span class="number">0xB6</span>, <span class="number">0xDB</span>, <span class="number">0x18</span>, <span class="number">0xC4</span>, <span class="number">0xA6</span>, <span class="number">0xFE</span>, <span class="number">0xE9</span>, <span class="number">0xF5</span>, <span class="number">0x6E</span>, <span class="number">0x64</span>, <span class="number">0x2F</span>, <span class="number">0xF1</span>, <span class="number">0x1B</span>, <span class="number">0xFB</span>, <span class="number">0xBA</span>, <span class="number">0xA7</span>, <span class="number">0x37</span>, <span class="number">0x8F</span>]</span><br><span class="line">enc=[<span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0x24</span>, <span class="number">0x36</span>, <span class="number">0x9D</span>, <span class="number">0x71</span>, <span class="number">0xB8</span>, <span class="number">0xC8</span>, <span class="number">0x65</span>, <span class="number">0xFB</span>, <span class="number">0x87</span>, <span class="number">0x7F</span>, <span class="number">0x9A</span>, <span class="number">0x9C</span>, <span class="number">0xB1</span>, <span class="number">0xDF</span>, <span class="number">0x65</span>, <span class="number">0x8F</span>, <span class="number">0x9D</span>, <span class="number">0x39</span>, <span class="number">0x8F</span>, <span class="number">0x11</span>, <span class="number">0xF6</span>, <span class="number">0x8E</span>, <span class="number">0x65</span>, <span class="number">0x42</span>, <span class="number">0xDA</span>, <span class="number">0xB4</span>, <span class="number">0x8C</span>, <span class="number">0x39</span>, <span class="number">0xFB</span>, <span class="number">0x99</span>, <span class="number">0x65</span>, <span class="number">0x48</span>, <span class="number">0x6A</span>, <span class="number">0xCA</span>, <span class="number">0x63</span>, <span class="number">0xE7</span>, <span class="number">0xA4</span>, <span class="number">0x79</span>]</span><br><span class="line">tmp=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    tmp.append(byte_405000.index(enc[i]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">40</span>,<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        v5 = ((v6[j] &amp; <span class="built_in">input</span>[i + <span class="number">3</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">3</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; <span class="built_in">input</span>[i + <span class="number">3</span>]) &gt;&gt; ((<span class="number">3</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; <span class="built_in">input</span>[i + <span class="number">2</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">2</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; <span class="built_in">input</span>[i + <span class="number">2</span>]) &gt;&gt; ((<span class="number">2</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; <span class="built_in">input</span>[i + <span class="number">1</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">1</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; <span class="built_in">input</span>[i + <span class="number">1</span>]) &gt;&gt; ((<span class="number">1</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; <span class="built_in">input</span>[i]) &lt;&lt; (<span class="number">8</span> - -j % <span class="number">8</span>)) | ((v6[j] &amp; <span class="built_in">input</span>[i]) &gt;&gt; (-j % <span class="number">8</span>))</span><br><span class="line">        Buf2[j + i]=((((v6[j] &amp; <span class="built_in">input</span>[i + <span class="number">7</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">7</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; <span class="built_in">input</span>[i + <span class="number">7</span>]) &gt;&gt; ((<span class="number">7</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; <span class="built_in">input</span>[i + <span class="number">6</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">6</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; <span class="built_in">input</span>[i + <span class="number">6</span>]) &gt;&gt; ((<span class="number">6</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; <span class="built_in">input</span>[i + <span class="number">5</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">5</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; <span class="built_in">input</span>[i + <span class="number">5</span>]) &gt;&gt; ((<span class="number">5</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; <span class="built_in">input</span>[i + <span class="number">4</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">4</span> - j) % <span class="number">8</span>)) | ((v6[j] &amp; <span class="built_in">input</span>[i + <span class="number">4</span>]) &gt;&gt; ((<span class="number">4</span> - j) % <span class="number">8</span>)) | v5))&amp;<span class="number">0xff</span></span><br><span class="line">s=Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    s.add(Buf2[i]==tmp[i])</span><br><span class="line">s.check()</span><br><span class="line"><span class="keyword">if</span> s.check():</span><br><span class="line">    m=s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(m[<span class="built_in">input</span>[i]].as_long()),end=<span class="string">''</span>)</span><br></pre></td></tr></tbody></table></figure><p>赛后整理的时候copy一遍就过了，比赛的时候出了点问题，卡了段时间。</p><p>另一种解法就是了解程序的位运算在干什么，v6数组对应的8位二进制每一位,单拿一小段分析。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">0</span></span><br><span class="line">j=<span class="number">0</span>~<span class="number">8</span></span><br><span class="line">v6[<span class="number">0</span>]=<span class="number">128</span>-&gt;<span class="number">0x10000000</span></span><br><span class="line">((v6[j] &amp; input[i + <span class="number">3</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">3</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)input[i + <span class="number">3</span>]) &gt;&gt; ((<span class="number">3</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; input[i + <span class="number">2</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">2</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)input[i + <span class="number">2</span>]) &gt;&gt; ((<span class="number">2</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; input[i + <span class="number">1</span>]) &lt;&lt; (<span class="number">8</span> - (<span class="number">1</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)input[i + <span class="number">1</span>]) &gt;&gt; ((<span class="number">1</span> - j) % <span class="number">8u</span>)) | ((v6[j] &amp; (<span class="keyword">unsigned</span> __int8)input[i]) &lt;&lt; (<span class="number">8</span> - -j % <span class="number">8u</span>)) | ((v6[j] &amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)input[i]) &gt;&gt; (-j % <span class="number">8u</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*上为char input[0~3]  分别与上v6[j]取出最高位，因为第二步限定(unsigned __int8)类型，所以只看右移，左移都舍去了</span></span><br><span class="line"><span class="comment">input 0   intput 1  input2  input3</span></span><br><span class="line"><span class="comment">高位  a0000000  b0000000  c0000000  d0000000</span></span><br><span class="line"><span class="comment">input3 右移3  input2 右移2  input 1 右移1 ..</span></span><br><span class="line"><span class="comment">变成 abcd0000</span></span><br><span class="line"><span class="comment">后半段也类似 加上input4~7 假设7为x0000000则 最后变为abcd...x</span></span><br><span class="line"><span class="comment">也就是8个一组 对应位的二进制重新组合按照顺序做到右放0-7的对应位</span></span><br><span class="line"><span class="comment">逆过程，通过enc在table中的索引转换为8个二进制，之后8个一组，重组即可。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>exp:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">v6=[<span class="number">128</span>,<span class="number">64</span>,<span class="number">32</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">Buf2=[<span class="number">0</span>]*<span class="number">40</span></span><br><span class="line">byte_405000=[<span class="number">0x65</span>, <span class="number">0x08</span>, <span class="number">0xF7</span>, <span class="number">0x12</span>, <span class="number">0xBC</span>, <span class="number">0xC3</span>, <span class="number">0xCF</span>, <span class="number">0xB8</span>, <span class="number">0x83</span>, <span class="number">0x7B</span>, <span class="number">0x02</span>, <span class="number">0xD5</span>, <span class="number">0x34</span>, <span class="number">0xBD</span>, <span class="number">0x9F</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x76</span>, <span class="number">0xD4</span>, <span class="number">0xD7</span>, <span class="number">0xEB</span>, <span class="number">0x90</span>, <span class="number">0x89</span>, <span class="number">0x5E</span>, <span class="number">0x54</span>, <span class="number">0x01</span>, <span class="number">0x7D</span>, <span class="number">0xF4</span>, <span class="number">0x11</span>, <span class="number">0xFF</span>, <span class="number">0x99</span>, <span class="number">0x49</span>, <span class="number">0xAD</span>, <span class="number">0x57</span>, <span class="number">0x46</span>, <span class="number">0x67</span>, <span class="number">0x2A</span>, <span class="number">0x9D</span>, <span class="number">0x7F</span>, <span class="number">0xD2</span>, <span class="number">0xE1</span>, <span class="number">0x21</span>, <span class="number">0x8B</span>, <span class="number">0x1D</span>, <span class="number">0x5A</span>, <span class="number">0x91</span>, <span class="number">0x38</span>, <span class="number">0x94</span>, <span class="number">0xF9</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0xCA</span>, <span class="number">0xE8</span>, <span class="number">0xCB</span>, <span class="number">0x5F</span>, <span class="number">0x19</span>, <span class="number">0xF6</span>, <span class="number">0xF0</span>, <span class="number">0x3C</span>, <span class="number">0xDE</span>, <span class="number">0xDA</span>, <span class="number">0xEA</span>, <span class="number">0x9C</span>, <span class="number">0x14</span>, <span class="number">0x75</span>, <span class="number">0xA4</span>, <span class="number">0x0D</span>, <span class="number">0x25</span>, <span class="number">0x58</span>, <span class="number">0xFC</span>, <span class="number">0x44</span>, <span class="number">0x86</span>, <span class="number">0x05</span>, <span class="number">0x6B</span>, <span class="number">0x43</span>, <span class="number">0x9A</span>, <span class="number">0x6D</span>, <span class="number">0xD1</span>, <span class="number">0x63</span>, <span class="number">0x98</span>, <span class="number">0x68</span>, <span class="number">0x2D</span>, <span class="number">0x52</span>, <span class="number">0x3D</span>, <span class="number">0xDD</span>, <span class="number">0x88</span>, <span class="number">0xD6</span>, <span class="number">0xD0</span>, <span class="number">0xA2</span>, <span class="number">0xED</span>, <span class="number">0xA5</span>, <span class="number">0x3B</span>, <span class="number">0x45</span>, <span class="number">0x3E</span>, <span class="number">0xF2</span>, <span class="number">0x22</span>, <span class="number">0x06</span>, <span class="number">0xF3</span>, <span class="number">0x1A</span>, <span class="number">0xA8</span>, <span class="number">0x09</span>, <span class="number">0xDC</span>, <span class="number">0x7C</span>, <span class="number">0x4B</span>, <span class="number">0x5C</span>, <span class="number">0x1E</span>, <span class="number">0xA1</span>, <span class="number">0xB0</span>, <span class="number">0x71</span>, <span class="number">0x04</span>, <span class="number">0xE2</span>, <span class="number">0x9B</span>, <span class="number">0xB7</span>, <span class="number">0x10</span>, <span class="number">0x4E</span>, <span class="number">0x16</span>, <span class="number">0x23</span>, <span class="number">0x82</span>, <span class="number">0x56</span>, <span class="number">0xD8</span>, <span class="number">0x61</span>, <span class="number">0xB4</span>, <span class="number">0x24</span>, <span class="number">0x7E</span>, <span class="number">0x87</span>, <span class="number">0xF8</span>, <span class="number">0x0A</span>, <span class="number">0x13</span>, <span class="number">0xE3</span>, <span class="number">0xE4</span>, <span class="number">0xE6</span>, <span class="number">0x1C</span>, <span class="number">0x35</span>, <span class="number">0x2C</span>, <span class="number">0xB1</span>, <span class="number">0xEC</span>, <span class="number">0x93</span>, <span class="number">0x66</span>, <span class="number">0x03</span>, <span class="number">0xA9</span>, <span class="number">0x95</span>, <span class="number">0xBB</span>, <span class="number">0xD3</span>, <span class="number">0x51</span>, <span class="number">0x39</span>, <span class="number">0xE7</span>, <span class="number">0xC9</span>, <span class="number">0xCE</span>, <span class="number">0x29</span>, <span class="number">0x72</span>, <span class="number">0x47</span>, <span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x15</span>, <span class="number">0xDF</span>, <span class="number">0xD9</span>, <span class="number">0x17</span>, <span class="number">0x74</span>, <span class="number">0x3F</span>, <span class="number">0x62</span>, <span class="number">0xCD</span>, <span class="number">0x41</span>, <span class="number">0x07</span>, <span class="number">0x73</span>, <span class="number">0x53</span>, <span class="number">0x85</span>, <span class="number">0x31</span>, <span class="number">0x8A</span>, <span class="number">0x30</span>, <span class="number">0xAA</span>, <span class="number">0xAC</span>, <span class="number">0x2E</span>, <span class="number">0xA3</span>, <span class="number">0x50</span>, <span class="number">0x7A</span>, <span class="number">0xB5</span>, <span class="number">0x8E</span>, <span class="number">0x69</span>, <span class="number">0x1F</span>, <span class="number">0x6A</span>, <span class="number">0x97</span>, <span class="number">0x55</span>, <span class="number">0x3A</span>, <span class="number">0xB2</span>, <span class="number">0x59</span>, <span class="number">0xAB</span>, <span class="number">0xE0</span>, <span class="number">0x28</span>, <span class="number">0xC0</span>, <span class="number">0xB3</span>, <span class="number">0xBE</span>, <span class="number">0xCC</span>, <span class="number">0xC6</span>, <span class="number">0x2B</span>, <span class="number">0x5B</span>, <span class="number">0x92</span>, <span class="number">0xEE</span>, <span class="number">0x60</span>, <span class="number">0x20</span>, <span class="number">0x84</span>, <span class="number">0x4D</span>, <span class="number">0x0F</span>, <span class="number">0x26</span>, <span class="number">0x4A</span>, <span class="number">0x48</span>, <span class="number">0x0B</span>, <span class="number">0x36</span>, <span class="number">0x80</span>, <span class="number">0x5D</span>, <span class="number">0x6F</span>, <span class="number">0x4C</span>, <span class="number">0xB9</span>, <span class="number">0x81</span>, <span class="number">0x96</span>, <span class="number">0x32</span>, <span class="number">0xFD</span>, <span class="number">0x40</span>, <span class="number">0x8D</span>, <span class="number">0x27</span>, <span class="number">0xC1</span>, <span class="number">0x78</span>, <span class="number">0x4F</span>, <span class="number">0x79</span>, <span class="number">0xC8</span>, <span class="number">0x0E</span>, <span class="number">0x8C</span>, <span class="number">0xE5</span>, <span class="number">0x9E</span>, <span class="number">0xAE</span>, <span class="number">0xBF</span>, <span class="number">0xEF</span>, <span class="number">0x42</span>, <span class="number">0xC5</span>, <span class="number">0xAF</span>, <span class="number">0xA0</span>, <span class="number">0xC2</span>, <span class="number">0xFA</span>, <span class="number">0xC7</span>, <span class="number">0xB6</span>, <span class="number">0xDB</span>, <span class="number">0x18</span>, <span class="number">0xC4</span>, <span class="number">0xA6</span>, <span class="number">0xFE</span>, <span class="number">0xE9</span>, <span class="number">0xF5</span>, <span class="number">0x6E</span>, <span class="number">0x64</span>, <span class="number">0x2F</span>, <span class="number">0xF1</span>, <span class="number">0x1B</span>, <span class="number">0xFB</span>, <span class="number">0xBA</span>, <span class="number">0xA7</span>, <span class="number">0x37</span>, <span class="number">0x8F</span>]</span><br><span class="line">enc=[<span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0x24</span>, <span class="number">0x36</span>, <span class="number">0x9D</span>, <span class="number">0x71</span>, <span class="number">0xB8</span>, <span class="number">0xC8</span>, <span class="number">0x65</span>, <span class="number">0xFB</span>, <span class="number">0x87</span>, <span class="number">0x7F</span>, <span class="number">0x9A</span>, <span class="number">0x9C</span>, <span class="number">0xB1</span>, <span class="number">0xDF</span>, <span class="number">0x65</span>, <span class="number">0x8F</span>, <span class="number">0x9D</span>, <span class="number">0x39</span>, <span class="number">0x8F</span>, <span class="number">0x11</span>, <span class="number">0xF6</span>, <span class="number">0x8E</span>, <span class="number">0x65</span>, <span class="number">0x42</span>, <span class="number">0xDA</span>, <span class="number">0xB4</span>, <span class="number">0x8C</span>, <span class="number">0x39</span>, <span class="number">0xFB</span>, <span class="number">0x99</span>, <span class="number">0x65</span>, <span class="number">0x48</span>, <span class="number">0x6A</span>, <span class="number">0xCA</span>, <span class="number">0x63</span>, <span class="number">0xE7</span>, <span class="number">0xA4</span>, <span class="number">0x79</span>]</span><br><span class="line">tmp=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    tmp.append(<span class="built_in">bin</span>(byte_405000.index(enc[i]))[<span class="number">2</span>:].zfill(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br><span class="line">m=[<span class="string">''</span>]*<span class="number">40</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">40</span>,<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):<span class="comment">#控制tmp的索引</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            m[i+j]+=tmp[i+p][j]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(i,<span class="number">2</span>)),end=<span class="string">''</span>)</span><br><span class="line"><span class="comment">#Q5la5_3KChtem6_HYHk_NlHhNZz73aCZeK05II96</span></span><br></pre></td></tr></tbody></table></figure><p>上述两种方法都可以求逆，不过擅长使用z3来解这道题是非常迅速的，减少了代码分析量。</p><h3 id="2、TacticalArmed"><a href="#2、TacticalArmed" class="headerlink" title="2、TacticalArmed"></a>2、TacticalArmed</h3><p>赛后复现，学到很多东西，基础还是⑧顶，尤其是对执行流程有修改的代码。</p><p>win逆向，有Tlscallback函数，开了一个进程，跟进进程处理函数。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">004010</span>D6 ;   __try { <span class="comment">// __except at loc_4010F1</span></span><br><span class="line">.text:<span class="number">004010</span>D6                 mov     [ebp+ms_exc.registration.TryLevel], <span class="number">0</span></span><br><span class="line">.text:<span class="number">004010</span>DD                 <span class="keyword">int</span>     <span class="number">2</span>Dh             ; Windows NT - debugging services: eax = type</span><br><span class="line">.text:<span class="number">004010</span>DF                 nop</span><br><span class="line">.text:<span class="number">004010E0</span>                 jmp     <span class="keyword">short</span> loc_401142</span><br><span class="line">.text:<span class="number">004010E0</span> ;   } <span class="comment">// starts at 4010D6</span></span><br></pre></td></tr></tbody></table></figure><p>存在Int 2d反调试，即正常运行会引发异常而检测到调试器则继续执行，所以真正代码逻辑在异常处理中。</p><p>分析代码知是对dword_405000这个内存中赋值了4个int，一般是修改key或某个解密需要的参数。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dword_405000 -&gt;<span class="number">7</span>CE45630h  <span class="number">58334908</span>h  <span class="number">66398867</span>h  <span class="number">0</span>C35195B1h</span><br><span class="line"><span class="comment">//retn 指令</span></span><br><span class="line">retn <span class="number">4</span> -&gt; pop eip  add esp,<span class="number">4</span></span><br></pre></td></tr></tbody></table></figure><p>之后主函数内用到了一个函数指针v21,来表示lpadress的函数。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  lpAdress = <span class="built_in">malloc</span>(<span class="number">0x10</span>u);</span><br><span class="line">  VirtualProtect(lpAdress, <span class="number">0x10</span>u, <span class="number">0x40</span>u, &amp;flOldProtect);</span><br><span class="line">  v21 = (__int64 (__fastcall *)(<span class="keyword">int</span>, _DWORD))lpAdress;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数指针</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Func</span><span class="params">(<span class="keyword">int</span> x)</span></span>;   <span class="comment">/*声明一个函数*/</span></span><br><span class="line">    <span class="keyword">int</span> (*p) (<span class="keyword">int</span>);  <span class="comment">/*定义一个函数指针*/</span></span><br><span class="line">    p = Func;          <span class="comment">/*将Func函数的首地址赋给指针变量p*/</span></span><br><span class="line">p(<span class="number">1</span>) 等价 Func(<span class="number">1</span>)  </span><br></pre></td></tr></tbody></table></figure><p>整体main函数如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">lpAdress = <span class="built_in">malloc</span>(<span class="number">0x10</span>u);</span><br><span class="line">VirtualProtect(lpAdress, <span class="number">0x10</span>u, <span class="number">0x40</span>u, &amp;flOldProtect);</span><br><span class="line">v21 = (__int64 (__fastcall *)(<span class="keyword">int</span>, _DWORD))lpAdress;</span><br><span class="line">Src = (<span class="keyword">char</span> *)&amp;loc_405010;                    <span class="comment">// 指向一个神秘的数串 类似opcode</span></span><br><span class="line">Size = <span class="number">0</span>;</span><br><span class="line">v18 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Input flag here:"</span>, v13);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%255s"</span>, (<span class="keyword">char</span>)Str);</span><br><span class="line">v17 = <span class="built_in">strlen</span>(Str) &gt;&gt; <span class="number">3</span>;                       <span class="comment">// size_t是unsigned int 的一个宏定义 主要用来计数</span></span><br><span class="line">a3 = <span class="number">0</span>;</span><br><span class="line">v15 = <span class="number">0</span>;</span><br><span class="line">a2 = <span class="number">0</span>;</span><br><span class="line">v12 = v4;</span><br><span class="line">HIDWORD(v11) = v3;</span><br><span class="line">v5 = __readeflags();</span><br><span class="line">v10 = v5;</span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )                                   <span class="comment">// v15循环33次 分清</span></span><br><span class="line">{</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )                                 </span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">while</span> ( Size )</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">memset</span>(lpAdress, <span class="number">0</span>, <span class="number">0x10</span>u);             <span class="comment">// 清0</span></span><br><span class="line">      <span class="built_in">memcpy</span>(lpAdress, Src, Size);            <span class="comment">// 把src处指向的代码 赋值过去</span></span><br><span class="line">      dispatch((<span class="keyword">int</span>)lpAdress, a2, a3);</span><br><span class="line">      *((_BYTE *)lpAdress + Size) = <span class="number">0xC3</span>;     <span class="comment">// ret的机器码是0xc3</span></span><br><span class="line">      __writeeflags(v10);</span><br><span class="line">      v6 = v21(v12, HIDWORD(v11));</span><br><span class="line">      v12 = v7;</span><br><span class="line">      v11 = v6;</span><br><span class="line">      v8 = __readeflags();</span><br><span class="line">      v10 = v8;</span><br><span class="line">      ++a2;</span><br><span class="line">      Src += <span class="number">16</span>;</span><br><span class="line">      Size = unk_405220[v18++];               <span class="comment">// 读取opcode的大小 控制里面的代码执行</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( v15 == <span class="number">33</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++v15;</span><br><span class="line">    a2 = <span class="number">0</span>;</span><br><span class="line">    Src = (<span class="keyword">char</span> *)&amp;loc_405010;</span><br><span class="line">    Size = unk_405220[<span class="number">0</span>];                     <span class="comment">// 6</span></span><br><span class="line">    v18 = <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( ++a3 == v17 )                          <span class="comment">// v17是输入长度//8  输入8个一组</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  Size = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">memcmp</span>(Str, dword_40532C, <span class="number">40u</span>) )</span><br><span class="line">{</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Wrong"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Congratulations"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"flag is DASCTF{your input}"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></tbody></table></figure><p>主要步骤是是while(size)里的循环，主要是代码的执行。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*((_BYTE *)lpAdress + Size) = <span class="number">0xC3</span>;</span><br><span class="line">是对每个语句末写上ret语句，用于返回。</span><br><span class="line">之后通过v21来调用，在调用前还有一个针对opcode的smc</span><br></pre></td></tr></tbody></table></figure><p>用switch case语句来进行不同变量的分发，比较新颖。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">dispatch</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-50h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+50h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+58h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_406015);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; *(_BYTE *)(i + a1); ++i )        <span class="comment">// 一直找opcode为0的地方停</span></span><br><span class="line">    ;</span><br><span class="line">  v4 = dword_4052A8[a2] % <span class="number">0x10</span>u;</span><br><span class="line">  v3 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)dword_4052A8[a2] &gt;&gt; <span class="number">4</span>;     <span class="comment">// 16进制数的高位和低位 16进制模式</span></span><br><span class="line">  <span class="keyword">switch</span> ( v3 )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">      *(_DWORD *)(i + a1) = <span class="number">4</span> * (v4 + <span class="number">2</span> * a3) + <span class="number">0x405648</span>;<span class="comment">// input a3是8个一组 依次越过8个字节</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">      *(_DWORD *)(i + a1) = <span class="number">4</span> * v4 + <span class="number">0x405000</span>;  <span class="comment">// key</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">      *(_DWORD *)(i + a1) = &amp;unk_405748;        <span class="comment">// sum 看汇编得出 </span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>case语句的左侧是一个int的指针，所以右侧是一个地址，可以跳转到0x405648和0x405000，发现一个是输入的首地址，一个这是在Tlscallback中被修改过的int数据组的地址，还有一个&amp;unk_405748，没有其他的交叉引用所以初始默认为0，(全局变量)。</p><p>而switch 和 case中用到的索引在dword_4052A8这个数组中，16进制高位为case索引，低位为寻址的下标。</p><p><strong>综上，流程就是把src处的代码依次cpy到lpadress中，通过dispatch来修改操作数的值(操作数也是写入机器码中的)，之后依次执行。这片代码通过v15控制一共执行33次，同时根据输入进行8个一组分组再循环上述操作。</strong></p><p>  Src = (char *)&amp;loc_405010;    src每次+16执行</p><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1637546895/blog_img/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/x_wxkqn4.png"></p><p>mov操作后面都是00，所以需要dispatch来赋值。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8B</span> <span class="number">0</span>D <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                 mov     ecx, large ds:<span class="number">0</span></span><br><span class="line"><span class="number">81</span> E9 D2 <span class="number">96</span> <span class="number">5</span>A <span class="number">7</span>E                 sub     ecx, <span class="number">7E5</span>A96D2h  </span><br><span class="line"><span class="number">89</span> <span class="number">0</span>D <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                 mov     large ds:<span class="number">0</span>, ecx</span><br><span class="line"><span class="number">8B</span> <span class="number">15</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                 mov     edx, large ds:<span class="number">0</span></span><br><span class="line">C1 EA <span class="number">05</span>                          shr     edx, <span class="number">5</span></span><br><span class="line">A1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                    mov     eax, large ds:<span class="number">0</span></span><br><span class="line"><span class="number">03</span> C2                             add     eax, edx</span><br><span class="line"><span class="number">8B</span> <span class="number">0</span>D <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                 mov     ecx, large ds:<span class="number">0</span></span><br><span class="line"><span class="number">03</span> <span class="number">0</span>D <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                 add     ecx, large ds:<span class="number">0</span></span><br><span class="line"><span class="number">33</span> C1                             <span class="keyword">xor</span>     eax, ecx</span><br><span class="line"><span class="number">8B</span> <span class="number">15</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                 mov     edx, large ds:<span class="number">0</span></span><br><span class="line">C1 E2 <span class="number">04</span>                          shl     edx, <span class="number">4</span></span><br><span class="line"><span class="number">8B</span> <span class="number">0</span>D <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                 mov     ecx, large ds:<span class="number">0</span></span><br><span class="line"><span class="number">03</span> CA                             add     ecx, edx</span><br><span class="line"><span class="number">33</span> C1                             <span class="keyword">xor</span>     eax, ecx</span><br><span class="line"><span class="number">8B</span> <span class="number">15</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                 mov     edx, large ds:<span class="number">0</span></span><br><span class="line"><span class="number">03</span> D0                             add     edx, eax</span><br><span class="line"><span class="number">89</span> <span class="number">15</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                 mov     large ds:<span class="number">0</span>, edx</span><br><span class="line">A1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                    mov     eax, large ds:<span class="number">0</span></span><br><span class="line">C1 E8 <span class="number">05</span>                          shr     eax, <span class="number">5</span>    </span><br><span class="line"><span class="number">8B</span> <span class="number">0</span>D <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                 mov     ecx, large ds:<span class="number">0</span>  </span><br><span class="line"><span class="number">03</span> C8                             add     ecx, eax</span><br><span class="line"><span class="number">8B</span> <span class="number">15</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                 mov     edx, large ds:<span class="number">0</span></span><br><span class="line"><span class="number">03</span> <span class="number">15</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                 add     edx, large ds:<span class="number">0</span>   <span class="number">33</span> CA                             <span class="keyword">xor</span>     ecx, edx</span><br><span class="line">A1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                    mov     eax, large ds:<span class="number">0</span></span><br><span class="line">C1 E0 <span class="number">04</span>                          shl     eax, <span class="number">4</span></span><br><span class="line"><span class="number">8B</span> <span class="number">15</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                 mov     edx, large ds:<span class="number">0</span></span><br><span class="line"><span class="number">03</span> D0                             add     edx, eax</span><br><span class="line"><span class="number">33</span> CA                             <span class="keyword">xor</span>     ecx, edx</span><br><span class="line">A1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                    mov     eax, large ds:<span class="number">0</span></span><br><span class="line"><span class="number">03</span> C1                             add     eax, ecx</span><br><span class="line">A3 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                    mov     large ds:<span class="number">0</span>, eax</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>脚本对4025A8数组处理，拿到修改操作数的流程。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; *(_BYTE *)(i + a1); ++i )；        <span class="comment">// 一直找opcode为0的地方停</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="comment">//举例</span></span><br><span class="line"> <span class="number">3</span> <span class="number">0</span> -&gt; <span class="keyword">switch</span>(<span class="number">3</span>) 也就是 把<span class="number">8</span>D <span class="number">0</span>D <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 后<span class="number">4</span>个改成unk_405748的地址并取内容赋值给ecx</span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> 无操做</span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> 是取出input[<span class="number">1</span>] 右边是v4=<span class="number">1</span>   <span class="number">4</span> * (v4 + <span class="number">2</span> * a3) + <span class="number">0x405648</span></span><br><span class="line"> <span class="number">2</span> <span class="number">1</span> 是取出key[<span class="number">1</span>] <span class="comment">//大致分析后确定  </span></span><br><span class="line"> ...依次补全汇编并翻译</span><br></pre></td></tr></tbody></table></figure><p>如下:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">mov ecx,&amp;unk_405748</span><br><span class="line"></span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">sub     ecx, <span class="number">7E5</span>A96D2h</span><br><span class="line">mov &amp;unk_405748,ecx</span><br><span class="line"></span><br><span class="line">sum-=<span class="number">0x7E5A96D2</span></span><br><span class="line"></span><br><span class="line">mov  edx,input[<span class="number">1</span>]</span><br><span class="line">shr edx,<span class="number">5</span></span><br><span class="line"></span><br><span class="line">mov eax,key[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">add eax,edx <span class="comment">//2 1  0 0</span></span><br><span class="line"></span><br><span class="line">mov ecx,sum</span><br><span class="line">add ecx,input[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">xor</span> eax,ecx   <span class="comment">//(input[1]+sum)^(input[1]&gt;&gt;5 + key[1])</span></span><br><span class="line"></span><br><span class="line">mov edx, input[<span class="number">1</span>]</span><br><span class="line">shl edx,<span class="number">4</span></span><br><span class="line">mov ecx,key[<span class="number">0</span>]</span><br><span class="line">add ecx,edx</span><br><span class="line"><span class="keyword">xor</span> eax,ecx</span><br><span class="line"><span class="comment">// (input[1]&lt;&lt;4 + key[0])^(input[1]+sum)^(input[1]&gt;&gt;5 + key[1])</span></span><br><span class="line"></span><br><span class="line">mov edx ,input[<span class="number">0</span>]</span><br><span class="line">add edx,eax</span><br><span class="line"></span><br><span class="line">mov edx,input[<span class="number">0</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">//以上实现的就是 v0+=(v1&lt;&lt;4 + k0)^(v1 + sum)(v1 &gt;&gt;5 + k1)</span></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="comment">//不过汇编中没有 mov  xxx,0 并且 对 sum 那边地址内容unk_405748 也没有别的交叉引用  也就是每组</span></span><br></pre></td></tr></tbody></table></figure><p>分析到一半就能推出是Tea加密，轮数为33 ，default为0x7E5A96D2，既然分析出&amp;unk_405748为sum，并且对他没有别的引用，所以再对密文多次加密时sum是在上一轮基础上使用的。</p><p>解密脚本:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tea_decode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span>* s, <span class="keyword">unsigned</span> <span class="keyword">int</span>* key,<span class="keyword">int</span> count)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0xE98651DC67185A11</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> enc[] = { <span class="number">0x422F1DED</span>,<span class="number">0x1485E472</span>,<span class="number">0x35578D5</span>,<span class="number">0x0BF6B80A2</span>,<span class="number">0x97D77245</span>,<span class="number">0x2DAE75D1</span>,<span class="number">0x665FA963</span>,<span class="number">0x292E6D74</span>,<span class="number">0x9795FCC1</span>,<span class="number">0x0BB5C8E9</span>};</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key[<span class="number">4</span>] = { <span class="number">0x7CE45630</span>,<span class="number">0x58334908</span>,<span class="number">0x66398867</span>,<span class="number">0x0C35195B1</span> };</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i+=<span class="number">2</span>)</span><br><span class="line">tea_decode(enc+i, key,i/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tea_decode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span>* s, <span class="keyword">unsigned</span> <span class="keyword">int</span>* key,<span class="keyword">int</span> count)</span> </span>{</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v0 = s[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v1 = s[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">uint32_t</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> defalt = <span class="number">0x7E5A96D2</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> k0 = key[<span class="number">0</span>], k1 = key[<span class="number">1</span>], k2 = key[<span class="number">2</span>], k3 = key[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">33</span>*count+<span class="number">33</span>); i++)<span class="comment">// sum状态保存到下一组</span></span><br><span class="line">sum -= defalt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++) {  </span><br><span class="line">v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">sum += defalt;</span><br><span class="line">}</span><br><span class="line">s[<span class="number">0</span>] = v0;</span><br><span class="line">s[<span class="number">1</span>] = v1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d,%d,"</span>, v0,v1);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a=[826566507,843212655,845236089,1097428850,1198086245,1902206776,1132088430,1181900618,1917866824,1261778286]</span></span><br><span class="line"><span class="comment">for i in a:</span></span><br><span class="line"><span class="comment">    print(int.to_bytes(i,4,'little').decode(),end='')</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3、虚假的粉丝"><a href="#3、虚假的粉丝" class="headerlink" title="3、虚假的粉丝"></a>3、虚假的粉丝</h3><p>dos界面的代码动画，有点震撼，不过题目没设计到什么算法，主要还是读流程。</p><p>首先就是找到3个key，查看strings窗口，发现第一字符串很可疑,对其交叉引用发现了一个未被调用的函数，需要重新定义一下。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#j#M_OEE!jmhih,=555"xtx</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_401379</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">char</span> Buffer[<span class="number">100</span>]; <span class="comment">// [esp+16h] [ebp-92h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> FileName[<span class="number">30</span>]; <span class="comment">// [esp+7Ah] [ebp-2Eh] BYREF</span></span><br><span class="line">  FILE *Stream; <span class="comment">// [esp+98h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+9Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">23</span>; ++i )</span><br><span class="line">    FileName[i] = aJMOeeJmhih555X[i] ^ <span class="number">0xC</span>;</span><br><span class="line">  Stream = fopen(FileName, <span class="string">"r"</span>);</span><br><span class="line">  fread(Buffer, <span class="number">0x57</span>u, <span class="number">1u</span>, Stream);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, Buffer);</span><br><span class="line">}    </span><br></pre></td></tr></tbody></table></figure><p>拉出去异或一下，是在读<strong>P./f/ASCII-faded 1999P.txt</strong>这个文件，打开查看，发现key。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">K3y1: (<span class="built_in">hex</span>(<span class="built_in">ord</span>(<span class="string">'A'</span>)) + <span class="built_in">hex</span>(<span class="built_in">ord</span>(<span class="string">'W'</span>))).replace(<span class="string">"0x"</span>, <span class="string">""</span>)</span><br><span class="line">K3y2: <span class="built_in">ord</span>(<span class="string">'F'</span>) + <span class="built_in">ord</span>(<span class="string">'a'</span>) + <span class="built_in">ord</span>(<span class="string">'d'</span>) + <span class="built_in">ord</span>(<span class="string">'e'</span>) + <span class="built_in">ord</span>(<span class="string">'d'</span>) + <span class="built_in">ord</span>(<span class="string">'i'</span>) + <span class="built_in">ord</span>(<span class="string">'s'</span>) + <span class="built_in">ord</span>(<span class="string">'b'</span>) + <span class="built_in">ord</span>(<span class="string">'e'</span>) + <span class="built_in">ord</span>(<span class="string">'s'</span>) + <span class="built_in">ord</span>(<span class="string">'t'</span>)</span><br><span class="line"><span class="comment">#key3是文件读取的字节大小，根据if判断知是40</span></span><br><span class="line"><span class="keyword">if</span> ( Buffer[<span class="number">0</span>] != <span class="string">'U'</span> || Buffer[<span class="number">39</span>] != <span class="string">'S'</span> )</span><br></pre></td></tr></tbody></table></figure><p>之后它通过上述的key计算了一个新的文件，之后从中读取内容。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"UzNDcmU3X0szeSUyMCUzRCUyMEFsNE5fd0FsSzNS"</span></span><br><span class="line">base64 -&gt; url解码 -&gt; S3Cre7_K3y = Al4N_wAlK3R</span><br></pre></td></tr></tbody></table></figure><p>之后观察一个用到key的check结果的处理。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v24 == <span class="number">1</span> )</span><br><span class="line"> {</span><br><span class="line">   v25 = <span class="number">5317</span>;</span><br><span class="line">   Stream = fopen(<span class="string">"./f/ASCII-faded 5315.txt"</span>, <span class="string">"rb"</span>);</span><br><span class="line">   <span class="keyword">if</span> ( !Stream )</span><br><span class="line">   {</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"ERROR!\n"</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   }</span><br><span class="line">   fread(v6, <span class="number">0x4EDE</span>u, <span class="number">1u</span>, Stream);</span><br><span class="line">   fclose(Stream);</span><br><span class="line">   v22 = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x84E</span>; ++i )</span><br><span class="line">   {</span><br><span class="line">     <span class="keyword">if</span> ( v22 &gt; <span class="number">10</span> )</span><br><span class="line">       v22 = <span class="number">0</span>;</span><br><span class="line">     v6[i] ^= key[v22++];</span><br><span class="line">   }</span><br><span class="line">   Stream = fopen(<span class="string">"./f/ASCII-faded 5315.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">   fwrite(v6, <span class="number">0x84F</span>u, <span class="number">1u</span>, Stream);</span><br><span class="line">   fclose(Stream);</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>对5317进行异或之后再写入，再异或一次观察内容,后面就没什么内容了，就是接着奏乐接着舞了。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">key=<span class="string">'Al4N_wAlK3R'</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">'ASCII-faded 5315.txt'</span>,<span class="string">'r+'</span>)</span><br><span class="line">s=f.read()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s[i])^<span class="built_in">ord</span>(key[i%<span class="built_in">len</span>(key)])),end=<span class="string">''</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>输入key跑起来还是挺不错的，摘掉眼镜.jpg。</p><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1637550797/blog_img/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/1_dhb3xj.png"></p><p>A_TrUe_AW_f4ns</p><p>不过这题，静态的话就最后一个key有用，还是在文件中，并且U和S已知，直接文件搜索，也能拿到key，然后直接异或就可以了。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5317</span>):</span><br><span class="line">    f=<span class="built_in">open</span>(<span class="string">'ASCII-faded %s.txt'</span>%<span class="built_in">str</span>(i).zfill(<span class="number">4</span>),<span class="string">'r+'</span>)</span><br><span class="line">    s=f.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'U'</span><span class="keyword">in</span> s <span class="keyword">and</span> <span class="string">'S'</span> <span class="keyword">in</span> s:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">4157 -&gt;key的文件</span></span><br><span class="line"><span class="string">5315</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><hr><p><strong>比赛时候挺麻的，比赛快要截止才有点感觉，还有一个硬件描述语言有待复现，计组实验课用的verilog神似，关键是不会啊! 人不行别怪路不平，还得补！。</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF Memory </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUMT-RE专项</title>
      <link href="/2021/11/11/CUMT-RE/"/>
      <url>/2021/11/11/CUMT-RE/</url>
      
        <content type="html"><![CDATA[<h1 id="CUMT-2021RE专项赛"><a href="#CUMT-2021RE专项赛" class="headerlink" title="CUMT-2021RE专项赛"></a>CUMT-2021RE专项赛</h1><h3 id="1、签到"><a href="#1、签到" class="headerlink" title="1、签到"></a>1、签到</h3><p><strong>循环左移</strong>，逆序即可</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*((_BYTE *)Buf2 + v3) = __ROL1__(*((_BYTE *)Buf2 + v3), <span class="number">1</span>);</span><br><span class="line">++v3;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">Buf1=[<span class="number">0</span>]*<span class="number">12</span></span><br><span class="line">Buf1[<span class="number">0</span>] = <span class="number">0xE8DAEAC6</span>;</span><br><span class="line">Buf1[<span class="number">1</span>] = <span class="number">0xF6CCE8C6</span>;</span><br><span class="line">Buf1[<span class="number">2</span>] = <span class="number">0xCA9680DA</span>;</span><br><span class="line">Buf1[<span class="number">3</span>] = <span class="number">0xECCAA4BE</span>;</span><br><span class="line">Buf1[<span class="number">4</span>] = <span class="number">0x66E6A4CA</span>;</span><br><span class="line">Buf1[<span class="number">5</span>] = <span class="number">0x72DCCABE</span>;</span><br><span class="line">Buf1[<span class="number">6</span>] = <span class="number">0x8ACA9C62</span>;</span><br><span class="line">Buf1[<span class="number">7</span>] = <span class="number">0xCEDC62A4</span>;</span><br><span class="line">Buf1[<span class="number">8</span>] = <span class="number">0x66A48EBE</span>;</span><br><span class="line">Buf1[<span class="number">9</span>] = <span class="number">0x80BE6EC2</span>;</span><br><span class="line">Buf1[<span class="number">10</span>] = <span class="number">0xDC6282CE</span>;</span><br><span class="line">Buf1[<span class="number">11</span>] = <span class="number">0xFA</span>;</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Buf1)):</span><br><span class="line">    a=<span class="built_in">int</span>.to_bytes(Buf1[j],<span class="number">4</span>,<span class="string">'little'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>((i&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;<span class="number">7</span>)),end=<span class="string">''</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="2、来自字节码的鼓励"><a href="#2、来自字节码的鼓励" class="headerlink" title="2、来自字节码的鼓励"></a>2、来自字节码的鼓励</h3><p><strong>python字节码</strong>，比较短，对照官方文档很容易便能翻译出源码。</p><p><a href="https://docs.python.org/3/library/dis.html">dis — Disassembler for Python bytecode — Python 3.10.0 documentation</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n=[-<span class="number">83</span>,-<span class="number">96</span>,-<span class="number">78</span>,-<span class="number">21</span>,-<span class="number">3</span>,-<span class="number">17</span>,<span class="number">58</span>,<span class="number">31</span>,<span class="number">58</span>]</span><br><span class="line"><span class="comment">#ff=input</span></span><br><span class="line">c=<span class="string">''</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">'1'</span>,<span class="string">'r'</span>)</span><br><span class="line">s=f.read()</span><br><span class="line">f.close()</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">'2'</span>,<span class="string">'rb'</span>)</span><br><span class="line">b=f.read(<span class="number">9</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    tmp=<span class="built_in">ord</span>(s[i])^b[i]</span><br><span class="line">    tmp=tmp+n[i]</span><br><span class="line">    c+=<span class="built_in">chr</span>(tmp)</span><br><span class="line"><span class="keyword">if</span> c==ff:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Right! Please add cumtctf{}'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'try again'</span>)</span><br></pre></td></tr></tbody></table></figure><p>ff是输入，只在最后用到，故翻译出的字节码前部分便是flag的生成代码。</p><h3 id="3、my-cloth"><a href="#3、my-cloth" class="headerlink" title="3、my cloth"></a>3、my cloth</h3><p><strong>经典upx壳，后加三段魔改default和轮数的Tea加密。</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  v23[<span class="number">0</span>] = <span class="number">222</span>;</span><br><span class="line">  v23[<span class="number">1</span>] = <span class="number">173</span>;</span><br><span class="line">  v23[<span class="number">2</span>] = <span class="number">190</span>;</span><br><span class="line">  v23[<span class="number">3</span>] = <span class="number">239</span>;</span><br><span class="line">  </span><br><span class="line"> v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i )</span><br><span class="line">    v5 = (v5 &lt;&lt; <span class="number">8</span>) + (<span class="keyword">unsigned</span> __int8)v24[i];</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">4</span>; j &lt;= <span class="number">7</span>; ++j )</span><br><span class="line">    v7 = (v7 &lt;&lt; <span class="number">8</span>) + (<span class="keyword">unsigned</span> __int8)v24[j]; <span class="comment">//输入转大端</span></span><br><span class="line">  v17 = v5;</span><br><span class="line">  v18 = v7;</span><br><span class="line">  encrypt(&amp;v17, v23);</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//明文相邻两四个字节进行加密，并转成大端的int型，key是固定的</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> *__fastcall <span class="title">encrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *result, _DWORD *a2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [sp+Ch] [bp+Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [sp+10h] [bp+10h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [sp+14h] [bp+14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [sp+18h] [bp+18h]</span></span><br><span class="line"></span><br><span class="line">  v2 = *result;</span><br><span class="line">  v3 = result[<span class="number">1</span>];</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x3F</span>; ++i )</span><br><span class="line">  {</span><br><span class="line">    v4 -= <span class="number">559038737</span>;</span><br><span class="line">    v2 += (a2[<span class="number">1</span>] + (v3 &gt;&gt; <span class="number">5</span>)) ^ (<span class="number">16</span> * v3 + *a2) ^ (v4 + v3);</span><br><span class="line">    v3 += (a2[<span class="number">3</span>] + (v2 &gt;&gt; <span class="number">5</span>)) ^ (<span class="number">16</span> * v2 + a2[<span class="number">2</span>]) ^ (v4 + v2);</span><br><span class="line">  }</span><br><span class="line">  *result = v2;</span><br><span class="line">  result[<span class="number">1</span>] = v3;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>exp:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tea_decode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span>* s, <span class="keyword">unsigned</span> <span class="keyword">int</span>* key)</span> </span>{</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v0 = s[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v1 = s[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> defalt = <span class="number">0x21524111</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0x3F</span>; i++)</span><br><span class="line">sum -= defalt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> k0 = key[<span class="number">0</span>], k1 = key[<span class="number">1</span>], k2 = key[<span class="number">2</span>], k3 = key[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0x3f</span>; i++) {</span><br><span class="line">v1 -= (k3 + (v0 &gt;&gt; <span class="number">5</span>)) ^ ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (sum + v0);</span><br><span class="line">v0 -= (k1 + (v1 &gt;&gt; <span class="number">5</span>)) ^ ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (sum + v1);</span><br><span class="line">sum += defalt;</span><br><span class="line">}</span><br><span class="line">s[<span class="number">0</span>] = v0;</span><br><span class="line">s[<span class="number">1</span>] = v1;</span><br><span class="line">cout &lt;&lt; s[<span class="number">0</span>] &lt;&lt; <span class="string">","</span> &lt;&lt; s[<span class="number">1</span>] &lt;&lt; <span class="string">","</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key[<span class="number">4</span>] = { <span class="number">222</span>,<span class="number">173</span>,<span class="number">190</span>,<span class="number">239</span> };</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> enc[<span class="number">6</span>] = { <span class="number">0xD5AF0608</span>,<span class="number">0x361EF340</span>,<span class="number">0xB55D7042</span>,<span class="number">0xB460532B</span>,<span class="number">0xC53FB95B</span>,<span class="number">0xCC5F1002</span> };</span><br><span class="line"><span class="built_in">tea_decode</span>(enc, key);</span><br><span class="line"><span class="built_in">tea_decode</span>(enc + <span class="number">2</span>, key);</span><br><span class="line"><span class="built_in">tea_decode</span>(enc + <span class="number">4</span>, key);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* python</span></span><br><span class="line"><span class="comment">a=[1668640116,1668572795,1382381157,1920165215,829644646,1970167677,]</span></span><br><span class="line"><span class="comment">for i in a:</span></span><br><span class="line"><span class="comment">    print(int.to_bytes(i,4,'big').decode(),end='')</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="4、weak"><a href="#4、weak" class="headerlink" title="4、weak"></a>4、weak</h3><p><strong>花指令+数独</strong></p><p>花指令单独写了一个函数，通过修改EIP来越过垃圾代码。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00000000000013</span>EA junk            proc near               ; CODE XREF: .text:<span class="number">000000000000123</span>A↑p</span><br><span class="line">.text:<span class="number">00000000000013</span>EA                 pop     rax</span><br><span class="line">.text:<span class="number">00000000000013</span>EB                 add     rax, <span class="number">5</span></span><br><span class="line">.text:<span class="number">00000000000013</span>EF                 push    rax</span><br><span class="line">.text:<span class="number">00000000000013F</span>0                 retn</span><br><span class="line">.text:<span class="number">00000000000013F</span>0 junk            endp</span><br></pre></td></tr></tbody></table></figure><p>call 会push下一条指令的IP，之后对IP+5，并retn，对IP的值完成+5的操作。<br>nop掉call junk下一条指令开始的5个字节即可。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+4h] [rbp-7Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 i; <span class="comment">// [rsp+8h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 j; <span class="comment">// [rsp+10h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 k; <span class="comment">// [rsp+18h] [rbp-68h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 m; <span class="comment">// [rsp+20h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 n; <span class="comment">// [rsp+28h] [rbp-58h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 ii; <span class="comment">// [rsp+30h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 jj; <span class="comment">// [rsp+38h] [rbp-48h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+40h] [rbp-40h]</span></span><br><span class="line">  __int64 v15; <span class="comment">// [rsp+48h] [rbp-38h]</span></span><br><span class="line">  __int64 v16; <span class="comment">// [rsp+50h] [rbp-30h]</span></span><br><span class="line">  __int64 v17[<span class="number">4</span>]; <span class="comment">// [rsp+60h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v17[<span class="number">3</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v17[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v17[<span class="number">1</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"your flag?"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%s"</span>, v17);</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt;= <span class="number">0x23</span>; ++i )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( !numbers[i] )</span><br><span class="line">      numbers[i] = *((_BYTE *)v17 + v6++) - <span class="number">48</span>;</span><br><span class="line">  }</span><br><span class="line">  junk();</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0LL</span>; j &lt;= <span class="number">5</span>; ++j )</span><br><span class="line">  {</span><br><span class="line">    v14 = <span class="number">0LL</span>;</span><br><span class="line">    v15 = <span class="number">0LL</span>;</span><br><span class="line">    v16 = <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0LL</span>; k &lt;= <span class="number">5</span>; ++k )</span><br><span class="line">    {</span><br><span class="line">      v3 = numbers[<span class="number">6</span> * j + k] - <span class="number">1</span>;</span><br><span class="line">      ++*((_DWORD *)&amp;v14 + v3);<span class="comment">//要求v3 0-5 即数组每行为1-6</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> ( m = <span class="number">0LL</span>; m &lt;= <span class="number">5</span>; ++m )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( *((_DWORD *)&amp;v14 + m) != <span class="number">1</span> )</span><br><span class="line">      {</span><br><span class="line">LABEL_12:</span><br><span class="line">        fail();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  junk();</span><br><span class="line">  <span class="keyword">for</span> ( n = <span class="number">0LL</span>; n &lt;= <span class="number">5</span>; ++n )</span><br><span class="line">  {</span><br><span class="line">    v14 = <span class="number">0LL</span>;</span><br><span class="line">    v15 = <span class="number">0LL</span>;</span><br><span class="line">    v16 = <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ii = <span class="number">0LL</span>; ii &lt;= <span class="number">5</span>; ++ii )</span><br><span class="line">    {</span><br><span class="line">      v5 = numbers[<span class="number">6</span> * ii + n] - <span class="number">1</span>; <span class="comment">//要求每列1-6</span></span><br><span class="line">      ++*((_DWORD *)&amp;v14 + v5);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> ( jj = <span class="number">0LL</span>; jj &lt;= <span class="number">5</span>; ++jj )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( *((_DWORD *)&amp;v14 + jj) != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  succ();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>6阶数独，数独并不难，手撸即可。</p><h3 id="5、gogogo"><a href="#5、gogogo" class="headerlink" title="5、gogogo"></a>5、gogogo</h3><p><strong>go 语言+迷宫问题 10x10阶</strong><br>不过IDA7.6也存在一些反编译的问题</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">v12 = fmt_Fscanln(v5, v8, v10);</span><br><span class="line"> <span class="keyword">if</span> ( !v2 )</span><br><span class="line"> {</span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0LL</span>; v15[<span class="number">1</span>] &gt; i; i = v14 + <span class="number">1</span> )</span><br><span class="line">   {</span><br><span class="line">     v14 = i;</span><br><span class="line">     <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> __int8)main___ptr_Maze__advance() )</span><br><span class="line">     {</span><br><span class="line">       v16[<span class="number">0</span>] = &amp;off_4D6200;</span><br><span class="line">       v14 = fmt_Fprintln(v6, v9, v11, v12, v13);</span><br><span class="line">     }</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">if</span> ( a11111111111010[<span class="number">11</span>] == <span class="string">'#'</span> )</span><br></pre></td></tr></tbody></table></figure><p>​     比如将最后的check终点的位置，识别成了一个常量位置，查看汇编和动调能解决这个错误。</p><p>​    迷宫路径，从下标11(0xB)开始，扫到’#’，眼过即可。但还是准备好一套熟悉的自动化迷宫脚本，一旦量大起来，手撸就不现实了。</p><h3 id="6、SimpleSMC"><a href="#6、SimpleSMC" class="headerlink" title="6、SimpleSMC"></a>6、SimpleSMC</h3><p><strong>花指令+反调试+SMC+Blowfish</strong></p><p>​    首先观察main函数，第一句汇编便是iretq的返回指令，显然经过了修改，对main交叉引用可以定位到一句lea rcx, main，并发现上方有花指令。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000140003001</span> ; __unwind { <span class="comment">// __C_specific_handler</span></span><br><span class="line">.text:<span class="number">0000000140003001</span>                 jz      <span class="keyword">short</span> near ptr loc_140003005+<span class="number">1</span></span><br><span class="line">.text:<span class="number">0000000140003003</span>                 jnz     <span class="keyword">short</span> near ptr loc_140003005+<span class="number">1</span></span><br><span class="line">.text:<span class="number">0000000140003005</span></span><br><span class="line">.text:<span class="number">0000000140003005</span> loc_140003005:                          ; CODE XREF: sub_140002FF0:loc_140003001↑j</span><br><span class="line">.text:<span class="number">0000000140003005</span>                                         ; sub_140002FF0+<span class="number">13</span>↑j</span><br><span class="line">.text:<span class="number">0000000140003005</span>                 call    near ptr <span class="number">0</span>C9493074h</span><br><span class="line">.text:<span class="number">000000014000300</span>A                 loope   near ptr loc_140003053+<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p>通过jz 和 jnz 连用实现跳转，nop掉loc_140003005处的第一个字节即可。</p><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1637039417/blog_img/1_ukikcx.png"></p><p>通过与NT有关的API调用，类似一种反调试手段，不过此处也没发现对main函数有关的处理，跟进140003110函数。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000140003110</span> sub_140003110   proc near               ; CODE XREF: sub_140002FF0:loc_140003073↑p</span><br><span class="line">.text:<span class="number">0000000140003110</span>                                         ; DATA XREF: .pdata:<span class="number">000000014000</span>D054↓o</span><br><span class="line">.text:<span class="number">0000000140003110</span></span><br><span class="line">.text:<span class="number">0000000140003110</span> var_8           = qword ptr <span class="number">-8</span></span><br><span class="line">.text:<span class="number">0000000140003110</span></span><br><span class="line">.text:<span class="number">0000000140003110</span>                 pushfq</span><br><span class="line">.text:<span class="number">0000000140003111</span>                 <span class="keyword">or</span>      [rsp+<span class="number">8</span>+var_8], <span class="number">100</span>h</span><br><span class="line">.text:<span class="number">0000000140003119</span>                 popfq</span><br><span class="line">.text:<span class="number">000000014000311</span>A                 retn</span><br><span class="line">.text:<span class="number">000000014000311</span>A sub_140003110   endp</span><br></pre></td></tr></tbody></table></figure><p>pushfq是将标志寄存器的值入栈，之后or 0x100进行修改，将TF标志位置1，涉及到一个反调试。</p><p>​    <strong>通过将陷阱标志位TF置1导致触发单步执行异常（触发后会置0），而我们事先设置好的异常处理函数会修改eip跳到正确的代码处，调试时则不会。</strong></p><p>参考:<a href="https://www.cnblogs.com/glodears/p/12842101.html">反调试技术–WIndows篇 - 深海之炎 - 博客园 (cnblogs.com)</a></p><p>在汇编窗口能看到try 和 except，并且在except 的代码中看到了对main函数处的内存进行了smc自修改。</p><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1637040466/blog_img/re_ks9zzr.png"></p><p>汇编看出，修改代码为单字节循环左移三异或0x3F恢复，idapy脚本恢复即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line">target=<span class="number">0x0000000140001000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x1F50</span>):</span><br><span class="line">    a=Byte(target+i)</span><br><span class="line">    result=((a&lt;&lt;<span class="number">3</span>)|(a&gt;&gt;<span class="number">5</span>))^<span class="number">0x3f</span></span><br><span class="line">    PatchByte(target+i,result&amp;<span class="number">0xff</span>)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">'yes'</span>)</span><br></pre></td></tr></tbody></table></figure><p>修复后可见ida在反编译时定义了4个256的int数组，并且内存中有连续的18个int。</p><p><img src="https://res.cloudinary.com/lu1u/image/upload/v1637041060/blog_img/re1_bwtple.png"></p><p>hint提示为blowfish加密，不过优化让代码面目全非，一步一步分析是个体力活。</p><p>blowfish参考:<a href="https://cloud.tencent.com/developer/article/1836650">https://cloud.tencent.com/developer/article/1836650</a></p><p>不过是魔改掉了p盒和s盒，初始化的代码是没有变的，可能经过优化有些难读。</p><p>例如:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j+=<span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line">BlowfishEncryption(ptr, &amp;leftSide, &amp;rightSide);</span><br><span class="line">ptr-&gt;s[i][j] = leftSide;</span><br><span class="line">ptr-&gt;s[i][j+<span class="number">1</span>] = rightSide;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//而IDA直接识别为</span></span><br><span class="line"> <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; ++i )</span><br><span class="line">     <span class="comment">//xxxxxxx</span></span><br></pre></td></tr></tbody></table></figure><p>整体加密流程就是先秘钥初始化，此部分与输入无关，之后进行加密，加密流程类似festil轮，左边等于左边异或p[i]，右边等与F(左)^右，最后再左右交换。一共循环16轮，最后一轮取消交换，左右与p[17]和p[16]异或即可。解密即逆过程。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blowfish_decrypt</span><span class="params">(<span class="keyword">uint32_t</span>* L, <span class="keyword">uint32_t</span>* R)</span> </span>{</span><br><span class="line">*L ^= P[<span class="number">17</span>];</span><br><span class="line">*R ^= P[<span class="number">16</span>];</span><br><span class="line">swap(L, R);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">short</span> r = <span class="number">15</span>; r &gt;=<span class="number">0</span>; r--) {</span><br><span class="line">*L = *L ^ f(*R);</span><br><span class="line">*R^=P[r];</span><br><span class="line">swap(L, R);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>按照内存中的数据修改头文件中的pbox和sbox，解密的主体代码如下。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"blowfish.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">uint32_t</span> <span class="title">f</span><span class="params">(<span class="keyword">uint32_t</span> x)</span> </span>{</span><br><span class="line"><span class="keyword">uint32_t</span> h = S[<span class="number">0</span>][x &gt;&gt; <span class="number">24</span>] + S[<span class="number">1</span>][x &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>];</span><br><span class="line"><span class="keyword">return</span> (h ^ S[<span class="number">2</span>][x &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span>]) + S[<span class="number">3</span>][x &amp; <span class="number">0xff</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blowfish_encrypt</span><span class="params">(<span class="keyword">uint32_t</span>* L, <span class="keyword">uint32_t</span>* R)</span> </span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">short</span> r = <span class="number">0</span>; r &lt; <span class="number">16</span>; r++) {</span><br><span class="line"></span><br><span class="line">*L = *L ^ P[r];</span><br><span class="line">*R = f(*L) ^ *R;</span><br><span class="line">swap(L, R);</span><br><span class="line">}</span><br><span class="line">swap(L, R);</span><br><span class="line">*R = *R ^ P[<span class="number">16</span>];</span><br><span class="line">*L = *L ^ P[<span class="number">17</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//void blowfish_decrypt(uint32_t* L, uint32_t* R) { // 网上一般采用的解密方法  感觉有点别扭</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//for (short r = 17; r &gt; 1; r--) {</span></span><br><span class="line"><span class="comment">//*L = *L ^ P[r];</span></span><br><span class="line"><span class="comment">//*R = f(*L) ^ *R;</span></span><br><span class="line"><span class="comment">//swap(L, R);</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"><span class="comment">//swap(L, R); </span></span><br><span class="line"><span class="comment">//*R = *R ^ P[1];</span></span><br><span class="line"><span class="comment">//*L = *L ^ P[0];</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blowfish_decrypt</span><span class="params">(<span class="keyword">uint32_t</span>* L, <span class="keyword">uint32_t</span>* R)</span> </span>{</span><br><span class="line">*L ^= P[<span class="number">17</span>];</span><br><span class="line">*R ^= P[<span class="number">16</span>];</span><br><span class="line">swap(L, R);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">short</span> r = <span class="number">15</span>; r &gt;= <span class="number">0</span>; r--) {</span><br><span class="line">*L = *L ^ f(*R);</span><br><span class="line">*R ^= P[r];</span><br><span class="line">swap(L, R);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blowfish_init</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>* key, <span class="keyword">int</span> key_len)</span> </span>{</span><br><span class="line"><span class="comment">/* initialize P box w/ key*/</span></span><br><span class="line"><span class="keyword">uint32_t</span> k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">short</span> i = <span class="number">0</span>, p = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++)</span><br><span class="line">{</span><br><span class="line">k = key[i % key_len];</span><br><span class="line">P[i] ^= k;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* blowfish key expansion (521 iterations) */</span></span><br><span class="line"><span class="keyword">uint32_t</span> l = <span class="number">0x00</span>, r = <span class="number">0x00</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">short</span> i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i += <span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line">blowfish_encrypt(&amp;l, &amp;r);</span><br><span class="line">P[i] = l;</span><br><span class="line">P[i + <span class="number">1</span>] = r;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">short</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) <span class="comment">//512次</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">short</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j += <span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line">blowfish_encrypt(&amp;l, &amp;r); S[i][j] = l;</span><br><span class="line">S[i][j + <span class="number">1</span>] = r;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key[<span class="number">4</span>] = { <span class="number">0x12233445</span>,<span class="number">0xDEADBEEF</span>,<span class="number">0x90223344</span>,<span class="number">0x88112243</span> };</span><br><span class="line">blowfish_init(key, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> enc[<span class="number">8</span>] = { <span class="number">0x7187C938</span>, <span class="number">0xCDE138C1</span>, <span class="number">0x3DBA6F8C</span>, <span class="number">0x4E68D12A</span>, <span class="number">0xA7FB22EE</span>, <span class="number">0x52E73F49</span>, <span class="number">0x81E16485</span>, <span class="number">0x753D87D7</span> };</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i += <span class="number">1</span>)</span><br><span class="line">blowfish_decrypt(enc + <span class="number">7</span> - i, enc + i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, (<span class="keyword">char</span>*)enc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当然秘钥初始化是与输入无关的，通过动调来拿到初始化后的扩展盒和秘钥解密可能会更快。</p><hr><p>最后，某些人现在终于有自己的博客啦，用re专项来纪念一下，也是最近鸽了老久的比赛，现在终于完结撒花咯，还有一堆比赛有待复现，路途尚远，还要继续前行！</p>]]></content>
      
      
      <categories>
          
          <category> RE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
